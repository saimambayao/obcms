# OBCMS Environment Configuration Template
# Copy this file to .env and configure your values

# ============================================================================
# DJANGO CORE SETTINGS
# ============================================================================

# Django Settings Module
# Development: obc_management.settings.development (or just use base defaults)
# Production: obc_management.settings.production (REQUIRED)
DJANGO_SETTINGS_MODULE=obc_management.settings.production

# Secret Key - Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
# CRITICAL: Must be 50+ characters, cryptographically random
SECRET_KEY=django-insecure-change-this-in-production-minimum-50-characters

# Debug Mode
# CRITICAL: Must be 0 (False) in production
DEBUG=0

# Allowed Hosts (comma-separated, no spaces)
# REQUIRED: Explicit list of domains that can serve this application
ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com

# CSRF Trusted Origins (comma-separated, MUST include https:// scheme)
# REQUIRED for production HTTPS behind reverse proxy
CSRF_TRUSTED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# CORS Allowed Origins (comma-separated, MUST include https:// scheme)
# REQUIRED if your frontend/API consumers are on different domains
# Example: If API is api.obcms.gov.ph and frontend is app.obcms.gov.ph
# CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
# Leave unset to block all cross-origin requests (secure default)
CORS_ALLOWED_ORIGINS=https://yourdomain.com

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Connection URL
# Format: postgres://USER:PASSWORD@HOST:PORT/DATABASE
# Development:
# DATABASE_URL=postgres://obcms:obcms_dev_password@db:5432/obcms

# Production:
DATABASE_URL=postgres://obcms_user:secure-database-password@db:5432/obcms_prod

# PostgreSQL Credentials (used by docker-compose.prod.yml)
POSTGRES_DB=obcms_prod
POSTGRES_USER=obcms_user
POSTGRES_PASSWORD=secure-database-password-change-me

# ============================================================================
# REDIS & CELERY CONFIGURATION
# ============================================================================

# Redis Connection URL
REDIS_URL=redis://redis:6379/0

# Celery Broker (usually same as Redis)
CELERY_BROKER_URL=redis://redis:6379/0

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================

# Email Backend
# Development: django.core.mail.backends.console.EmailBackend
# Production: django.core.mail.backends.smtp.EmailBackend
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP Settings (required for production)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=1
EMAIL_HOST_USER=noreply@yourdomain.com
EMAIL_HOST_PASSWORD=your-email-app-password

# ============================================================================
# SECURITY HEADERS (Production REQUIRED)
# ============================================================================

# Force HTTPS redirects (disable if reverse proxy handles this)
SECURE_SSL_REDIRECT=1

# Enable after confirming HTTPS works - protects against downgrade attacks
# SECURE_HSTS_SECONDS=31536000

# Content Security Policy (CSP) - Controls which resources can load
# Helps prevent XSS attacks, clickjacking, and code injection
# Default policy allows:
#   - All resources from same origin ('self')
#   - Scripts from Tailwind CDN
#   - Styles from Font Awesome and Tailwind CDNs
#   - Fonts from Font Awesome CDN
#   - Images from anywhere (data: and https:)
# Customize if you add/remove CDNs or need stricter policy
# CONTENT_SECURITY_POLICY="default-src 'self'; script-src 'self' https://cdn.tailwindcss.com 'unsafe-inline'; style-src 'self' https://cdnjs.cloudflare.com https://cdn.tailwindcss.com 'unsafe-inline'; font-src 'self' https://cdnjs.cloudflare.com data:; img-src 'self' data: https:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';"

# ============================================================================
# GUNICORN TUNING (Production)
# ============================================================================

# Worker processes: Formula = (2 × CPU cores) + 1
# Default: auto-calculated in gunicorn.conf.py
# Override for specific server sizes:
GUNICORN_WORKERS=4

# Threads per worker (use with gthread worker class)
GUNICORN_THREADS=2

# Worker class: sync (default), gthread (I/O-bound), gevent (async)
# GUNICORN_WORKER_CLASS=gthread

# Logging level
GUNICORN_LOG_LEVEL=info

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================

# Site Configuration
SITE_NAME=OBC Management System
SITE_DESCRIPTION=Other Bangsamoro Communities Management System

# Logging Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================

# Google AI Services (Optional)
# GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google-credentials.json

# ============================================================================
# MEDIA STORAGE CONFIGURATION (Optional - for horizontal scaling)
# ============================================================================

# Current Setup: Filesystem storage via Docker volumes (production-ready)
# - Suitable for single-server deployments (Coolify, Docker Compose)
# - Handles up to 10,000 users and 100GB files
# - No cloud costs, simple backup strategy
#
# When to Migrate to S3:
# - Need multiple web server replicas (horizontal scaling)
# - Deploying to Kubernetes or container orchestration
# - Media storage exceeds 100GB
# - Need CDN for global file distribution
# - Require zero-maintenance cloud backups
#
# Migration Guide: docs/deployment/s3-migration-guide.md
# Estimated Migration Time: 4-6 hours (zero downtime)

# Enable S3 storage (leave as 0 for filesystem storage)
USE_S3=0

# AWS S3 Configuration (only required if USE_S3=1)
# Generate credentials: AWS Console → IAM → Users → Create Access Key
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# AWS_STORAGE_BUCKET_NAME=obcms-media-production
# AWS_S3_REGION_NAME=ap-southeast-1  # Singapore region (closest to PH)

# Optional: CloudFront CDN domain (for faster global access)
# AWS_S3_CUSTOM_DOMAIN=cdn.obcms.gov.ph

# DigitalOcean Spaces (S3-compatible alternative, $5/month)
# USE_DO_SPACES=1
# AWS_S3_ENDPOINT_URL=https://sgp1.digitaloceanspaces.com

# MinIO (self-hosted S3-compatible alternative, free)
# USE_MINIO=1
# MINIO_ENDPOINT_URL=https://minio.yourdomain.com
# MINIO_USE_SSL=1

# ============================================================================
# DEVELOPMENT OVERRIDES (comment out for production)
# ============================================================================

# Development Database (Docker)
# DATABASE_URL=postgres://obcms:obcms_dev_password@localhost:5432/obcms

# Development settings module
# DJANGO_SETTINGS_MODULE=obc_management.settings.development

# Development Debug mode
# DEBUG=1

# Development Allowed Hosts
# ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Development Email (console)
# EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend