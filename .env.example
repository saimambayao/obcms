# OBCMS Environment Configuration Template
# Copy this file to .env and configure your values

# =============================================================================
# SECURITY CONFIGURATION (CRITICAL: Update all defaults before deployment)
# =============================================================================

# Secret Key (REQUIRED)
# Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
# CRITICAL: Must be unique per environment, never commit actual key to git
SECRET_KEY=CHANGEME-GENERATE-STRONG-KEY-HERE

# Django Settings Module
# Options: obc_management.settings.development, obc_management.settings.production
DJANGO_SETTINGS_MODULE=obc_management.settings.development

# Debug Mode (CRITICAL: Must be False in production)
DEBUG=False

# Allowed Hosts (comma-separated domains)
# Example: ALLOWED_HOSTS=obcms.gov.ph,www.obcms.gov.ph,staging.obcms.gov.ph
ALLOWED_HOSTS=localhost,127.0.0.1

# Admin URL (security through obscurity - use unpredictable path)
# Example: ADMIN_URL=secretadmin2024/
# Default: admin/
ADMIN_URL=admin/

# Session Configuration
SESSION_COOKIE_NAME=obcms_sessionid
SESSION_COOKIE_AGE=28800  # 8 hours in seconds

# Admin IP Whitelist (comma-separated IPs or CIDR ranges)
# Empty = allow all IPs (development only)
# Example: ADMIN_IP_WHITELIST=192.168.1.100,10.0.0.0/24,203.177.12.45
ADMIN_IP_WHITELIST=

# Metrics Authentication Token
# Generate with: openssl rand -hex 32
METRICS_TOKEN=CHANGEME-$(openssl rand -hex 32)

# =============================================================================
# DJANGO CORE SETTINGS
# =============================================================================

# CSRF Trusted Origins (comma-separated, MUST include https:// scheme)
# CRITICAL: Required to prevent 403 CSRF errors on ALL form submissions
# Without this, login, data entry, and ALL forms will fail with 403 error
#
# FORMAT REQUIREMENTS:
# - MUST include scheme (https:// or http://)
# - NO trailing slashes
# - Include ALL domains that will serve this app (www and non-www)
#
# Examples:
# Single domain:     CSRF_TRUSTED_ORIGINS=https://obcms.gov.ph
# Multiple domains:  CSRF_TRUSTED_ORIGINS=https://obcms.gov.ph,https://www.obcms.gov.ph
# Development:       CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000
#
# Common mistakes:
# ❌ WRONG: CSRF_TRUSTED_ORIGINS=obcms.gov.ph (missing https://)
# ❌ WRONG: CSRF_TRUSTED_ORIGINS=https://obcms.gov.ph/ (trailing slash)
# ✅ CORRECT: CSRF_TRUSTED_ORIGINS=https://obcms.gov.ph
CSRF_TRUSTED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com

# CORS Allowed Origins (comma-separated, MUST include https:// scheme)
# REQUIRED if your frontend/API consumers are on different domains
# Example: If API is api.obcms.gov.ph and frontend is app.obcms.gov.ph
# CORS_ALLOWED_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
# Leave unset to block all cross-origin requests (secure default)
CORS_ALLOWED_ORIGINS=https://yourdomain.com

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database URL (PostgreSQL recommended for production)
DATABASE_URL=postgres://obcms_user:${POSTGRES_PASSWORD}@db:5432/obcms_prod

# PostgreSQL SSL/TLS (Production Recommended)
DB_SSLMODE=require          # Options: disable, allow, prefer, require, verify-ca, verify-full
DB_SSL_CERT=                # Path to CA certificate (optional)

# PostgreSQL Credentials
POSTGRES_DB=obcms_prod
POSTGRES_USER=obcms_user
POSTGRES_PASSWORD=CHANGEME-GENERATE-STRONG-PASSWORD-HERE

# =============================================================================
# REDIS & CELERY CONFIGURATION
# =============================================================================

# Redis Password (CRITICAL: Must be set for production)
# Generate with: openssl rand -base64 32
REDIS_PASSWORD=CHANGEME-GENERATE-STRONG-PASSWORD-HERE

# Redis Connection URL
REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0

# Celery Configuration
CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/1

# ============================================================================
# EMAIL CONFIGURATION
# ============================================================================

# Email Backend
# Development: django.core.mail.backends.console.EmailBackend
# Production: django.core.mail.backends.smtp.EmailBackend
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP Settings (required for production)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=1
EMAIL_HOST_USER=noreply@yourdomain.com
EMAIL_HOST_PASSWORD=your-email-app-password

# ============================================================================
# SECURITY HEADERS (Production REQUIRED)
# ============================================================================

# Force HTTPS redirects (disable if reverse proxy handles this)
SECURE_SSL_REDIRECT=1

# Enable after confirming HTTPS works - protects against downgrade attacks
# SECURE_HSTS_SECONDS=31536000

# Content Security Policy (CSP) - Controls which resources can load
# Helps prevent XSS attacks, clickjacking, and code injection
# Default policy allows:
#   - All resources from same origin ('self')
#   - Scripts from Tailwind CDN
#   - Styles from Font Awesome and Tailwind CDNs
#   - Fonts from Font Awesome CDN
#   - Images from anywhere (data: and https:)
# Customize if you add/remove CDNs or need stricter policy
# CONTENT_SECURITY_POLICY="default-src 'self'; script-src 'self' https://cdn.tailwindcss.com 'unsafe-inline'; style-src 'self' https://cdnjs.cloudflare.com https://cdn.tailwindcss.com 'unsafe-inline'; font-src 'self' https://cdnjs.cloudflare.com data:; img-src 'self' data: https:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';"

# Admin IP Whitelist - Restrict /admin/ access to specific IP addresses
# Empty = allow all IPs (development only)
# Format: Comma-separated list of IPs or CIDR ranges
# Example: ADMIN_IP_WHITELIST=192.168.1.100,10.0.0.0/24,203.177.12.45
# IMPORTANT: In production, always set this to your organization's IP ranges
ADMIN_IP_WHITELIST=

# Metrics Authentication Token - Protect Prometheus /metrics/ endpoint
# Generate with: openssl rand -hex 32
# REQUIRED in production to prevent information disclosure
# Example: METRICS_TOKEN=a1b2c3d4e5f6789...
# Usage: curl -H "Authorization: Bearer YOUR_TOKEN" https://yourdomain.com/metrics/
METRICS_TOKEN=

# ============================================================================
# GUNICORN TUNING (Production)
# ============================================================================

# Worker processes: Formula = (2 × CPU cores) + 1
# Default: auto-calculated in gunicorn.conf.py
# Override for specific server sizes:
GUNICORN_WORKERS=4

# Threads per worker (use with gthread worker class)
GUNICORN_THREADS=2

# Worker class: sync (default), gthread (I/O-bound), gevent (async)
# GUNICORN_WORKER_CLASS=gthread

# Logging level
GUNICORN_LOG_LEVEL=info

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================

# Base URL (used for absolute links in emails)
BASE_URL=https://yourdomain.com

# Site Configuration
SITE_NAME=OBC Management System
SITE_DESCRIPTION=Other Bangsamoro Communities Management System

# Logging Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================

# Google AI Services (Optional)
# GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google-credentials.json

# ============================================================================
# MEDIA STORAGE CONFIGURATION (Optional - for horizontal scaling)
# ============================================================================

# Current Setup: Filesystem storage via Docker volumes (production-ready)
# - Suitable for single-server deployments (Coolify, Docker Compose)
# - Handles up to 10,000 users and 100GB files
# - No cloud costs, simple backup strategy
#
# When to Migrate to S3:
# - Need multiple web server replicas (horizontal scaling)
# - Deploying to Kubernetes or container orchestration
# - Media storage exceeds 100GB
# - Need CDN for global file distribution
# - Require zero-maintenance cloud backups
#
# Migration Guide: docs/deployment/s3-migration-guide.md
# Estimated Migration Time: 4-6 hours (zero downtime)

# Enable S3 storage (leave as 0 for filesystem storage)
USE_S3=0

# AWS S3 Configuration (only required if USE_S3=1)
# Generate credentials: AWS Console → IAM → Users → Create Access Key
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# AWS_STORAGE_BUCKET_NAME=obcms-media-production
# AWS_S3_REGION_NAME=ap-southeast-1  # Singapore region (closest to PH)

# Optional: CloudFront CDN domain (for faster global access)
# AWS_S3_CUSTOM_DOMAIN=cdn.obcms.gov.ph

# DigitalOcean Spaces (S3-compatible alternative, $5/month)
# USE_DO_SPACES=1
# AWS_S3_ENDPOINT_URL=https://sgp1.digitaloceanspaces.com

# MinIO (self-hosted S3-compatible alternative, free)
# USE_MINIO=1
# MINIO_ENDPOINT_URL=https://minio.yourdomain.com
# MINIO_USE_SSL=1

# ============================================================================
# DEVELOPMENT OVERRIDES (comment out for production)
# ============================================================================

# Development Database (Docker)
# DATABASE_URL=postgres://obcms:obcms_dev_password@localhost:5432/obcms

# Development settings module
# DJANGO_SETTINGS_MODULE=obc_management.settings.development

# Development Debug mode
# DEBUG=1

# Development Allowed Hosts
# ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Development Email (console)
# EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# ============================================================================
# WORK HIERARCHY SYSTEM
# ============================================================================

# WorkItem Unified Model (replaces StaffTask, Event, ProjectWorkflow)
# Documentation: WORKITEM_MIGRATION_COMPLETE.md

# Enable WorkItem model as primary work management system
# REQUIRED: Set to 1 after migration to WorkItem (default: 1 for new installations)
USE_WORKITEM_MODEL=1

# Enable unified calendar feed (combines all work types)
# REQUIRED: Set to 1 for WorkItem-based calendar (default: 1 for new installations)
USE_UNIFIED_CALENDAR=1

# Disable dual-write to legacy models (migration complete)
# Set to 1 only if you need legacy model synchronization during migration
# PRODUCTION: Set to 0 after verifying WorkItem migration complete
DUAL_WRITE_ENABLED=0

# Prevent writes to legacy models (StaffTask, Event, ProjectWorkflow)
# IMPORTANT: Set to 1 in production after migration verification
# When enabled, legacy models are read-only and WorkItem is the only writable model
LEGACY_MODELS_READONLY=1

# ============================================================================
# LEGACY MODEL DEPRECATION NOTICE
# ============================================================================
# The following models are DEPRECATED and replaced by WorkItem:
#
# - common.StaffTask → WorkItem(work_type='task')
# - coordination.Event → WorkItem(work_type='activity')
# - project_central.ProjectWorkflow → WorkItem(work_type='project')
#
# Legacy models are marked as abstract in code and database tables are removed.
# All new development MUST use WorkItem model.
#
# Migration completed: October 5, 2025
# Database tables will be permanently removed in version 3.0
#
# See documentation:
# - WORKITEM_MIGRATION_COMPLETE.md (migration summary)
# - docs/refactor/ (detailed migration guides)
# ============================================================================

# =============================================================================
# SECURITY BEST PRACTICES CHECKLIST
# =============================================================================
# Before production deployment:
# [ ] Generate unique SECRET_KEY (50+ characters)
# [ ] Set DEBUG=False
# [ ] Configure ALLOWED_HOSTS with actual domain names
# [ ] Configure CSRF_TRUSTED_ORIGINS with https:// scheme
# [ ] Change ADMIN_URL to unpredictable path
# [ ] Generate strong REDIS_PASSWORD
# [ ] Generate strong POSTGRES_PASSWORD
# [ ] Set ADMIN_IP_WHITELIST with authorized IPs
# [ ] Generate METRICS_TOKEN
# [ ] Configure DB_SSLMODE=require
# [ ] Enable HTTPS/SSL certificates
# [ ] Review all CHANGEME values
# [ ] Run: python manage.py check_security_settings
# [ ] Run: python manage.py check --deploy
# =============================================================================
