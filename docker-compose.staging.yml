# OBCMS Staging Environment - Reduced Resources for Testing
# Simplified infrastructure for staging/testing before production
# Target: 10-20 concurrent users, testing and validation

services:
  # ============================================================================
  # DATABASE LAYER (Single PostgreSQL + PgBouncer)
  # ============================================================================

  # PostgreSQL Database (Single Instance)
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      # Performance tuning for staging (reduced from production)
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1536MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=512MB
      -c effective_cache_size=1536MB
      -c work_mem=8MB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c min_wal_size=512MB
      -c max_wal_size=2GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # PgBouncer Connection Pooler (Single DB Backend)
  pgbouncer:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 200
      DEFAULT_POOL_SIZE: 25
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "6432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # ============================================================================
  # CACHE LAYER (Single Redis Instance)
  # ============================================================================

  # Redis Cache (Single Instance - No Replication for Staging)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ============================================================================
  # APPLICATION LAYER (Django + Celery - Reduced Scale)
  # ============================================================================

  # Database Migration Job (runs once per deployment)
  migrate:
    build:
      context: .
      target: production
    command: >
      sh -c "cd src &&
             echo '=== Running deployment checks ===' &&
             python manage.py check --deploy &&
             echo '=== Running database migrations ===' &&
             python manage.py migrate --noinput &&
             echo '=== Collecting static files ===' &&
             python manage.py collectstatic --noinput &&
             echo '=== Migration complete ==='  "
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.staging
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      - EMAIL_HOST=${EMAIL_HOST:-}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-1}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: "no"
    networks:
      - obcms_network

  # Django Web Application Server 1
  web1:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.staging
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
      - GUNICORN_LOG_LEVEL=${GUNICORN_LOG_LEVEL:-info}
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Django Web Application Server 2
  web2:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.staging
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # ============================================================================
  # CELERY WORKERS (Background Tasks - Single Worker)
  # ============================================================================

  # Celery Worker (Single Instance for Staging)
  celery-worker:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.staging
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "cd src &&
             celery -A obc_management worker
             --loglevel=info
             --concurrency=2
             --max-tasks-per-child=1000
             --time-limit=300
             --soft-time-limit=240"
    stop_grace_period: 60s
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: .
      target: production
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.staging
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "cd src &&
             celery -A obc_management beat --loglevel=info"
    stop_grace_period: 30s
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ============================================================================
  # LOAD BALANCER & REVERSE PROXY (Nginx)
  # ============================================================================

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/load_balancer_staging.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web1:
        condition: service_healthy
      web2:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # MONITORING STACK (Optional - Prometheus + Grafana)
  # ============================================================================

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    profiles:
      - monitoring
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
    ports:
      - "9090:9090"
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - obcms_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - obcms_network

  # Redis Exporter (Redis Metrics)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - obcms_network

  # Postgres Exporter (PostgreSQL Metrics)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - obcms_network

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  obcms_network:
    driver: bridge
