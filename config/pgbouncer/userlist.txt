;; PgBouncer User List for OBCMS
;; Format: "username" "password_hash"
;;
;; SECURITY WARNING: Replace placeholder hashes with actual credentials
;; Generate strong passwords and proper MD5 hashes for production
;;
;; HOW TO GENERATE MD5 HASH:
;; Format: echo -n "passwordusername" | md5sum
;; Then prefix with "md5"
;;
;; Example:
;; Password: MySecurePass123
;; Username: obcms_app
;; Command: echo -n "MySecurePass123obcms_app" | md5sum
;; Output: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
;; Final hash: "obcms_app" "md5a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6"

;; ============================================================================
;; PRODUCTION USERS - REPLACE ALL HASHES BEFORE DEPLOYMENT
;; ============================================================================

;; PostgreSQL superuser (for administrative tasks)
;; Generate: echo -n "YOUR_POSTGRES_PASSWORDpostgres" | md5sum
"postgres" "md5REPLACE_WITH_POSTGRES_PASSWORD_HASH"

;; Application database user (Django connections)
;; Generate: echo -n "YOUR_APP_PASSWORDobcms_app" | md5sum
"obcms_app" "md5REPLACE_WITH_APP_PASSWORD_HASH"

;; Replication user (for streaming replication)
;; Generate: echo -n "YOUR_REPLICATION_PASSWORDreplicator" | md5sum
"replicator" "md5REPLACE_WITH_REPLICATOR_PASSWORD_HASH"

;; Monitoring user (for Prometheus/Grafana)
;; Generate: echo -n "YOUR_MONITORING_PASSWORDmonitoring" | md5sum
"monitoring" "md5REPLACE_WITH_MONITORING_PASSWORD_HASH"

;; PgBouncer admin user (for PgBouncer management via pgbouncer console)
;; Generate: echo -n "YOUR_ADMIN_PASSWORDpgbouncer" | md5sum
"pgbouncer" "md5REPLACE_WITH_PGBOUNCER_ADMIN_HASH"

;; ============================================================================
;; EXAMPLE WITH REAL HASHES (FOR TESTING/DEVELOPMENT ONLY)
;; ============================================================================
;; DO NOT USE THESE IN PRODUCTION - THEY ARE PUBLIC EXAMPLES
;;
;; Example credentials (password: "devpass123"):
;; "postgres" "md5d7a0b7d9e3f5a4c2b1e0d9c8b7a6f5e4"
;; "obcms_app" "md5c6b5a4d3e2f1a0b9c8d7e6f5a4b3c2d1"
;; "monitoring" "md5e4d3c2b1a0f9e8d7c6b5a4f3e2d1c0b9"
;; "pgbouncer" "md5f3e2d1c0b9a8f7e6d5c4b3a2f1e0d9c8"

;; ============================================================================
;; GENERATION SCRIPT
;; ============================================================================
;; Use this bash script to generate all hashes at once:
;;
;; #!/bin/bash
;; echo "Enter password for postgres user:"
;; read -s POSTGRES_PASS
;; echo "postgres hash: md5$(echo -n "${POSTGRES_PASS}postgres" | md5sum | cut -d' ' -f1)"
;;
;; echo "Enter password for obcms_app user:"
;; read -s APP_PASS
;; echo "obcms_app hash: md5$(echo -n "${APP_PASS}obcms_app" | md5sum | cut -d' ' -f1)"
;;
;; echo "Enter password for replicator user:"
;; read -s REPL_PASS
;; echo "replicator hash: md5$(echo -n "${REPL_PASS}replicator" | md5sum | cut -d' ' -f1)"
;;
;; echo "Enter password for monitoring user:"
;; read -s MON_PASS
;; echo "monitoring hash: md5$(echo -n "${MON_PASS}monitoring" | md5sum | cut -d' ' -f1)"
;;
;; echo "Enter password for pgbouncer admin:"
;; read -s PGB_PASS
;; echo "pgbouncer hash: md5$(echo -n "${PGB_PASS}pgbouncer" | md5sum | cut -d' ' -f1)"
