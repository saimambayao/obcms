# Task ID: 21
# Title: Data Import and Migration Tools
# Status: done
# Dependencies: 3, 4, 5
# Priority: medium
# Description: Develop data import and migration tools to facilitate the initial population of the system with existing data from various sources.
# Details:
1. Create data import models and interfaces
2. Implement CSV/Excel import functionality
3. Build data validation and cleaning tools
4. Create data mapping and transformation utilities
5. Implement import logging and error handling
6. Build admin interfaces for data import management
7. Create management commands for bulk imports

Implementation example:
```python
# models.py
from django.db import models
from django.conf import settings

class DataImport(models.Model):
    IMPORT_TYPES = [
        ('communities', 'Communities'),
        ('stakeholders', 'Stakeholders'),
        ('assessments', 'Assessments'),
        ('needs', 'Needs'),
        ('organizations', 'Organizations'),
        ('other', 'Other')
    ]
    
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('partial', 'Partially Completed')
    ]
    
    import_type = models.CharField(max_length=20, choices=IMPORT_TYPES)
    file = models.FileField(upload_to='imports/%Y/%m/')
    description = models.TextField(blank=True)
    mapping = models.JSONField(default=dict, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    records_total = models.PositiveIntegerField(null=True, blank=True)
    records_imported = models.PositiveIntegerField(null=True, blank=True)
    records_failed = models.PositiveIntegerField(null=True, blank=True)
    error_log = models.TextField(blank=True)
    imported_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# management/commands/import_communities.py
from django.core.management.base import BaseCommand
import csv
from ...models import OBCCommunity, Region, Province, Municipality, Barangay

class Command(BaseCommand):
    help = 'Import communities from CSV file'
    
    def add_arguments(self, parser):
        parser.add_argument('csv_file', type=str, help='Path to the CSV file')
    
    def handle(self, *args, **options):
        csv_file = options['csv_file']
        
        with open(csv_file, 'r') as file:
            reader = csv.DictReader(file)
            total_rows = 0
            imported = 0
            errors = 0
            
            for row in reader:
                total_rows += 1
                try:
                    # Get or create region
                    region, _ = Region.objects.get_or_create(
                        name=row['region_name'],
                        defaults={'code': row.get('region_code', '')}
                    )
                    
                    # Get or create province
                    province, _ = Province.objects.get_or_create(
                        name=row['province_name'],
                        region=region,
                        defaults={'code': row.get('province_code', '')}
                    )
                    
                    # Get or create municipality
                    municipality, _ = Municipality.objects.get_or_create(
                        name=row['municipality_name'],
                        province=province,
                        defaults={'code': row.get('municipality_code', '')}
                    )
                    
                    # Get or create barangay
                    barangay, _ = Barangay.objects.get_or_create(
                        name=row['barangay_name'],
                        municipality=municipality,
                        defaults={'code': row.get('barangay_code', '')}
                    )
                    
                    # Create community
                    community, created = OBCCommunity.objects.get_or_create(
                        name=row['community_name'],
                        barangay=barangay,
                        defaults={
                            'population': row.get('population', None),
                            'households': row.get('households', None),
                            'cultural_background': row.get('cultural_background', ''),
                            'languages': row.get('languages', ''),
                            'religious_facilities': row.get('religious_facilities', ''),
                            'established_year': row.get('established_year', None),
                            'status': row.get('status', 'developing')
                        }
                    )
                    
                    if created:
                        self.stdout.write(self.style.SUCCESS(f'Created community: {community.name}'))
                    else:
                        self.stdout.write(self.style.WARNING(f'Community already exists: {community.name}'))
                    
                    imported += 1
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'Error importing row {total_rows}: {str(e)}'))
                    errors += 1
            
            self.stdout.write(self.style.SUCCESS(f'Import completed. Total: {total_rows}, Imported: {imported}, Errors: {errors}'))
```

# views.py for import interface
```python
from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth.decorators import login_required, permission_required
from .models import DataImport
from .forms import DataImportForm
from .tasks import process_data_import

@login_required
@permission_required('app.add_dataimport')
def import_data(request):
    if request.method == 'POST':
        form = DataImportForm(request.POST, request.FILES)
        if form.is_valid():
            import_obj = form.save(commit=False)
            import_obj.imported_by = request.user
            import_obj.save()
            
            # Process import (could be async with Celery)
            process_data_import.delay(import_obj.id)
            
            messages.success(request, 'Data import initiated. You will be notified when complete.')
            return redirect('import_list')
    else:
        form = DataImportForm()
    
    return render(request, 'data_import/import_form.html', {'form': form})
```

# Test Strategy:
1. Unit tests for data import functionality
2. Test CSV/Excel import with sample data
3. Verify data validation and cleaning
4. Test data mapping and transformation
5. Validate import logging and error handling
6. Test management commands for bulk imports
7. Test edge cases with malformed data
