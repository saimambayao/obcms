# Task ID: 10
# Title: Geographic Mapping and Visualization
# Status: done
# Dependencies: 3, 4, 7
# Priority: medium
# Description: Implement geographic mapping and visualization capabilities for OBC communities, needs assessments, and other spatial data.
# Details:
1. Integrate with mapping libraries (Leaflet.js or similar)
2. Implement geographic data models (coordinates, boundaries)
3. Create map visualization components
4. Build community location mapping
5. Implement needs assessment geographic visualization
6. Create geographic data export capabilities
7. Build admin interfaces for geographic data management

Model and implementation example:
```python
from django.db import models
from django.contrib.gis.db import models as gis_models  # Optional if using GeoDjango

# If using regular Django without GeoDjango
class GeographicLocation(models.Model):
    community = models.OneToOneField('OBCCommunity', on_delete=models.CASCADE, related_name='location')
    latitude = models.DecimalField(max_digits=9, decimal_places=6)
    longitude = models.DecimalField(max_digits=9, decimal_places=6)
    elevation = models.DecimalField(max_digits=9, decimal_places=2, null=True, blank=True)
    area_size = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, help_text='Size in square kilometers')
    boundary_description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# JavaScript for map integration (in template)
'''
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize map
        var map = L.map('map').setView([8.0, 125.0], 7);
        
        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
        
        // Add community markers from data
        var communities = {{ communities_json|safe }};
        communities.forEach(function(community) {
            L.marker([community.latitude, community.longitude])
                .addTo(map)
                .bindPopup(community.name);
        });
    });
</script>
'''
```

# Test Strategy:
1. Unit tests for geographic data models
2. Test map visualization components
3. Verify community location mapping
4. Test needs assessment geographic visualization
5. Validate geographic data export capabilities
6. Test map rendering and interaction in different browsers
7. Verify marker placement and information display
