# Task ID: 9
# Title: Stakeholder Engagement and Consultation Tracking
# Status: done
# Dependencies: 5, 7
# Priority: medium
# Description: Implement the stakeholder engagement and consultation tracking system to manage feedback, consultations, and engagement activities with community stakeholders.
# Details:
1. Create consultation and engagement models
2. Implement feedback collection and management
3. Build consultation scheduling and planning
4. Create stakeholder participation tracking
5. Implement consultation outcomes and follow-up actions
6. Build admin interfaces for consultation management
7. Create API endpoints for consultation data

Model example:
```python
from django.db import models
from django.conf import settings

class Consultation(models.Model):
    CONSULTATION_TYPES = [
        ('meeting', 'Meeting'),
        ('forum', 'Public Forum'),
        ('workshop', 'Workshop'),
        ('interview', 'Interview'),
        ('focus_group', 'Focus Group Discussion'),
        ('other', 'Other')
    ]
    
    STATUS_CHOICES = [
        ('planned', 'Planned'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
        ('postponed', 'Postponed')
    ]
    
    title = models.CharField(max_length=255)
    consultation_type = models.CharField(max_length=20, choices=CONSULTATION_TYPES)
    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='consultations')
    assessment = models.ForeignKey('MANAAssessment', on_delete=models.SET_NULL, null=True, blank=True, related_name='consultations')
    date = models.DateField()
    time = models.TimeField(null=True, blank=True)
    location = models.CharField(max_length=255)
    description = models.TextField()
    facilitator = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='facilitated_consultations')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')
    participants_count = models.PositiveIntegerField(null=True, blank=True)
    summary = models.TextField(blank=True)
    outcomes = models.TextField(blank=True)
    next_steps = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class ConsultationParticipant(models.Model):
    consultation = models.ForeignKey(Consultation, on_delete=models.CASCADE, related_name='participants')
    stakeholder = models.ForeignKey('Stakeholder', on_delete=models.CASCADE, null=True, blank=True)
    name = models.CharField(max_length=255, blank=True)  # For non-stakeholder participants
    role = models.CharField(max_length=100, blank=True)
    feedback = models.TextField(blank=True)
    attended = models.BooleanField(default=True)
```

# Test Strategy:
1. Unit tests for consultation creation and management
2. Test feedback collection and management
3. Verify consultation scheduling and planning
4. Test stakeholder participation tracking
5. Validate consultation outcomes and follow-up actions
6. Test API endpoints for consultation data
