# Task ID: 4
# Title: OBC Community Profile Models and Management
# Status: done
# Dependencies: 3
# Priority: high
# Description: Develop the core data models and management interfaces for Other Bangsamoro Community profiles, including demographic data, cultural information, and community status tracking.
# Details:
✅ CORE MODELS IMPLEMENTED:
- OBCCommunity: Complete community profile model with demographics, cultural info, development status
- CommunityLivelihood: Tracks economic activities, income sources, challenges and opportunities  
- CommunityInfrastructure: Monitors infrastructure availability, condition, and improvement priorities

✅ MODEL FEATURES:
- Comprehensive demographic tracking (age groups, households, population)
- Cultural and religious information (languages, practices, mosque/madrasah status)
- Historical data (establishment year, origin story, migration history)
- Development status tracking with priority needs assessment
- Geographic integration with administrative hierarchy
- Livelihood categorization with income levels and seasonal patterns
- Infrastructure assessment with coverage percentages and priority ranking

✅ ADMIN INTERFACE:
- Rich admin interfaces with color-coded status indicators
- Inline editing for livelihoods and infrastructure
- Comprehensive filtering and searching capabilities
- Bulk actions for status updates and priority management
- Statistical displays and administrative path navigation

✅ SAMPLE DATA:
- Populated 3 realistic sample communities representing different regions and cultures:
  * Campo Islam Tausug Community (Region IX) - Fishing-based with strong Islamic identity
  * Maguindanao Settlers Community (Region XII) - Agricultural community in urban setting
  * Tboli-Muslim Community (Region XII) - Indigenous-Muslim mixed community
- Each with detailed livelihoods, infrastructure assessments, and cultural profiles

✅ API IMPLEMENTATION:
- Complete REST API with detailed and list serializers
- Advanced filtering, searching, and ordering capabilities
- Statistics endpoint providing comprehensive community analytics
- Specialized endpoints for vulnerable communities, regional grouping, and critical infrastructure needs
- Proper foreign key optimization with select_related and prefetch_related

Model implementation example:
```python
from django.db import models

class OBCCommunity(models.Model):
    name = models.CharField(max_length=255)
    barangay = models.ForeignKey('Barangay', on_delete=models.CASCADE, related_name='obc_communities')
    population = models.PositiveIntegerField(null=True, blank=True)
    households = models.PositiveIntegerField(null=True, blank=True)
    cultural_background = models.TextField(blank=True)
    languages = models.CharField(max_length=255, blank=True)
    religious_facilities = models.TextField(blank=True)
    established_year = models.PositiveIntegerField(null=True, blank=True)
    status = models.CharField(max_length=50, choices=[
        ('developing', 'Developing'),
        ('established', 'Established'),
        ('vulnerable', 'Vulnerable'),
        ('thriving', 'Thriving')
    ], default='developing')
    last_updated = models.DateTimeField(auto_now=True)
    created_at = models.DateTimeField(auto_now_add=True)

class CommunityLivelihood(models.Model):
    community = models.ForeignKey(OBCCommunity, on_delete=models.CASCADE, related_name='livelihoods')
    livelihood_type = models.CharField(max_length=100)
    description = models.TextField()
    percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    is_primary = models.BooleanField(default=False)
    
class CommunityInfrastructure(models.Model):
    community = models.ForeignKey(OBCCommunity, on_delete=models.CASCADE, related_name='infrastructure')
    infrastructure_type = models.CharField(max_length=100)
    condition = models.CharField(max_length=50, choices=[
        ('good', 'Good'),
        ('fair', 'Fair'),
        ('poor', 'Poor'),
        ('nonexistent', 'Non-existent')
    ])
    coverage_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    priority_level = models.PositiveSmallIntegerField(default=3)
    notes = models.TextField(blank=True)
```

# Test Strategy:
1. Unit tests for OBC Community model creation and validation
2. Test relationships between communities and administrative divisions
3. Verify demographic data calculations and aggregations
4. Test API endpoints for community data including:
   - Filtering and searching capabilities
   - Statistics endpoint functionality
   - Specialized endpoints for vulnerable communities
5. Validate admin interface functionality including:
   - Color-coded status indicators
   - Inline editing for related models
   - Bulk actions and filtering
6. Test data import/export capabilities
7. Verify sample data integrity across the three implemented communities
8. Test infrastructure assessment calculations and priority ranking
9. Validate livelihood categorization and economic activity tracking

# Subtasks:
## 4.1. Core OBC Community Models Implementation [completed]
### Dependencies: None
### Description: Implement the OBCCommunity, CommunityLivelihood, and CommunityInfrastructure models with all required fields and relationships
### Details:


## 4.2. Admin Interface Development [completed]
### Dependencies: None
### Description: Create rich admin interfaces with inline editing, filtering, and statistical displays
### Details:


## 4.3. API Implementation [completed]
### Dependencies: None
### Description: Develop REST API endpoints with filtering, searching, and specialized community analytics
### Details:


## 4.4. Sample Data Creation [completed]
### Dependencies: None
### Description: Populate system with realistic sample communities representing different regions and cultures
### Details:


