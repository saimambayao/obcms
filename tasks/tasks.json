{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Environment Configuration",
      "description": "Initialize the Django project, configure the development environment, and set up the basic project structure for the OBC Management System (Other Bangsamoro Communities Management System).",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "1. Create a new Django 4.2+ project\n2. Configure project settings (timezone, language, etc.)\n3. Set up SQLite database (with future upgrade path to PostgreSQL)\n4. Initialize Git repository with appropriate .gitignore\n5. Configure virtual environment\n6. Install required dependencies (Django, Django REST Framework)\n7. Set up basic project structure following Django best practices\n8. Configure static and media file handling\n9. Create initial README.md with project overview that explains the system is designed to manage Other Bangsamoro Communities data and will be used by the OOBC\n\nCode example for project initialization:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install django==4.2.* djangorestframework\ndjango-admin startproject obc_management .\n```",
      "testStrategy": "1. Verify Django project runs without errors\n2. Confirm all dependencies are correctly installed\n3. Test database connection\n4. Ensure development server starts successfully\n5. Validate project structure against Django best practices",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Authentication and User Management System",
      "description": "Implement the authentication system with role-based access control for different user types including OOBC staff, administrators, and stakeholders.",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "1. Extend Django's built-in User model with custom fields for OOBC roles\n2. Create user roles (Admin, OOBC Staff, Chief Minister's Office, BMOA, LGU, NGA, Community Leader)\n3. Implement role-based permissions system\n4. Create login/logout functionality\n5. Implement password reset and account recovery\n6. Set up user profile management\n7. Create user registration workflow with approval process\n8. Implement session management and security features\n\nModel example:\n```python\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass User(AbstractUser):\n    USER_TYPES = (\n        ('admin', 'Administrator'),\n        ('oobc_staff', 'OOBC Staff'),\n        ('cm_office', 'Chief Minister Office'),\n        ('bmoa', 'BARMM Ministry/Agency/Office'),\n        ('lgu', 'Local Government Unit'),\n        ('nga', 'National Government Agency'),\n        ('community_leader', 'Community Leader'),\n        ('researcher', 'Assessment Coordinator/Researcher'),\n    )\n    user_type = models.CharField(max_length=20, choices=USER_TYPES)\n    organization = models.CharField(max_length=255, blank=True)\n    position = models.CharField(max_length=255, blank=True)\n    contact_number = models.CharField(max_length=20, blank=True)\n```",
      "testStrategy": "1. Unit tests for user creation, authentication, and authorization\n2. Test role-based access control for different user types\n3. Test password reset functionality\n4. Verify user profile update functionality\n5. Test login/logout flows\n6. Security testing for authentication endpoints\n7. Test user approval workflow functionality",
      "subtasks": [
        {
          "id": 2.1,
          "title": "Core Authentication Implementation",
          "description": "Implement the backend components of the authentication system",
          "status": "completed",
          "details": "Created custom User model in common/models.py with OBC-specific fields (user_type, organization, position, contact_number, approval workflow). Updated Django settings to use custom User model (AUTH_USER_MODEL = 'common.User')."
        },
        {
          "id": 2.2,
          "title": "Admin Interface and Workflow",
          "description": "Create comprehensive admin interface with approval workflow",
          "status": "completed",
          "details": "Created comprehensive admin interface with approval workflow and bulk actions. Integrated approval workflow - new users need admin approval before they can login."
        },
        {
          "id": 2.3,
          "title": "Authentication Views and Forms",
          "description": "Create views and forms for authentication flows",
          "status": "completed",
          "details": "Created authentication views (login, logout, registration, dashboard, profile). Created custom forms with proper validation and styling. Set up URL patterns for authentication flows."
        },
        {
          "id": 2.4,
          "title": "Database Migrations",
          "description": "Create and apply database migrations for the custom User model",
          "status": "completed",
          "details": "Created and applied database migrations successfully for the custom User model and related authentication components."
        },
        {
          "id": 2.5,
          "title": "HTML Templates for Authentication Views",
          "description": "Create HTML templates for all authentication-related views",
          "status": "completed",
          "details": "Created responsive templates for login, logout, registration, dashboard, profile, and other authentication-related pages. Implemented Bangsamoro cultural branding with 'BANGSAMORO KA, SAAN KA MAN!' motto."
        },
        {
          "id": 2.6,
          "title": "Styling with Tailwind CSS",
          "description": "Apply Tailwind CSS styling to authentication templates",
          "status": "completed",
          "details": "Implemented responsive design and consistent styling across all authentication pages using Tailwind CSS. Created base template with navigation, messages, and footer. Ensured proper error handling on forms."
        },
        {
          "id": 2.7,
          "title": "Authentication Testing",
          "description": "Create and run tests for authentication functionality",
          "status": "completed",
          "details": "Created comprehensive test suite with 20 test cases covering all functionality. Implemented model tests for User creation, properties, and approval workflow. Created form tests for registration and login validation. Implemented view tests for all authentication flows including approval checking."
        },
        {
          "id": 2.8,
          "title": "End-to-End Authentication Flow Testing",
          "description": "Test the complete authentication flow from registration to login",
          "status": "completed",
          "details": "Verified the entire user journey including registration, admin approval, login, profile management, and logout. All tests passing successfully."
        },
        {
          "id": 2.9,
          "title": "Security Implementation",
          "description": "Implement security features for the authentication system",
          "status": "completed",
          "details": "Implemented password validation and secure storage, CSRF protection on all forms, session management and security, user approval workflow preventing unauthorized access, and proper authentication checks on protected views."
        }
      ]
    },
    {
      "id": 3,
      "title": "Administrative Hierarchy and Regional Setup",
      "description": "Implement the administrative hierarchy database models to support the geographic coverage requirements (Region > Province > Municipality > Barangay) with focus on Regions IX, XII, and other regions.",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "âœ… COMPLETED: The administrative hierarchy system has been fully implemented with the following components:\n\n1. Core Models:\n- Region model with code, name, description, and province counting capabilities\n- Province model with region relationship, capital city, and municipality counting\n- Municipality model with province relationship, type classification (municipality/city/component city/independent city), and barangay counting  \n- Barangay model with municipality relationship, urban classification, and convenience properties for region/province access\n\n2. Model Features:\n- Complete hierarchical relationships with proper foreign keys and related names\n- Cascade deletion to maintain data integrity\n- Full administrative path properties (e.g., \"Region IX > Zamboanga del Sur > Zamboanga > Barangay Campo Islam\")\n- Counting properties for child elements at each level\n- Proper ordering and string representations\n- Active/inactive status flags for all levels\n- Timestamp tracking (created_at, updated_at)\n\n3. Admin Interface:\n- Comprehensive admin interfaces for all models with proper filtering, searching, and ordering\n- Statistics display showing child element counts\n- Hierarchical navigation with administrative path display\n- Bulk operations and proper fieldset organization\n\n4. Data Population:\n- Management command `populate_administrative_hierarchy` to seed database with initial data\n- Populated with Region IX (Zamboanga Peninsula) and XII (SOCCSKSARGEN) data\n- Added additional regions X (Northern Mindanao) and XI (Davao Region) for OBC coverage\n- Sample provinces, municipalities, and barangays for key areas\n\n5. API Implementation:\n- Complete REST API using Django REST Framework viewsets\n- Separate list and detail serializers for optimized responses\n- Hierarchical endpoints with nested resource access (e.g., /regions/{id}/provinces/)\n- Proper filtering, searching, and ordering capabilities\n- Select_related optimization for database queries\n\nFocus Areas Covered:\n- Region IX (Zamboanga Peninsula): Zamboanga del Norte, Zamboanga del Sur, Zamboanga Sibugay\n- Region XII (SOCCSKSARGEN): South Cotabato, Cotabato, Sultan Kudarat, Sarangani\n- Key municipalities like Zamboanga City, General Santos City, Dipolog City, Pagadian City\n- Sample barangays in urban and rural classifications",
      "testStrategy": "âœ… COMPLETED: Comprehensive testing has been implemented:\n\n1. Unit tests for model relationships and constraints - PASSED\n2. Tests for data import functionality with sample data - PASSED\n3. Verification of API endpoints returning correct hierarchical data - PASSED\n4. Testing of filtering and querying capabilities - PASSED\n5. Validation of admin interface functionality for managing data - PASSED\n\nAll 11 administrative hierarchy tests are passing, covering:\n- Model relationships and properties\n- Cascade deletion and data integrity\n- Constraints and unique validations\n- Model ordering and string representations\n- Administrative path generation",
      "subtasks": [
        {
          "id": 3.1,
          "title": "Core Models Implementation",
          "description": "Created models for Region, Province, Municipality, and Barangay with proper relationships and properties",
          "status": "completed"
        },
        {
          "id": 3.2,
          "title": "Administrative Data Population",
          "description": "Populated database with data for Regions IX, X, XI, XII and their administrative subdivisions",
          "status": "completed"
        },
        {
          "id": 3.3,
          "title": "Admin Interface Development",
          "description": "Implemented comprehensive admin interfaces with filtering, searching, and hierarchical navigation",
          "status": "completed"
        },
        {
          "id": 3.4,
          "title": "API Implementation",
          "description": "Created REST API endpoints with proper serializers, viewsets, and query optimization",
          "status": "completed"
        },
        {
          "id": 3.5,
          "title": "Testing and Validation",
          "description": "Developed and executed comprehensive test suite covering all model functionality",
          "status": "completed"
        }
      ]
    },
    {
      "id": 4,
      "title": "OBC Community Profile Models and Management",
      "description": "Develop the core data models and management interfaces for Other Bangsamoro Community profiles, including demographic data, cultural information, and community status tracking.",
      "status": "done",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "âœ… CORE MODELS IMPLEMENTED:\n- OBCCommunity: Complete community profile model with demographics, cultural info, development status\n- CommunityLivelihood: Tracks economic activities, income sources, challenges and opportunities  \n- CommunityInfrastructure: Monitors infrastructure availability, condition, and improvement priorities\n\nâœ… MODEL FEATURES:\n- Comprehensive demographic tracking (age groups, households, population)\n- Cultural and religious information (languages, practices, mosque/madrasah status)\n- Historical data (establishment year, origin story, migration history)\n- Development status tracking with priority needs assessment\n- Geographic integration with administrative hierarchy\n- Livelihood categorization with income levels and seasonal patterns\n- Infrastructure assessment with coverage percentages and priority ranking\n\nâœ… ADMIN INTERFACE:\n- Rich admin interfaces with color-coded status indicators\n- Inline editing for livelihoods and infrastructure\n- Comprehensive filtering and searching capabilities\n- Bulk actions for status updates and priority management\n- Statistical displays and administrative path navigation\n\nâœ… SAMPLE DATA:\n- Populated 3 realistic sample communities representing different regions and cultures:\n  * Campo Islam Tausug Community (Region IX) - Fishing-based with strong Islamic identity\n  * Maguindanao Settlers Community (Region XII) - Agricultural community in urban setting\n  * Tboli-Muslim Community (Region XII) - Indigenous-Muslim mixed community\n- Each with detailed livelihoods, infrastructure assessments, and cultural profiles\n\nâœ… API IMPLEMENTATION:\n- Complete REST API with detailed and list serializers\n- Advanced filtering, searching, and ordering capabilities\n- Statistics endpoint providing comprehensive community analytics\n- Specialized endpoints for vulnerable communities, regional grouping, and critical infrastructure needs\n- Proper foreign key optimization with select_related and prefetch_related\n\nModel implementation example:\n```python\nfrom django.db import models\n\nclass OBCCommunity(models.Model):\n    name = models.CharField(max_length=255)\n    barangay = models.ForeignKey('Barangay', on_delete=models.CASCADE, related_name='obc_communities')\n    population = models.PositiveIntegerField(null=True, blank=True)\n    households = models.PositiveIntegerField(null=True, blank=True)\n    cultural_background = models.TextField(blank=True)\n    languages = models.CharField(max_length=255, blank=True)\n    religious_facilities = models.TextField(blank=True)\n    established_year = models.PositiveIntegerField(null=True, blank=True)\n    status = models.CharField(max_length=50, choices=[\n        ('developing', 'Developing'),\n        ('established', 'Established'),\n        ('vulnerable', 'Vulnerable'),\n        ('thriving', 'Thriving')\n    ], default='developing')\n    last_updated = models.DateTimeField(auto_now=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\nclass CommunityLivelihood(models.Model):\n    community = models.ForeignKey(OBCCommunity, on_delete=models.CASCADE, related_name='livelihoods')\n    livelihood_type = models.CharField(max_length=100)\n    description = models.TextField()\n    percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    is_primary = models.BooleanField(default=False)\n    \nclass CommunityInfrastructure(models.Model):\n    community = models.ForeignKey(OBCCommunity, on_delete=models.CASCADE, related_name='infrastructure')\n    infrastructure_type = models.CharField(max_length=100)\n    condition = models.CharField(max_length=50, choices=[\n        ('good', 'Good'),\n        ('fair', 'Fair'),\n        ('poor', 'Poor'),\n        ('nonexistent', 'Non-existent')\n    ])\n    coverage_percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)\n    priority_level = models.PositiveSmallIntegerField(default=3)\n    notes = models.TextField(blank=True)\n```",
      "testStrategy": "1. Unit tests for OBC Community model creation and validation\n2. Test relationships between communities and administrative divisions\n3. Verify demographic data calculations and aggregations\n4. Test API endpoints for community data including:\n   - Filtering and searching capabilities\n   - Statistics endpoint functionality\n   - Specialized endpoints for vulnerable communities\n5. Validate admin interface functionality including:\n   - Color-coded status indicators\n   - Inline editing for related models\n   - Bulk actions and filtering\n6. Test data import/export capabilities\n7. Verify sample data integrity across the three implemented communities\n8. Test infrastructure assessment calculations and priority ranking\n9. Validate livelihood categorization and economic activity tracking",
      "subtasks": [
        {
          "id": 4.1,
          "title": "Core OBC Community Models Implementation",
          "description": "Implement the OBCCommunity, CommunityLivelihood, and CommunityInfrastructure models with all required fields and relationships",
          "status": "completed"
        },
        {
          "id": 4.2,
          "title": "Admin Interface Development",
          "description": "Create rich admin interfaces with inline editing, filtering, and statistical displays",
          "status": "completed"
        },
        {
          "id": 4.3,
          "title": "API Implementation",
          "description": "Develop REST API endpoints with filtering, searching, and specialized community analytics",
          "status": "completed"
        },
        {
          "id": 4.4,
          "title": "Sample Data Creation",
          "description": "Populate system with realistic sample communities representing different regions and cultures",
          "status": "completed"
        }
      ]
    },
    {
      "id": 5,
      "title": "Stakeholder Management System",
      "description": "Implement the stakeholder management system to track community leaders, Ulama, Imams, ALIVE/Arabic teachers, and other key stakeholders in OBC communities.",
      "details": "1. Create stakeholder models for different types (leaders, religious figures, teachers)\n2. Implement stakeholder-community relationships\n3. Build contact information management\n4. Create stakeholder role and responsibility tracking\n5. Implement stakeholder history and engagement tracking\n6. Build admin interfaces for stakeholder management\n7. Create API endpoints for stakeholder data\n\nModel example:\n```python\nfrom django.db import models\n\nclass Stakeholder(models.Model):\n    STAKEHOLDER_TYPES = [\n        ('community_leader', 'Community Leader'),\n        ('ulama', 'Ulama'),\n        ('imam', 'Imam'),\n        ('arabic_teacher', 'ALIVE/Arabic Teacher'),\n        ('youth_leader', 'Youth Leader'),\n        ('women_leader', 'Women Leader'),\n        ('other', 'Other')\n    ]\n    \n    full_name = models.CharField(max_length=255)\n    stakeholder_type = models.CharField(max_length=50, choices=STAKEHOLDER_TYPES)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='stakeholders')\n    position = models.CharField(max_length=255, blank=True)\n    contact_number = models.CharField(max_length=20, blank=True)\n    email = models.EmailField(blank=True)\n    address = models.TextField(blank=True)\n    influence_level = models.CharField(max_length=20, choices=[\n        ('high', 'High'),\n        ('medium', 'Medium'),\n        ('low', 'Low')\n    ], default='medium')\n    notes = models.TextField(blank=True)\n    is_active = models.BooleanField(default=True)\n    since_year = models.PositiveIntegerField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for stakeholder model creation and validation\n2. Test stakeholder-community relationship functionality\n3. Verify stakeholder filtering and search capabilities\n4. Test API endpoints for stakeholder data\n5. Validate admin interface functionality\n6. Test stakeholder history tracking",
      "priority": "medium",
      "dependencies": [
        4
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Document Management System",
      "description": "Implement a document management system for storing and organizing community documents, assessment reports, correspondence, and other files related to OBC communities.",
      "details": "1. Create document model with file storage capabilities\n2. Implement document categorization and tagging\n3. Build document versioning system\n4. Implement document search functionality\n5. Create document access control based on user roles\n6. Build admin interfaces for document management\n7. Implement file upload/download functionality\n8. Create API endpoints for document management\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass DocumentCategory(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n\nclass Document(models.Model):\n    DOCUMENT_TYPES = [\n        ('report', 'Assessment Report'),\n        ('correspondence', 'Correspondence'),\n        ('profile', 'Community Profile'),\n        ('policy', 'Policy Document'),\n        ('moa', 'Memorandum of Agreement'),\n        ('minutes', 'Meeting Minutes'),\n        ('other', 'Other')\n    ]\n    \n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    file = models.FileField(upload_to='documents/%Y/%m/')\n    document_type = models.CharField(max_length=20, choices=DOCUMENT_TYPES)\n    category = models.ForeignKey(DocumentCategory, on_delete=models.SET_NULL, null=True, blank=True)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='documents', null=True, blank=True)\n    tags = models.CharField(max_length=255, blank=True, help_text='Comma-separated tags')\n    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    version = models.CharField(max_length=20, default='1.0')\n    is_confidential = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for document upload and storage\n2. Test document categorization and tagging functionality\n3. Verify document search capabilities\n4. Test access control based on user roles\n5. Validate file upload/download functionality\n6. Test API endpoints for document management\n7. Verify document versioning system",
      "priority": "medium",
      "dependencies": [
        4
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "MANA (Mapping and Needs Assessment) Core Module",
      "description": "Develop the core MANA module for creating, conducting, and managing mapping and needs assessment activities for OBC communities.",
      "details": "1. Create MANA assessment models with comprehensive fields\n2. Implement assessment methodology tracking\n3. Build assessment scheduling and planning functionality\n4. Create assessment team management\n5. Implement assessment status tracking\n6. Build admin interfaces for MANA management\n7. Create API endpoints for MANA data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass MANAAssessment(models.Model):\n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('analyzed', 'Analyzed'),\n        ('reported', 'Reported')\n    ]\n    \n    METHODOLOGY_CHOICES = [\n        ('survey', 'Survey'),\n        ('interview', 'Interviews'),\n        ('focus_group', 'Focus Group Discussion'),\n        ('observation', 'Direct Observation'),\n        ('mixed', 'Mixed Methods'),\n        ('other', 'Other')\n    ]\n    \n    title = models.CharField(max_length=255)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='assessments')\n    description = models.TextField()\n    methodology = models.CharField(max_length=20, choices=METHODOLOGY_CHOICES)\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    lead_assessor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='led_assessments')\n    team_members = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='assessment_teams', blank=True)\n    objectives = models.TextField()\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for MANA assessment creation and validation\n2. Test assessment scheduling and planning functionality\n3. Verify assessment team management\n4. Test assessment status tracking\n5. Validate admin interface functionality\n6. Test API endpoints for MANA data",
      "priority": "high",
      "dependencies": [
        4,
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Needs Assessment Categories and Prioritization",
      "description": "Implement the needs assessment categorization system covering Education, Economic Development, Social Development, Cultural Development, and Infrastructure with priority ranking capabilities.",
      "details": "1. Create needs category models with subcategories\n2. Implement priority ranking system (Low, Medium, High, Critical)\n3. Build needs-assessment relationships\n4. Create needs tracking and status updates\n5. Implement needs aggregation and reporting\n6. Build admin interfaces for needs management\n7. Create API endpoints for needs data\n\nModel example:\n```python\nfrom django.db import models\n\nclass NeedCategory(models.Model):\n    CATEGORY_CHOICES = [\n        ('education', 'Education'),\n        ('economic', 'Economic Development'),\n        ('social', 'Social Development'),\n        ('cultural', 'Cultural Development'),\n        ('infrastructure', 'Infrastructure')\n    ]\n    \n    name = models.CharField(max_length=50, choices=CATEGORY_CHOICES)\n    description = models.TextField()\n    \nclass NeedSubcategory(models.Model):\n    category = models.ForeignKey(NeedCategory, on_delete=models.CASCADE, related_name='subcategories')\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n\nclass AssessedNeed(models.Model):\n    PRIORITY_CHOICES = [\n        ('low', 'Low'),\n        ('medium', 'Medium'),\n        ('high', 'High'),\n        ('critical', 'Critical')\n    ]\n    \n    STATUS_CHOICES = [\n        ('identified', 'Identified'),\n        ('validated', 'Validated'),\n        ('addressed', 'Being Addressed'),\n        ('resolved', 'Resolved'),\n        ('ongoing', 'Ongoing Need')\n    ]\n    \n    assessment = models.ForeignKey('MANAAssessment', on_delete=models.CASCADE, related_name='identified_needs')\n    category = models.ForeignKey(NeedCategory, on_delete=models.CASCADE)\n    subcategory = models.ForeignKey(NeedSubcategory, on_delete=models.SET_NULL, null=True, blank=True)\n    description = models.TextField()\n    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='medium')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='identified')\n    affected_population = models.PositiveIntegerField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for needs category and subcategory creation\n2. Test priority ranking system functionality\n3. Verify needs-assessment relationships\n4. Test needs tracking and status updates\n5. Validate needs aggregation and reporting\n6. Test API endpoints for needs data",
      "priority": "high",
      "dependencies": [
        7
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Stakeholder Engagement and Consultation Tracking",
      "description": "Implement the stakeholder engagement and consultation tracking system to manage feedback, consultations, and engagement activities with community stakeholders.",
      "details": "1. Create consultation and engagement models\n2. Implement feedback collection and management\n3. Build consultation scheduling and planning\n4. Create stakeholder participation tracking\n5. Implement consultation outcomes and follow-up actions\n6. Build admin interfaces for consultation management\n7. Create API endpoints for consultation data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Consultation(models.Model):\n    CONSULTATION_TYPES = [\n        ('meeting', 'Meeting'),\n        ('forum', 'Public Forum'),\n        ('workshop', 'Workshop'),\n        ('interview', 'Interview'),\n        ('focus_group', 'Focus Group Discussion'),\n        ('other', 'Other')\n    ]\n    \n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n        ('postponed', 'Postponed')\n    ]\n    \n    title = models.CharField(max_length=255)\n    consultation_type = models.CharField(max_length=20, choices=CONSULTATION_TYPES)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='consultations')\n    assessment = models.ForeignKey('MANAAssessment', on_delete=models.SET_NULL, null=True, blank=True, related_name='consultations')\n    date = models.DateField()\n    time = models.TimeField(null=True, blank=True)\n    location = models.CharField(max_length=255)\n    description = models.TextField()\n    facilitator = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='facilitated_consultations')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    participants_count = models.PositiveIntegerField(null=True, blank=True)\n    summary = models.TextField(blank=True)\n    outcomes = models.TextField(blank=True)\n    next_steps = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass ConsultationParticipant(models.Model):\n    consultation = models.ForeignKey(Consultation, on_delete=models.CASCADE, related_name='participants')\n    stakeholder = models.ForeignKey('Stakeholder', on_delete=models.CASCADE, null=True, blank=True)\n    name = models.CharField(max_length=255, blank=True)  # For non-stakeholder participants\n    role = models.CharField(max_length=100, blank=True)\n    feedback = models.TextField(blank=True)\n    attended = models.BooleanField(default=True)\n```",
      "testStrategy": "1. Unit tests for consultation creation and management\n2. Test feedback collection and management\n3. Verify consultation scheduling and planning\n4. Test stakeholder participation tracking\n5. Validate consultation outcomes and follow-up actions\n6. Test API endpoints for consultation data",
      "priority": "medium",
      "dependencies": [
        5,
        7
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Geographic Mapping and Visualization",
      "description": "Implement geographic mapping and visualization capabilities for OBC communities, needs assessments, and other spatial data.",
      "details": "1. Integrate with mapping libraries (Leaflet.js or similar)\n2. Implement geographic data models (coordinates, boundaries)\n3. Create map visualization components\n4. Build community location mapping\n5. Implement needs assessment geographic visualization\n6. Create geographic data export capabilities\n7. Build admin interfaces for geographic data management\n\nModel and implementation example:\n```python\nfrom django.db import models\nfrom django.contrib.gis.db import models as gis_models  # Optional if using GeoDjango\n\n# If using regular Django without GeoDjango\nclass GeographicLocation(models.Model):\n    community = models.OneToOneField('OBCCommunity', on_delete=models.CASCADE, related_name='location')\n    latitude = models.DecimalField(max_digits=9, decimal_places=6)\n    longitude = models.DecimalField(max_digits=9, decimal_places=6)\n    elevation = models.DecimalField(max_digits=9, decimal_places=2, null=True, blank=True)\n    area_size = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, help_text='Size in square kilometers')\n    boundary_description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n# JavaScript for map integration (in template)\n'''\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n        // Initialize map\n        var map = L.map('map').setView([8.0, 125.0], 7);\n        \n        // Add OpenStreetMap tile layer\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; OpenStreetMap contributors'\n        }).addTo(map);\n        \n        // Add community markers from data\n        var communities = {{ communities_json|safe }};\n        communities.forEach(function(community) {\n            L.marker([community.latitude, community.longitude])\n                .addTo(map)\n                .bindPopup(community.name);\n        });\n    });\n</script>\n'''\n```",
      "testStrategy": "1. Unit tests for geographic data models\n2. Test map visualization components\n3. Verify community location mapping\n4. Test needs assessment geographic visualization\n5. Validate geographic data export capabilities\n6. Test map rendering and interaction in different browsers\n7. Verify marker placement and information display",
      "priority": "medium",
      "dependencies": [
        3,
        4,
        7
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Baseline Study Management",
      "description": "Implement the baseline study management system for creating, conducting, and analyzing socio-economic baseline studies for OBC communities.",
      "details": "1. Create baseline study models with comprehensive fields\n2. Implement study methodology tracking\n3. Build indicator management for baseline studies\n4. Create data collection and entry interfaces\n5. Implement data analysis and visualization tools\n6. Build admin interfaces for baseline study management\n7. Create API endpoints for baseline study data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass BaselineStudy(models.Model):\n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('in_progress', 'In Progress'),\n        ('data_collection', 'Data Collection'),\n        ('analysis', 'Analysis'),\n        ('completed', 'Completed'),\n        ('published', 'Published')\n    ]\n    \n    title = models.CharField(max_length=255)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.CASCADE, related_name='baseline_studies')\n    description = models.TextField()\n    methodology = models.TextField()\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    lead_researcher = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='led_studies')\n    team_members = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='study_teams', blank=True)\n    objectives = models.TextField()\n    sample_size = models.PositiveIntegerField(null=True, blank=True)\n    sampling_method = models.CharField(max_length=100, blank=True)\n    key_findings = models.TextField(blank=True)\n    recommendations = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass BaselineIndicator(models.Model):\n    INDICATOR_TYPES = [\n        ('economic', 'Economic'),\n        ('social', 'Social'),\n        ('educational', 'Educational'),\n        ('health', 'Health'),\n        ('infrastructure', 'Infrastructure'),\n        ('cultural', 'Cultural'),\n        ('other', 'Other')\n    ]\n    \n    DATA_TYPES = [\n        ('numeric', 'Numeric'),\n        ('percentage', 'Percentage'),\n        ('categorical', 'Categorical'),\n        ('text', 'Text'),\n        ('boolean', 'Yes/No')\n    ]\n    \n    study = models.ForeignKey(BaselineStudy, on_delete=models.CASCADE, related_name='indicators')\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    indicator_type = models.CharField(max_length=20, choices=INDICATOR_TYPES)\n    data_type = models.CharField(max_length=20, choices=DATA_TYPES)\n    unit = models.CharField(max_length=50, blank=True)\n    target_value = models.CharField(max_length=100, blank=True)\n    actual_value = models.CharField(max_length=100, blank=True)\n    notes = models.TextField(blank=True)\n```",
      "testStrategy": "1. Unit tests for baseline study creation and management\n2. Test indicator management functionality\n3. Verify data collection and entry interfaces\n4. Test data analysis and visualization tools\n5. Validate admin interfaces for baseline study management\n6. Test API endpoints for baseline study data",
      "priority": "medium",
      "dependencies": [
        7,
        8
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Stakeholder Directory and Communication Hub",
      "description": "Implement the stakeholder directory and communication hub for managing contacts and communications with BMOAs, LGUs, NGAs, and other development partners.",
      "details": "1. Create stakeholder organization models\n2. Implement contact management for organizations\n3. Build communication tracking and history\n4. Create message templates and management\n5. Implement communication scheduling and reminders\n6. Build admin interfaces for stakeholder directory management\n7. Create API endpoints for stakeholder directory data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Organization(models.Model):\n    ORGANIZATION_TYPES = [\n        ('bmoa', 'BARMM Ministry/Agency/Office'),\n        ('lgu', 'Local Government Unit'),\n        ('nga', 'National Government Agency'),\n        ('ngo', 'Non-Governmental Organization'),\n        ('academic', 'Academic Institution'),\n        ('religious', 'Religious Organization'),\n        ('private', 'Private Sector'),\n        ('other', 'Other')\n    ]\n    \n    name = models.CharField(max_length=255)\n    organization_type = models.CharField(max_length=20, choices=ORGANIZATION_TYPES)\n    description = models.TextField(blank=True)\n    address = models.TextField(blank=True)\n    phone = models.CharField(max_length=50, blank=True)\n    email = models.EmailField(blank=True)\n    website = models.URLField(blank=True)\n    focal_person = models.CharField(max_length=255, blank=True)\n    focal_person_position = models.CharField(max_length=100, blank=True)\n    focal_person_contact = models.CharField(max_length=50, blank=True)\n    notes = models.TextField(blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Communication(models.Model):\n    COMMUNICATION_TYPES = [\n        ('email', 'Email'),\n        ('letter', 'Letter'),\n        ('meeting', 'Meeting'),\n        ('phone', 'Phone Call'),\n        ('visit', 'Site Visit'),\n        ('other', 'Other')\n    ]\n    \n    DIRECTION_CHOICES = [\n        ('incoming', 'Incoming'),\n        ('outgoing', 'Outgoing')\n    ]\n    \n    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='communications')\n    communication_type = models.CharField(max_length=20, choices=COMMUNICATION_TYPES)\n    direction = models.CharField(max_length=10, choices=DIRECTION_CHOICES)\n    subject = models.CharField(max_length=255)\n    content = models.TextField()\n    date = models.DateField()\n    time = models.TimeField(null=True, blank=True)\n    sender = models.CharField(max_length=255, blank=True)\n    recipient = models.CharField(max_length=255, blank=True)\n    recorded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    follow_up_required = models.BooleanField(default=False)\n    follow_up_date = models.DateField(null=True, blank=True)\n    follow_up_notes = models.TextField(blank=True)\n    attachment = models.FileField(upload_to='communications/%Y/%m/', blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for organization model creation and management\n2. Test contact management functionality\n3. Verify communication tracking and history\n4. Test message templates and management\n5. Validate communication scheduling and reminders\n6. Test API endpoints for stakeholder directory data",
      "priority": "medium",
      "dependencies": [
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Meeting and Event Management",
      "description": "Implement the meeting and event management system for planning, scheduling, and tracking consultations, coordination meetings, courtesy calls, and other events.",
      "details": "1. Create meeting and event models\n2. Implement event scheduling and calendar integration\n3. Build participant management and invitations\n4. Create agenda and minutes management\n5. Implement follow-up action tracking\n6. Build admin interfaces for meeting and event management\n7. Create API endpoints for meeting and event data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Event(models.Model):\n    EVENT_TYPES = [\n        ('meeting', 'Meeting'),\n        ('consultation', 'Consultation'),\n        ('courtesy_call', 'Courtesy Call'),\n        ('workshop', 'Workshop'),\n        ('forum', 'Forum'),\n        ('training', 'Training'),\n        ('other', 'Other')\n    ]\n    \n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('confirmed', 'Confirmed'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n        ('postponed', 'Postponed')\n    ]\n    \n    title = models.CharField(max_length=255)\n    event_type = models.CharField(max_length=20, choices=EVENT_TYPES)\n    description = models.TextField()\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n    start_time = models.TimeField(null=True, blank=True)\n    end_time = models.TimeField(null=True, blank=True)\n    location = models.CharField(max_length=255)\n    virtual_link = models.URLField(blank=True)\n    organizer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='organized_events')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    agenda = models.TextField(blank=True)\n    minutes = models.TextField(blank=True)\n    outcomes = models.TextField(blank=True)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.SET_NULL, null=True, blank=True, related_name='events')\n    organizations = models.ManyToManyField('Organization', related_name='events', blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass EventParticipant(models.Model):\n    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='participants')\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)\n    stakeholder = models.ForeignKey('Stakeholder', on_delete=models.SET_NULL, null=True, blank=True)\n    organization = models.ForeignKey('Organization', on_delete=models.SET_NULL, null=True, blank=True)\n    name = models.CharField(max_length=255, blank=True)  # For external participants\n    position = models.CharField(max_length=100, blank=True)\n    email = models.EmailField(blank=True)\n    phone = models.CharField(max_length=50, blank=True)\n    invitation_sent = models.BooleanField(default=False)\n    invitation_sent_date = models.DateTimeField(null=True, blank=True)\n    confirmed = models.BooleanField(default=False)\n    attended = models.BooleanField(default=False)\n    notes = models.TextField(blank=True)\n\nclass ActionItem(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled')\n    ]\n    \n    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='action_items')\n    description = models.TextField()\n    assigned_to = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)\n    assigned_organization = models.ForeignKey('Organization', on_delete=models.SET_NULL, null=True, blank=True)\n    due_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    completion_date = models.DateField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for event creation and management\n2. Test event scheduling and calendar integration\n3. Verify participant management and invitations\n4. Test agenda and minutes management\n5. Validate follow-up action tracking\n6. Test API endpoints for meeting and event data",
      "priority": "medium",
      "dependencies": [
        9,
        12
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "MOA and Partnership Tracking",
      "description": "Implement the MOA (Memoranda of Agreement) and partnership tracking system for managing agreements and partnerships with various stakeholders.",
      "details": "1. Create MOA and partnership models\n2. Implement agreement status tracking\n3. Build deliverable and milestone management\n4. Create signatory and approval tracking\n5. Implement document attachment and versioning\n6. Build admin interfaces for MOA and partnership management\n7. Create API endpoints for MOA and partnership data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Partnership(models.Model):\n    PARTNERSHIP_TYPES = [\n        ('moa', 'Memorandum of Agreement'),\n        ('mou', 'Memorandum of Understanding'),\n        ('contract', 'Contract'),\n        ('informal', 'Informal Partnership'),\n        ('other', 'Other')\n    ]\n    \n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('review', 'Under Review'),\n        ('pending_signature', 'Pending Signature'),\n        ('active', 'Active'),\n        ('completed', 'Completed'),\n        ('terminated', 'Terminated'),\n        ('expired', 'Expired')\n    ]\n    \n    title = models.CharField(max_length=255)\n    partnership_type = models.CharField(max_length=20, choices=PARTNERSHIP_TYPES)\n    description = models.TextField()\n    organizations = models.ManyToManyField('Organization', related_name='partnerships')\n    communities = models.ManyToManyField('OBCCommunity', related_name='partnerships', blank=True)\n    start_date = models.DateField(null=True, blank=True)\n    end_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')\n    objectives = models.TextField()\n    scope = models.TextField()\n    focal_person = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='managed_partnerships')\n    document = models.FileField(upload_to='partnerships/%Y/%m/', null=True, blank=True)\n    document_number = models.CharField(max_length=100, blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass PartnershipMilestone(models.Model):\n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('delayed', 'Delayed'),\n        ('cancelled', 'Cancelled')\n    ]\n    \n    partnership = models.ForeignKey(Partnership, on_delete=models.CASCADE, related_name='milestones')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    due_date = models.DateField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    completion_date = models.DateField(null=True, blank=True)\n    responsible_party = models.CharField(max_length=255, blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass PartnershipSignatory(models.Model):\n    partnership = models.ForeignKey(Partnership, on_delete=models.CASCADE, related_name='signatories')\n    name = models.CharField(max_length=255)\n    position = models.CharField(max_length=100)\n    organization = models.ForeignKey('Organization', on_delete=models.CASCADE)\n    signed = models.BooleanField(default=False)\n    signature_date = models.DateField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n```",
      "testStrategy": "1. Unit tests for partnership model creation and management\n2. Test agreement status tracking\n3. Verify deliverable and milestone management\n4. Test signatory and approval tracking\n5. Validate document attachment and versioning\n6. Test API endpoints for MOA and partnership data",
      "priority": "medium",
      "dependencies": [
        12
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Policy Recommendation Tracking System",
      "description": "Implement the policy recommendation tracking system for managing policy proposals, supporting evidence, approval workflows, and impact assessment.",
      "details": "1. Create policy recommendation models\n2. Implement evidence documentation and management\n3. Build approval workflow and status tracking\n4. Create impact assessment and outcome tracking\n5. Implement knowledge management for best practices\n6. Build admin interfaces for policy recommendation management\n7. Create API endpoints for policy recommendation data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass PolicyRecommendation(models.Model):\n    STATUS_CHOICES = [\n        ('draft', 'Draft'),\n        ('review', 'Under Review'),\n        ('submitted', 'Submitted to Chief Minister'),\n        ('approved', 'Approved'),\n        ('implemented', 'Implemented'),\n        ('rejected', 'Rejected'),\n        ('revised', 'Being Revised')\n    ]\n    \n    PRIORITY_CHOICES = [\n        ('low', 'Low'),\n        ('medium', 'Medium'),\n        ('high', 'High'),\n        ('urgent', 'Urgent')\n    ]\n    \n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    rationale = models.TextField()\n    target_communities = models.ManyToManyField('OBCCommunity', related_name='policy_recommendations', blank=True)\n    related_assessments = models.ManyToManyField('MANAAssessment', related_name='policy_recommendations', blank=True)\n    related_needs = models.ManyToManyField('AssessedNeed', related_name='policy_recommendations', blank=True)\n    proposed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='proposed_policies')\n    submission_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')\n    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='medium')\n    approval_date = models.DateField(null=True, blank=True)\n    implementation_date = models.DateField(null=True, blank=True)\n    expected_outcomes = models.TextField()\n    budget_implications = models.TextField(blank=True)\n    legal_implications = models.TextField(blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass PolicyEvidence(models.Model):\n    EVIDENCE_TYPES = [\n        ('data', 'Statistical Data'),\n        ('research', 'Research Study'),\n        ('assessment', 'Needs Assessment'),\n        ('consultation', 'Stakeholder Consultation'),\n        ('case_study', 'Case Study'),\n        ('best_practice', 'Best Practice'),\n        ('other', 'Other')\n    ]\n    \n    policy = models.ForeignKey(PolicyRecommendation, on_delete=models.CASCADE, related_name='evidence')\n    title = models.CharField(max_length=255)\n    evidence_type = models.CharField(max_length=20, choices=EVIDENCE_TYPES)\n    description = models.TextField()\n    source = models.CharField(max_length=255, blank=True)\n    date = models.DateField(null=True, blank=True)\n    document = models.FileField(upload_to='policy_evidence/%Y/%m/', null=True, blank=True)\n    url = models.URLField(blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\nclass PolicyImpact(models.Model):\n    IMPACT_TYPES = [\n        ('economic', 'Economic'),\n        ('social', 'Social'),\n        ('educational', 'Educational'),\n        ('cultural', 'Cultural'),\n        ('infrastructure', 'Infrastructure'),\n        ('other', 'Other')\n    ]\n    \n    policy = models.ForeignKey(PolicyRecommendation, on_delete=models.CASCADE, related_name='impacts')\n    impact_type = models.CharField(max_length=20, choices=IMPACT_TYPES)\n    description = models.TextField()\n    measurement_method = models.TextField()\n    baseline_value = models.CharField(max_length=100, blank=True)\n    target_value = models.CharField(max_length=100, blank=True)\n    actual_value = models.CharField(max_length=100, blank=True)\n    assessment_date = models.DateField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n```",
      "testStrategy": "1. Unit tests for policy recommendation model creation and management\n2. Test evidence documentation and management\n3. Verify approval workflow and status tracking\n4. Test impact assessment and outcome tracking\n5. Validate knowledge management for best practices\n6. Test API endpoints for policy recommendation data",
      "priority": "high",
      "dependencies": [
        7,
        8
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 16,
      "title": "Monitoring and Evaluation Framework",
      "description": "Implement the monitoring and evaluation framework for tracking program implementation, measuring outcomes, and managing performance indicators.",
      "details": "1. Create M&E framework models\n2. Implement indicator management and tracking\n3. Build program implementation monitoring\n4. Create outcome measurement and reporting\n5. Implement regular M&E activity scheduling\n6. Build admin interfaces for M&E management\n7. Create API endpoints for M&E data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Program(models.Model):\n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('implementing', 'Implementing'),\n        ('completed', 'Completed'),\n        ('suspended', 'Suspended'),\n        ('cancelled', 'Cancelled')\n    ]\n    \n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    objectives = models.TextField()\n    target_communities = models.ManyToManyField('OBCCommunity', related_name='programs')\n    related_policy = models.ForeignKey('PolicyRecommendation', on_delete=models.SET_NULL, null=True, blank=True, related_name='programs')\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    program_manager = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='managed_programs')\n    budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)\n    funding_source = models.CharField(max_length=255, blank=True)\n    partners = models.ManyToManyField('Organization', related_name='programs', blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Indicator(models.Model):\n    INDICATOR_TYPES = [\n        ('input', 'Input'),\n        ('output', 'Output'),\n        ('outcome', 'Outcome'),\n        ('impact', 'Impact'),\n        ('process', 'Process')\n    ]\n    \n    DATA_TYPES = [\n        ('numeric', 'Numeric'),\n        ('percentage', 'Percentage'),\n        ('categorical', 'Categorical'),\n        ('text', 'Text'),\n        ('boolean', 'Yes/No')\n    ]\n    \n    program = models.ForeignKey(Program, on_delete=models.CASCADE, related_name='indicators')\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    indicator_type = models.CharField(max_length=20, choices=INDICATOR_TYPES)\n    data_type = models.CharField(max_length=20, choices=DATA_TYPES)\n    unit = models.CharField(max_length=50, blank=True)\n    baseline_value = models.CharField(max_length=100, blank=True)\n    target_value = models.CharField(max_length=100, blank=True)\n    data_source = models.CharField(max_length=255, blank=True)\n    data_collection_method = models.TextField(blank=True)\n    frequency = models.CharField(max_length=100, blank=True)\n    responsible_person = models.CharField(max_length=255, blank=True)\n    notes = models.TextField(blank=True)\n\nclass IndicatorMeasurement(models.Model):\n    indicator = models.ForeignKey(Indicator, on_delete=models.CASCADE, related_name='measurements')\n    date = models.DateField()\n    value = models.CharField(max_length=100)\n    notes = models.TextField(blank=True)\n    recorded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\nclass MEActivity(models.Model):\n    ACTIVITY_TYPES = [\n        ('monitoring_visit', 'Monitoring Visit'),\n        ('evaluation', 'Evaluation'),\n        ('data_collection', 'Data Collection'),\n        ('review_meeting', 'Review Meeting'),\n        ('report', 'Reporting'),\n        ('other', 'Other')\n    ]\n    \n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n        ('postponed', 'Postponed')\n    ]\n    \n    program = models.ForeignKey(Program, on_delete=models.CASCADE, related_name='me_activities')\n    title = models.CharField(max_length=255)\n    activity_type = models.CharField(max_length=20, choices=ACTIVITY_TYPES)\n    description = models.TextField()\n    date = models.DateField()\n    location = models.CharField(max_length=255, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    conducted_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='conducted_me_activities')\n    participants = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='participated_me_activities', blank=True)\n    findings = models.TextField(blank=True)\n    recommendations = models.TextField(blank=True)\n    report = models.FileField(upload_to='me_reports/%Y/%m/', null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for M&E framework model creation and management\n2. Test indicator management and tracking\n3. Verify program implementation monitoring\n4. Test outcome measurement and reporting\n5. Validate regular M&E activity scheduling\n6. Test API endpoints for M&E data",
      "priority": "medium",
      "dependencies": [
        8,
        15
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 17,
      "title": "Strategic Communication Module",
      "description": "Implement the strategic communication module for managing information drives, public outreach, IEC material distribution, and stakeholder engagement analytics.",
      "details": "1. Create communication campaign models\n2. Implement IEC material management\n3. Build distribution tracking and analytics\n4. Create social media integration\n5. Implement stakeholder engagement tracking\n6. Build admin interfaces for strategic communication management\n7. Create API endpoints for strategic communication data\n\nModel example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass CommunicationCampaign(models.Model):\n    STATUS_CHOICES = [\n        ('planned', 'Planned'),\n        ('active', 'Active'),\n        ('completed', 'Completed'),\n        ('cancelled', 'Cancelled'),\n        ('on_hold', 'On Hold')\n    ]\n    \n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    objectives = models.TextField()\n    target_audience = models.TextField()\n    start_date = models.DateField()\n    end_date = models.DateField(null=True, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')\n    campaign_manager = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='managed_campaigns')\n    key_messages = models.TextField()\n    budget = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)\n    communities = models.ManyToManyField('OBCCommunity', related_name='communication_campaigns', blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass IECMaterial(models.Model):\n    MATERIAL_TYPES = [\n        ('brochure', 'Brochure'),\n        ('flyer', 'Flyer'),\n        ('poster', 'Poster'),\n        ('video', 'Video'),\n        ('audio', 'Audio'),\n        ('social_media', 'Social Media Content'),\n        ('presentation', 'Presentation'),\n        ('other', 'Other')\n    ]\n    \n    campaign = models.ForeignKey(CommunicationCampaign, on_delete=models.CASCADE, related_name='materials', null=True, blank=True)\n    title = models.CharField(max_length=255)\n    material_type = models.CharField(max_length=20, choices=MATERIAL_TYPES)\n    description = models.TextField()\n    content = models.TextField(blank=True)\n    file = models.FileField(upload_to='iec_materials/%Y/%m/', null=True, blank=True)\n    url = models.URLField(blank=True)\n    language = models.CharField(max_length=50, blank=True)\n    target_audience = models.TextField(blank=True)\n    production_date = models.DateField(null=True, blank=True)\n    quantity_produced = models.PositiveIntegerField(null=True, blank=True)\n    quantity_distributed = models.PositiveIntegerField(null=True, blank=True)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass MaterialDistribution(models.Model):\n    material = models.ForeignKey(IECMaterial, on_delete=models.CASCADE, related_name='distributions')\n    distribution_date = models.DateField()\n    location = models.CharField(max_length=255)\n    community = models.ForeignKey('OBCCommunity', on_delete=models.SET_NULL, null=True, blank=True)\n    organization = models.ForeignKey('Organization', on_delete=models.SET_NULL, null=True, blank=True)\n    quantity = models.PositiveIntegerField()\n    distributed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    recipients_count = models.PositiveIntegerField(null=True, blank=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\nclass SocialMediaPost(models.Model):\n    PLATFORM_CHOICES = [\n        ('facebook', 'Facebook'),\n        ('twitter', 'Twitter'),\n        ('instagram', 'Instagram'),\n        ('youtube', 'YouTube'),\n        ('other', 'Other')\n    ]\n    \n    campaign = models.ForeignKey(CommunicationCampaign, on_delete=models.CASCADE, related_name='social_media_posts', null=True, blank=True)\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    platform = models.CharField(max_length=20, choices=PLATFORM_CHOICES)\n    post_date = models.DateTimeField()\n    url = models.URLField(blank=True)\n    engagement_reach = models.PositiveIntegerField(null=True, blank=True)\n    engagement_likes = models.PositiveIntegerField(null=True, blank=True)\n    engagement_shares = models.PositiveIntegerField(null=True, blank=True)\n    engagement_comments = models.PositiveIntegerField(null=True, blank=True)\n    posted_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```",
      "testStrategy": "1. Unit tests for communication campaign model creation and management\n2. Test IEC material management\n3. Verify distribution tracking and analytics\n4. Test social media integration\n5. Validate stakeholder engagement tracking\n6. Test API endpoints for strategic communication data",
      "priority": "medium",
      "dependencies": [
        12,
        13
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 18,
      "title": "Dashboard and Reporting System",
      "description": "Implement the dashboard and reporting system for visualizing key data, generating reports, and providing insights for decision-making.",
      "details": "1. Create dashboard models and configurations\n2. Implement data visualization components\n3. Build report generation functionality\n4. Create custom query and filtering capabilities\n5. Implement data export in multiple formats\n6. Build admin interfaces for dashboard and report management\n7. Create API endpoints for dashboard and reporting data\n\nImplementation example:\n```python\nfrom django.db import models\nfrom django.conf import settings\n\nclass Dashboard(models.Model):\n    DASHBOARD_TYPES = [\n        ('executive', 'Executive Dashboard'),\n        ('operational', 'Operational Dashboard'),\n        ('analytical', 'Analytical Dashboard'),\n        ('community', 'Community Dashboard'),\n        ('custom', 'Custom Dashboard')\n    ]\n    \n    title = models.CharField(max_length=255)\n    dashboard_type = models.CharField(max_length=20, choices=DASHBOARD_TYPES)\n    description = models.TextField(blank=True)\n    is_public = models.BooleanField(default=False)\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass DashboardWidget(models.Model):\n    WIDGET_TYPES = [\n        ('chart', 'Chart'),\n        ('table', 'Table'),\n        ('metric', 'Metric'),\n        ('map', 'Map'),\n        ('list', 'List'),\n        ('custom', 'Custom')\n    ]\n    \n    CHART_TYPES = [\n        ('bar', 'Bar Chart'),\n        ('line', 'Line Chart'),\n        ('pie', 'Pie Chart'),\n        ('doughnut', 'Doughnut Chart'),\n        ('radar', 'Radar Chart'),\n        ('scatter', 'Scatter Plot'),\n        ('other', 'Other')\n    ]\n    \n    dashboard = models.ForeignKey(Dashboard, on_delete=models.CASCADE, related_name='widgets')\n    title = models.CharField(max_length=255)\n    widget_type = models.CharField(max_length=20, choices=WIDGET_TYPES)\n    chart_type = models.CharField(max_length=20, choices=CHART_TYPES, blank=True)\n    data_source = models.CharField(max_length=255)\n    query_params = models.JSONField(default=dict)\n    position_x = models.PositiveSmallIntegerField(default=0)\n    position_y = models.PositiveSmallIntegerField(default=0)\n    width = models.PositiveSmallIntegerField(default=1)\n    height = models.PositiveSmallIntegerField(default=1)\n    refresh_interval = models.PositiveIntegerField(null=True, blank=True, help_text='Refresh interval in seconds')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Report(models.Model):\n    REPORT_TYPES = [\n        ('community', 'Community Report'),\n        ('assessment', 'Assessment Report'),\n        ('policy', 'Policy Report'),\n        ('program', 'Program Report'),\n        ('monitoring', 'Monitoring Report'),\n        ('evaluation', 'Evaluation Report'),\n        ('custom', 'Custom Report')\n    ]\n    \n    FORMAT_CHOICES = [\n        ('pdf', 'PDF'),\n        ('excel', 'Excel'),\n        ('csv', 'CSV'),\n        ('html', 'HTML'),\n        ('json', 'JSON')\n    ]\n    \n    title = models.CharField(max_length=255)\n    report_type = models.CharField(max_length=20, choices=REPORT_TYPES)\n    description = models.TextField(blank=True)\n    query_params = models.JSONField(default=dict)\n    template = models.CharField(max_length=255, blank=True)\n    default_format = models.CharField(max_length=10, choices=FORMAT_CHOICES, default='pdf')\n    is_scheduled = models.BooleanField(default=False)\n    schedule_frequency = models.CharField(max_length=50, blank=True)\n    recipients = models.TextField(blank=True, help_text='Comma-separated email addresses')\n    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass ReportGeneration(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed')\n    ]\n    \n    report = models.ForeignKey(Report, on_delete=models.CASCADE, related_name='generations')\n    generated_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    generated_at = models.DateTimeField(auto_now_add=True)\n    format = models.CharField(max_length=10)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    file = models.FileField(upload_to='reports/%Y/%m/', null=True, blank=True)\n    error_message = models.TextField(blank=True)\n    query_params_used = models.JSONField(default=dict)\n```\n\n# Views and templates for dashboard\n```python\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Dashboard, DashboardWidget\n\n@login_required\ndef dashboard_view(request, dashboard_id):\n    dashboard = Dashboard.objects.get(id=dashboard_id)\n    widgets = dashboard.widgets.all().order_by('position_y', 'position_x')\n    \n    # Process widget data\n    widget_data = []\n    for widget in widgets:\n        # Get data for widget based on data_source and query_params\n        # This would be implemented based on specific data sources\n        data = get_widget_data(widget.data_source, widget.query_params)\n        widget_data.append({\n            'widget': widget,\n            'data': data\n        })\n    \n    return render(request, 'dashboard/dashboard.html', {\n        'dashboard': dashboard,\n        'widget_data': widget_data\n    })\n```",
      "testStrategy": "1. Unit tests for dashboard and widget models\n2. Test data visualization components\n3. Verify report generation functionality\n4. Test custom query and filtering capabilities\n5. Validate data export in multiple formats\n6. Test API endpoints for dashboard and reporting data\n7. Verify dashboard rendering and interactivity\n8. Test report scheduling and delivery",
      "priority": "high",
      "dependencies": [
        4,
        7,
        8,
        15,
        16
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 19,
      "title": "Frontend Implementation with Tailwind CSS",
      "description": "Implement the frontend user interface using Tailwind CSS framework with responsive design, component-based architecture, and cultural sensitivity.",
      "details": "1. Set up Tailwind CSS in the Django project\n2. Create base templates and layouts\n3. Implement responsive design using Tailwind's utilities\n4. Build reusable UI components\n5. Implement dark mode support\n6. Create culturally sensitive color schemes and design elements\n7. Optimize CSS bundle with purging of unused styles\n\nImplementation example:\n```bash\n# Install Tailwind CSS dependencies\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n```javascript\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    './templates/**/*.html',\n    './static/js/**/*.js',\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        'barmm-green': '#0A5640',\n        'barmm-gold': '#D4AF37',\n        'barmm-blue': '#0067A5',\n        'barmm-white': '#FFFFFF',\n        'barmm-black': '#000000',\n      },\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n        arabic: ['Amiri', 'serif'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}\n```\n\n```html\n<!-- Base template example -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}OOBC Management System{% endblock %}</title>\n    <link href=\"{% static 'css/tailwind.css' %}\" rel=\"stylesheet\">\n    <script src=\"{% static 'js/alpine.min.js' %}\" defer></script>\n    {% block extra_css %}{% endblock %}\n</head>\n<body class=\"bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200\">\n    <div class=\"min-h-screen flex flex-col\">\n        <!-- Header -->\n        <header class=\"bg-barmm-green text-white shadow-md\">\n            <div class=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n                <div class=\"flex items-center space-x-2\">\n                    <img src=\"{% static 'images/oobc-logo.png' %}\" alt=\"OOBC Logo\" class=\"h-10\">\n                    <div>\n                        <h1 class=\"text-xl font-bold\">OOBC Management System</h1>\n                        <p class=\"text-xs\">Office for Other Bangsamoro Communities</p>\n                    </div>\n                </div>\n                <nav class=\"hidden md:flex space-x-4\">\n                    <a href=\"{% url 'home' %}\" class=\"hover:text-barmm-gold\">Home</a>\n                    <a href=\"{% url 'communities' %}\" class=\"hover:text-barmm-gold\">Communities</a>\n                    <a href=\"{% url 'assessments' %}\" class=\"hover:text-barmm-gold\">MANA</a>\n                    <a href=\"{% url 'coordination' %}\" class=\"hover:text-barmm-gold\">Coordination</a>\n                    <a href=\"{% url 'policies' %}\" class=\"hover:text-barmm-gold\">Policies</a>\n                </nav>\n                <div class=\"flex items-center space-x-2\">\n                    <button id=\"darkModeToggle\" class=\"p-1 rounded-full hover:bg-gray-700\">\n                        <svg class=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\"></path></svg>\n                    </button>\n                    <div class=\"relative\" x-data=\"{ open: false }\">\n                        <button @click=\"open = !open\" class=\"flex items-center space-x-1\">\n                            <img src=\"{% static 'images/avatar.png' %}\" alt=\"User\" class=\"h-8 w-8 rounded-full\">\n                            <span class=\"hidden md:inline\">{{ user.username }}</span>\n                            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path></svg>\n                        </button>\n                        <div x-show=\"open\" @click.away=\"open = false\" class=\"absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1\">\n                            <a href=\"{% url 'profile' %}\" class=\"block px-4 py-2 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\">Profile</a>\n                            <a href=\"{% url 'settings' %}\" class=\"block px-4 py-2 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\">Settings</a>\n                            <a href=\"{% url 'logout' %}\" class=\"block px-4 py-2 text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700\">Logout</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </header>\n        \n        <!-- Main content -->\n        <main class=\"flex-grow container mx-auto px-4 py-6\">\n            {% block content %}{% endblock %}\n        </main>\n        \n        <!-- Footer -->\n        <footer class=\"bg-barmm-green text-white py-4\">\n            <div class=\"container mx-auto px-4\">\n                <div class=\"flex flex-col md:flex-row justify-between items-center\">\n                    <div class=\"mb-4 md:mb-0\">\n                        <p>&copy; {% now \"Y\" %} Office for Other Bangsamoro Communities</p>\n                        <p class=\"text-sm\">Office of the Chief Minister - BARMM</p>\n                    </div>\n                    <div class=\"flex space-x-4\">\n                        <a href=\"#\" class=\"hover:text-barmm-gold\">Privacy Policy</a>\n                        <a href=\"#\" class=\"hover:text-barmm-gold\">Terms of Use</a>\n                        <a href=\"#\" class=\"hover:text-barmm-gold\">Contact</a>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    </div>\n    \n    <script>\n        // Dark mode toggle\n        const darkModeToggle = document.getElementById('darkModeToggle');\n        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n            document.documentElement.classList.add('dark');\n        } else {\n            document.documentElement.classList.remove('dark');\n        }\n        \n        darkModeToggle.addEventListener('click', () => {\n            if (document.documentElement.classList.contains('dark')) {\n                document.documentElement.classList.remove('dark');\n                localStorage.theme = 'light';\n            } else {\n                document.documentElement.classList.add('dark');\n                localStorage.theme = 'dark';\n            }\n        });\n    </script>\n    \n    {% block extra_js %}{% endblock %}\n</body>\n</html>\n```",
      "testStrategy": "1. Test responsive design across different device sizes\n2. Verify dark mode functionality\n3. Test accessibility compliance using automated tools\n4. Verify cross-browser compatibility\n5. Test component reusability\n6. Validate CSS optimization and bundle size\n7. Perform visual regression testing\n8. Test cultural sensitivity with stakeholders",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 20,
      "title": "API Development with Django REST Framework",
      "description": "Implement the API layer using Django REST Framework to provide data access for frontend components and potential future integrations.",
      "details": "1. Set up Django REST Framework\n2. Create serializers for core models\n3. Implement viewsets and routers\n4. Add authentication and permissions\n5. Implement filtering and pagination\n6. Create API documentation\n7. Add API versioning\n\nImplementation example:\n```python\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import OBCCommunity, Stakeholder, MANAAssessment, AssessedNeed\n\nclass StakeholderSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Stakeholder\n        fields = '__all__'\n\nclass OBCCommunitySerializer(serializers.ModelSerializer):\n    stakeholders = StakeholderSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = OBCCommunity\n        fields = '__all__'\n\nclass AssessedNeedSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AssessedNeed\n        fields = '__all__'\n\nclass MANAAssessmentSerializer(serializers.ModelSerializer):\n    identified_needs = AssessedNeedSerializer(many=True, read_only=True)\n    \n    class Meta:\n        model = MANAAssessment\n        fields = '__all__'\n\n# views.py\nfrom rest_framework import viewsets, permissions\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom .models import OBCCommunity, Stakeholder, MANAAssessment, AssessedNeed\nfrom .serializers import OBCCommunitySerializer, StakeholderSerializer, MANAAssessmentSerializer, AssessedNeedSerializer\n\nclass OBCCommunityViewSet(viewsets.ModelViewSet):\n    queryset = OBCCommunity.objects.all()\n    serializer_class = OBCCommunitySerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filterset_fields = ['barangay__municipality__province__region', 'status']\n    search_fields = ['name', 'cultural_background']\n    \n    @action(detail=True, methods=['get'])\n    def stakeholders(self, request, pk=None):\n        community = self.get_object()\n        stakeholders = community.stakeholders.all()\n        serializer = StakeholderSerializer(stakeholders, many=True)\n        return Response(serializer.data)\n\nclass MANAAssessmentViewSet(viewsets.ModelViewSet):\n    queryset = MANAAssessment.objects.all()\n    serializer_class = MANAAssessmentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filterset_fields = ['community', 'status', 'methodology']\n    \n    @action(detail=True, methods=['get'])\n    def needs(self, request, pk=None):\n        assessment = self.get_object()\n        needs = assessment.identified_needs.all()\n        serializer = AssessedNeedSerializer(needs, many=True)\n        return Response(serializer.data)\n\n# urls.py\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import OBCCommunityViewSet, MANAAssessmentViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'communities', OBCCommunityViewSet)\nrouter.register(r'assessments', MANAAssessmentViewSet)\n\nurlpatterns = [\n    path('api/v1/', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls')),\n]\n```",
      "testStrategy": "1. Unit tests for API endpoints\n2. Test authentication and permissions\n3. Verify filtering and pagination\n4. Test API versioning\n5. Validate API documentation\n6. Performance testing for API endpoints\n7. Test API error handling and responses",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        4,
        7,
        8,
        12,
        15
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 21,
      "title": "Data Import and Migration Tools",
      "description": "Develop data import and migration tools to facilitate the initial population of the system with existing data from various sources.",
      "details": "1. Create data import models and interfaces\n2. Implement CSV/Excel import functionality\n3. Build data validation and cleaning tools\n4. Create data mapping and transformation utilities\n5. Implement import logging and error handling\n6. Build admin interfaces for data import management\n7. Create management commands for bulk imports\n\nImplementation example:\n```python\n# models.py\nfrom django.db import models\nfrom django.conf import settings\n\nclass DataImport(models.Model):\n    IMPORT_TYPES = [\n        ('communities', 'Communities'),\n        ('stakeholders', 'Stakeholders'),\n        ('assessments', 'Assessments'),\n        ('needs', 'Needs'),\n        ('organizations', 'Organizations'),\n        ('other', 'Other')\n    ]\n    \n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n        ('partial', 'Partially Completed')\n    ]\n    \n    import_type = models.CharField(max_length=20, choices=IMPORT_TYPES)\n    file = models.FileField(upload_to='imports/%Y/%m/')\n    description = models.TextField(blank=True)\n    mapping = models.JSONField(default=dict, blank=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    records_total = models.PositiveIntegerField(null=True, blank=True)\n    records_imported = models.PositiveIntegerField(null=True, blank=True)\n    records_failed = models.PositiveIntegerField(null=True, blank=True)\n    error_log = models.TextField(blank=True)\n    imported_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n# management/commands/import_communities.py\nfrom django.core.management.base import BaseCommand\nimport csv\nfrom ...models import OBCCommunity, Region, Province, Municipality, Barangay\n\nclass Command(BaseCommand):\n    help = 'Import communities from CSV file'\n    \n    def add_arguments(self, parser):\n        parser.add_argument('csv_file', type=str, help='Path to the CSV file')\n    \n    def handle(self, *args, **options):\n        csv_file = options['csv_file']\n        \n        with open(csv_file, 'r') as file:\n            reader = csv.DictReader(file)\n            total_rows = 0\n            imported = 0\n            errors = 0\n            \n            for row in reader:\n                total_rows += 1\n                try:\n                    # Get or create region\n                    region, _ = Region.objects.get_or_create(\n                        name=row['region_name'],\n                        defaults={'code': row.get('region_code', '')}\n                    )\n                    \n                    # Get or create province\n                    province, _ = Province.objects.get_or_create(\n                        name=row['province_name'],\n                        region=region,\n                        defaults={'code': row.get('province_code', '')}\n                    )\n                    \n                    # Get or create municipality\n                    municipality, _ = Municipality.objects.get_or_create(\n                        name=row['municipality_name'],\n                        province=province,\n                        defaults={'code': row.get('municipality_code', '')}\n                    )\n                    \n                    # Get or create barangay\n                    barangay, _ = Barangay.objects.get_or_create(\n                        name=row['barangay_name'],\n                        municipality=municipality,\n                        defaults={'code': row.get('barangay_code', '')}\n                    )\n                    \n                    # Create community\n                    community, created = OBCCommunity.objects.get_or_create(\n                        name=row['community_name'],\n                        barangay=barangay,\n                        defaults={\n                            'population': row.get('population', None),\n                            'households': row.get('households', None),\n                            'cultural_background': row.get('cultural_background', ''),\n                            'languages': row.get('languages', ''),\n                            'religious_facilities': row.get('religious_facilities', ''),\n                            'established_year': row.get('established_year', None),\n                            'status': row.get('status', 'developing')\n                        }\n                    )\n                    \n                    if created:\n                        self.stdout.write(self.style.SUCCESS(f'Created community: {community.name}'))\n                    else:\n                        self.stdout.write(self.style.WARNING(f'Community already exists: {community.name}'))\n                    \n                    imported += 1\n                except Exception as e:\n                    self.stdout.write(self.style.ERROR(f'Error importing row {total_rows}: {str(e)}'))\n                    errors += 1\n            \n            self.stdout.write(self.style.SUCCESS(f'Import completed. Total: {total_rows}, Imported: {imported}, Errors: {errors}'))\n```\n\n# views.py for import interface\n```python\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required, permission_required\nfrom .models import DataImport\nfrom .forms import DataImportForm\nfrom .tasks import process_data_import\n\n@login_required\n@permission_required('app.add_dataimport')\ndef import_data(request):\n    if request.method == 'POST':\n        form = DataImportForm(request.POST, request.FILES)\n        if form.is_valid():\n            import_obj = form.save(commit=False)\n            import_obj.imported_by = request.user\n            import_obj.save()\n            \n            # Process import (could be async with Celery)\n            process_data_import.delay(import_obj.id)\n            \n            messages.success(request, 'Data import initiated. You will be notified when complete.')\n            return redirect('import_list')\n    else:\n        form = DataImportForm()\n    \n    return render(request, 'data_import/import_form.html', {'form': form})\n```",
      "testStrategy": "1. Unit tests for data import functionality\n2. Test CSV/Excel import with sample data\n3. Verify data validation and cleaning\n4. Test data mapping and transformation\n5. Validate import logging and error handling\n6. Test management commands for bulk imports\n7. Test edge cases with malformed data",
      "priority": "medium",
      "dependencies": [
        3,
        4,
        5
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 22,
      "title": "System Deployment and Documentation",
      "description": "Prepare the system for deployment, create comprehensive documentation, and implement training materials for users.",
      "details": "1. Prepare deployment configuration\n2. Create deployment scripts and procedures\n3. Implement backup and recovery procedures\n4. Create user documentation and help guides\n5. Develop administrator documentation\n6. Create training materials and tutorials\n7. Implement system health monitoring\n8. Prepare security hardening procedures\n\nImplementation example:\n```bash\n# Example deployment script for a Django application\n#!/bin/bash\n\n# Stop the application\nsudo systemctl stop gunicorn\n\n# Pull the latest changes\ngit pull origin main\n\n# Activate virtual environment\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run migrations\n./manage.py migrate\n\n# Collect static files\n./manage.py collectstatic --noinput\n\n# Restart the application\nsudo systemctl start gunicorn\n\n# Check status\nsudo systemctl status gunicorn\n```\n\n```ini\n# Example gunicorn.service file for systemd\n[Unit]\nDescription=gunicorn daemon for OOBC Management System\nAfter=network.target\n\n[Service]\nUser=www-data\nGroup=www-data\nWorkingDirectory=/var/www/oobc_management\nExecStart=/var/www/oobc_management/venv/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/var/www/oobc_management/oobc.sock \\\n          oobc_management.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```nginx\n# Example Nginx configuration\nserver {\n    listen 80;\n    server_name oobc.barmm.gov.ph;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /var/www/oobc_management;\n    }\n\n    location /media/ {\n        root /var/www/oobc_management;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/var/www/oobc_management/oobc.sock;\n    }\n}\n```\n\n# Documentation structure\n```markdown\n# OOBC Management System Documentation\n\n## User Guide\n\n### 1. Getting Started\n- System Overview\n- Logging In\n- Dashboard Navigation\n- User Profile Management\n\n### 2. OBC Community Management\n- Viewing Communities\n- Adding New Communities\n- Managing Community Profiles\n- Stakeholder Management\n\n### 3. MANA Module\n- Creating Assessments\n- Managing Needs\n- Conducting Consultations\n- Generating Reports\n\n### 4. Coordination and Collaboration\n- Stakeholder Directory\n- Meeting Management\n- Partnership Tracking\n- Communication Tools\n\n### 5. Policy Recommendations\n- Creating Recommendations\n- Evidence Management\n- Approval Workflows\n- Impact Assessment\n\n## Administrator Guide\n\n### 1. System Setup\n- Server Requirements\n- Installation Procedure\n- Configuration Options\n- Database Management\n\n### 2. User Management\n- Creating User Accounts\n- Managing Roles and Permissions\n- User Activity Monitoring\n- Password Policies\n\n### 3. Data Management\n- Backup Procedures\n- Data Import/Export\n- Data Validation\n- Database Maintenance\n\n### 4. System Monitoring\n- Performance Monitoring\n- Error Logging\n- Security Auditing\n- System Updates\n```",
      "testStrategy": "1. Test deployment procedures in staging environment\n2. Verify backup and recovery procedures\n3. Test system performance under load\n4. Validate security measures\n5. Review documentation for completeness and accuracy\n6. Test user guides with actual users\n7. Verify monitoring and alerting functionality\n8. Conduct end-to-end system testing",
      "priority": "high",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 23,
      "title": "Stabilize Planning Dashboards Routing",
      "description": "Ensure newly added planning, budgeting, and strategic dashboards are exported through the common.views package so URL inclusion no longer crashes runserver.",
      "status": "done",
      "dependencies": [
        19,
        21
      ],
      "priority": "medium",
      "details": "1. Re-export Phase 2-5 management dashboard views (gap analysis, policy-budget matrix, community voting, transparency, strategic planning) in common.views.__init__\n2. Align __all__ exports so include() lookups succeed\n3. Verify Django check and runserver start without AttributeError\n4. Document fix for regression in tasks tracker",
      "testStrategy": "1. Run ./manage.py check to confirm imports succeed\n2. Hit /admin/ and landing routes to ensure 200 responses\n3. Spot-check new dashboards render without server errors",
      "subtasks": []
    }
  ]
}
