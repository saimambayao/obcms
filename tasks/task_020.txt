# Task ID: 20
# Title: API Development with Django REST Framework
# Status: pending
# Dependencies: 2, 3, 4, 7, 8, 12, 15
# Priority: medium
# Description: Implement the API layer using Django REST Framework to provide data access for frontend components and potential future integrations.
# Details:
1. Set up Django REST Framework
2. Create serializers for core models
3. Implement viewsets and routers
4. Add authentication and permissions
5. Implement filtering and pagination
6. Create API documentation
7. Add API versioning

Implementation example:
```python
# serializers.py
from rest_framework import serializers
from .models import OBCCommunity, Stakeholder, MANAAssessment, AssessedNeed

class StakeholderSerializer(serializers.ModelSerializer):
    class Meta:
        model = Stakeholder
        fields = '__all__'

class OBCCommunitySerializer(serializers.ModelSerializer):
    stakeholders = StakeholderSerializer(many=True, read_only=True)
    
    class Meta:
        model = OBCCommunity
        fields = '__all__'

class AssessedNeedSerializer(serializers.ModelSerializer):
    class Meta:
        model = AssessedNeed
        fields = '__all__'

class MANAAssessmentSerializer(serializers.ModelSerializer):
    identified_needs = AssessedNeedSerializer(many=True, read_only=True)
    
    class Meta:
        model = MANAAssessment
        fields = '__all__'

# views.py
from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import OBCCommunity, Stakeholder, MANAAssessment, AssessedNeed
from .serializers import OBCCommunitySerializer, StakeholderSerializer, MANAAssessmentSerializer, AssessedNeedSerializer

class OBCCommunityViewSet(viewsets.ModelViewSet):
    queryset = OBCCommunity.objects.all()
    serializer_class = OBCCommunitySerializer
    permission_classes = [permissions.IsAuthenticated]
    filterset_fields = ['barangay__municipality__province__region', 'status']
    search_fields = ['name', 'cultural_background']
    
    @action(detail=True, methods=['get'])
    def stakeholders(self, request, pk=None):
        community = self.get_object()
        stakeholders = community.stakeholders.all()
        serializer = StakeholderSerializer(stakeholders, many=True)
        return Response(serializer.data)

class MANAAssessmentViewSet(viewsets.ModelViewSet):
    queryset = MANAAssessment.objects.all()
    serializer_class = MANAAssessmentSerializer
    permission_classes = [permissions.IsAuthenticated]
    filterset_fields = ['community', 'status', 'methodology']
    
    @action(detail=True, methods=['get'])
    def needs(self, request, pk=None):
        assessment = self.get_object()
        needs = assessment.identified_needs.all()
        serializer = AssessedNeedSerializer(needs, many=True)
        return Response(serializer.data)

# urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import OBCCommunityViewSet, MANAAssessmentViewSet

router = DefaultRouter()
router.register(r'communities', OBCCommunityViewSet)
router.register(r'assessments', MANAAssessmentViewSet)

urlpatterns = [
    path('api/v1/', include(router.urls)),
    path('api-auth/', include('rest_framework.urls')),
]
```

# Test Strategy:
1. Unit tests for API endpoints
2. Test authentication and permissions
3. Verify filtering and pagination
4. Test API versioning
5. Validate API documentation
6. Performance testing for API endpoints
7. Test API error handling and responses
