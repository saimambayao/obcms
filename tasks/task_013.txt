# Task ID: 13
# Title: Meeting and Event Management
# Status: pending
# Dependencies: 9, 12
# Priority: medium
# Description: Implement the meeting and event management system for planning, scheduling, and tracking consultations, coordination meetings, courtesy calls, and other events.
# Details:
1. Create meeting and event models
2. Implement event scheduling and calendar integration
3. Build participant management and invitations
4. Create agenda and minutes management
5. Implement follow-up action tracking
6. Build admin interfaces for meeting and event management
7. Create API endpoints for meeting and event data

Model example:
```python
from django.db import models
from django.conf import settings

class Event(models.Model):
    EVENT_TYPES = [
        ('meeting', 'Meeting'),
        ('consultation', 'Consultation'),
        ('courtesy_call', 'Courtesy Call'),
        ('workshop', 'Workshop'),
        ('forum', 'Forum'),
        ('training', 'Training'),
        ('other', 'Other')
    ]
    
    STATUS_CHOICES = [
        ('planned', 'Planned'),
        ('confirmed', 'Confirmed'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
        ('postponed', 'Postponed')
    ]
    
    title = models.CharField(max_length=255)
    event_type = models.CharField(max_length=20, choices=EVENT_TYPES)
    description = models.TextField()
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    start_time = models.TimeField(null=True, blank=True)
    end_time = models.TimeField(null=True, blank=True)
    location = models.CharField(max_length=255)
    virtual_link = models.URLField(blank=True)
    organizer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='organized_events')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='planned')
    agenda = models.TextField(blank=True)
    minutes = models.TextField(blank=True)
    outcomes = models.TextField(blank=True)
    community = models.ForeignKey('OBCCommunity', on_delete=models.SET_NULL, null=True, blank=True, related_name='events')
    organizations = models.ManyToManyField('Organization', related_name='events', blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class EventParticipant(models.Model):
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='participants')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)
    stakeholder = models.ForeignKey('Stakeholder', on_delete=models.SET_NULL, null=True, blank=True)
    organization = models.ForeignKey('Organization', on_delete=models.SET_NULL, null=True, blank=True)
    name = models.CharField(max_length=255, blank=True)  # For external participants
    position = models.CharField(max_length=100, blank=True)
    email = models.EmailField(blank=True)
    phone = models.CharField(max_length=50, blank=True)
    invitation_sent = models.BooleanField(default=False)
    invitation_sent_date = models.DateTimeField(null=True, blank=True)
    confirmed = models.BooleanField(default=False)
    attended = models.BooleanField(default=False)
    notes = models.TextField(blank=True)

class ActionItem(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')
    ]
    
    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='action_items')
    description = models.TextField()
    assigned_to = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
    assigned_organization = models.ForeignKey('Organization', on_delete=models.SET_NULL, null=True, blank=True)
    due_date = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    completion_date = models.DateField(null=True, blank=True)
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
```

# Test Strategy:
1. Unit tests for event creation and management
2. Test event scheduling and calendar integration
3. Verify participant management and invitations
4. Test agenda and minutes management
5. Validate follow-up action tracking
6. Test API endpoints for meeting and event data
