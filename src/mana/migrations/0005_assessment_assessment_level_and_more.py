# Generated by Django 4.2.21 on 2025-05-24 02:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("communities", "0006_remove_obccommunity_employment_opportunities_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("mana", "0004_baselinestudy_baselinestudyteammember_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="assessment",
            name="assessment_level",
            field=models.CharField(
                choices=[
                    ("regional", "Regional Level"),
                    ("provincial", "Provincial Level"),
                    ("city_municipal", "City/Municipal Level"),
                    ("barangay", "Barangay Level"),
                    ("community", "Community Level"),
                ],
                default="community",
                help_text="Level at which the assessment is conducted",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="primary_methodology",
            field=models.CharField(
                choices=[
                    ("desk_review", "Desk Review/Research"),
                    ("survey", "Survey"),
                    ("kii", "Key Informant Interview (KII)"),
                    ("fgd", "FGD/Workshops"),
                    ("participatory", "Participatory Assessment"),
                    ("observation", "Direct Observation"),
                    ("mixed", "Mixed Methods"),
                    ("other", "Other Methodologies"),
                ],
                default="survey",
                help_text="Primary methodology used in the assessment",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="secondary_methodologies",
            field=models.JSONField(
                blank=True, help_text="List of secondary methodologies used", null=True
            ),
        ),
        migrations.CreateModel(
            name="CommunityProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "brief_historical_background",
                    models.TextField(
                        blank=True,
                        help_text="Key historical narratives of the community in the area",
                    ),
                ),
                (
                    "established_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year the community was established",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1800),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                    ),
                ),
                (
                    "origin_story",
                    models.TextField(
                        blank=True,
                        help_text="Story of how the community was established",
                    ),
                ),
                (
                    "migration_history",
                    models.TextField(
                        blank=True, help_text="Migration history and patterns"
                    ),
                ),
                (
                    "cultural_practices_traditions",
                    models.TextField(
                        blank=True, help_text="Notable customs, traditions, festivals"
                    ),
                ),
                (
                    "religious_affiliation",
                    models.TextField(
                        blank=True,
                        help_text="Religious affiliation and specific practices",
                    ),
                ),
                (
                    "traditional_leaders_role",
                    models.TextField(
                        blank=True,
                        help_text="Role of traditional leaders (Imams, Elders, Chieftains)",
                    ),
                ),
                (
                    "cultural_preservation_efforts",
                    models.TextField(
                        blank=True, help_text="Existing cultural preservation efforts"
                    ),
                ),
                (
                    "needs_assessment_date",
                    models.DateField(
                        blank=True, help_text="Date of last needs assessment", null=True
                    ),
                ),
                (
                    "key_findings_last_assessment",
                    models.TextField(
                        blank=True, help_text="Key findings from last needs assessment"
                    ),
                ),
                (
                    "assessment_data_sources",
                    models.TextField(
                        blank=True,
                        help_text="Data sources (community consultations, surveys, LGU data)",
                    ),
                ),
                (
                    "identified_gaps",
                    models.TextField(
                        blank=True, help_text="Identified gaps based on assessments"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment that created/updated this profile",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_profiles",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.OneToOneField(
                        help_text="OBC community this profile belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_profile",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this profile",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_community_profiles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Cultural Profile",
                "verbose_name_plural": "Community Cultural Profiles",
                "ordering": ["community__barangay__name"],
            },
        ),
        migrations.CreateModel(
            name="CommunityGovernance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "formal_political_representation",
                    models.TextField(
                        blank=True,
                        help_text="Presence in Barangay Council, LGU representation",
                    ),
                ),
                (
                    "informal_leadership_structures",
                    models.TextField(
                        blank=True,
                        help_text="Description of informal leadership structures",
                    ),
                ),
                (
                    "community_organizations",
                    models.TextField(
                        blank=True,
                        help_text="Community organizations/associations (name, focus, contact)",
                    ),
                ),
                (
                    "relationship_with_lgu",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("collaborative", "Collaborative"),
                            ("strained", "Strained"),
                            ("minimal", "Minimal"),
                            ("good", "Good"),
                            ("excellent", "Excellent"),
                        ],
                        help_text="Relationship with LGU",
                        max_length=20,
                    ),
                ),
                (
                    "participation_local_governance",
                    models.TextField(
                        blank=True,
                        help_text="Participation in local governance and planning",
                    ),
                ),
                (
                    "access_government_info",
                    models.TextField(
                        blank=True,
                        help_text="Access to information on government programs",
                    ),
                ),
                (
                    "key_community_leaders",
                    models.TextField(
                        blank=True,
                        help_text="Key community leader(s)/focal person(s) with contact details",
                    ),
                ),
                (
                    "relevant_lgu_officials",
                    models.TextField(
                        blank=True,
                        help_text="Relevant LGU official(s) and their contact information",
                    ),
                ),
                (
                    "community_leader",
                    models.CharField(
                        blank=True,
                        help_text="Name of the primary community leader",
                        max_length=255,
                    ),
                ),
                (
                    "leader_contact",
                    models.CharField(
                        blank=True,
                        help_text="Contact information for community leader",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment that created/updated this profile",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="governance_profiles",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.OneToOneField(
                        help_text="OBC community this governance profile belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="governance_profile",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this profile",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_governance_profiles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Governance Profile",
                "verbose_name_plural": "Community Governance Profiles",
                "ordering": ["community__barangay__name"],
            },
        ),
        migrations.CreateModel(
            name="CommunityChallenges",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("governance_policy", "Governance and Policy"),
                            ("public_services", "Access to Public Services"),
                            ("land_ownership", "Land Ownership and Security"),
                            ("economic", "Economic Disparities"),
                            ("social_conflict", "Social Instability and Conflict"),
                            ("cultural", "Cultural Miscommunication"),
                            ("gender", "Gender Inequality"),
                            ("substance_abuse", "Substance Abuse"),
                            ("financial_fraud", "Investment Scams and Fraud"),
                            ("environmental", "Environmental Degradation"),
                            ("other", "Other Challenges"),
                        ],
                        help_text="Category of challenge",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title of the challenge", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the challenge"),
                ),
                (
                    "impact_description",
                    models.TextField(
                        help_text="Impact of this challenge on the community"
                    ),
                ),
                (
                    "affected_population",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of people affected by this challenge",
                        null=True,
                    ),
                ),
                (
                    "severity_level",
                    models.IntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Severity level (1=Low, 5=Critical)",
                    ),
                ),
                (
                    "governance_policy_challenges",
                    models.TextField(
                        blank=True,
                        help_text="Marginalization, lack of representation issues",
                    ),
                ),
                (
                    "access_public_services_challenges",
                    models.TextField(
                        blank=True,
                        help_text="Challenges in accessing education, health, infrastructure",
                    ),
                ),
                (
                    "land_ownership_security_issues",
                    models.TextField(
                        blank=True, help_text="Land ownership and security challenges"
                    ),
                ),
                (
                    "economic_disparities",
                    models.TextField(
                        blank=True,
                        help_text="Poverty, limited employment, economic challenges",
                    ),
                ),
                (
                    "social_instability_conflict",
                    models.TextField(
                        blank=True, help_text="Rido, security issues, social conflicts"
                    ),
                ),
                (
                    "cultural_miscommunication",
                    models.TextField(
                        blank=True, help_text="Cultural miscommunication challenges"
                    ),
                ),
                (
                    "gender_inequality_issues",
                    models.TextField(
                        blank=True, help_text="Gender inequality, early marriage issues"
                    ),
                ),
                (
                    "substance_abuse_issues",
                    models.TextField(
                        blank=True, help_text="Drug use, substance abuse issues"
                    ),
                ),
                (
                    "investment_scam_issues",
                    models.TextField(
                        blank=True,
                        help_text="Investment scams and financial fraud issues",
                    ),
                ),
                (
                    "environmental_degradation",
                    models.TextField(
                        blank=True,
                        help_text="Mining, illegal fishing, environmental issues",
                    ),
                ),
                (
                    "other_challenges",
                    models.TextField(
                        blank=True,
                        help_text="Other specific challenges (ISAL education, Halal industry, etc.)",
                    ),
                ),
                (
                    "challenges_impact",
                    models.TextField(
                        blank=True,
                        help_text="Impact of these challenges on the community",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this challenge is currently active",
                    ),
                ),
                (
                    "resolution_efforts",
                    models.TextField(
                        blank=True,
                        help_text="Efforts being made to address this challenge",
                    ),
                ),
                (
                    "support_needed",
                    models.TextField(
                        blank=True, help_text="Support needed to address this challenge"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment that identified this challenge",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identified_challenges",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="OBC community facing this challenge",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenges",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "identified_by",
                    models.ForeignKey(
                        help_text="User who identified this challenge",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="identified_challenges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Challenge",
                "verbose_name_plural": "Community Challenges",
                "ordering": ["-severity_level", "category", "title"],
            },
        ),
        migrations.CreateModel(
            name="CommunityAspirations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("poverty_eradication", "Poverty Eradication"),
                            ("infrastructure", "Infrastructure Development"),
                            ("livelihood", "Livelihood Programs"),
                            ("education", "Education Enhancement"),
                            ("healthcare", "Healthcare Access"),
                            ("cultural_preservation", "Cultural Preservation"),
                            ("peace_security", "Peace and Security"),
                            ("governance", "Governance Improvement"),
                            ("environment", "Environmental Protection"),
                            ("other", "Other Aspirations"),
                        ],
                        help_text="Category of aspiration",
                        max_length=25,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title of the aspiration", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the aspiration"
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("critical", "Critical Priority"),
                            ("high", "High Priority"),
                            ("medium", "Medium Priority"),
                            ("low", "Low Priority"),
                        ],
                        default="medium",
                        help_text="Priority level of this aspiration",
                        max_length=10,
                    ),
                ),
                (
                    "key_aspirations",
                    models.TextField(
                        blank=True,
                        help_text="Key community aspirations (poverty eradication, improved services, etc.)",
                    ),
                ),
                (
                    "infrastructure_priorities",
                    models.TextField(
                        blank=True,
                        help_text="Infrastructure development priorities (roads, water, health, schools)",
                    ),
                ),
                (
                    "livelihood_program_priorities",
                    models.TextField(
                        blank=True,
                        help_text="Livelihood program priorities (agriculture, fisheries, SMEs, Halal, ecotourism)",
                    ),
                ),
                (
                    "education_priorities",
                    models.TextField(
                        blank=True,
                        help_text="Education priorities (scholarships, skills training, Madrasah support)",
                    ),
                ),
                (
                    "healthcare_priorities",
                    models.TextField(
                        blank=True, help_text="Healthcare access priorities"
                    ),
                ),
                (
                    "cultural_preservation_priorities",
                    models.TextField(
                        blank=True,
                        help_text="Cultural preservation initiative priorities",
                    ),
                ),
                (
                    "peace_security_priorities",
                    models.TextField(
                        blank=True,
                        help_text="Peace and order/conflict resolution priorities",
                    ),
                ),
                (
                    "specific_project_proposals",
                    models.TextField(
                        blank=True,
                        help_text="Specific project proposals/ideas from the community",
                    ),
                ),
                (
                    "estimated_beneficiaries",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Estimated number of beneficiaries",
                        null=True,
                    ),
                ),
                (
                    "estimated_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated budget required",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "proposed_timeline",
                    models.CharField(
                        blank=True,
                        help_text="Proposed timeline for implementation",
                        max_length=100,
                    ),
                ),
                (
                    "potential_partners",
                    models.TextField(
                        blank=True, help_text="Potential partners for implementation"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this aspiration is still active/relevant",
                    ),
                ),
                (
                    "implementation_status",
                    models.CharField(
                        choices=[
                            ("identified", "Identified"),
                            ("planning", "Under Planning"),
                            ("funded", "Funded"),
                            ("implementing", "Being Implemented"),
                            ("completed", "Completed"),
                            ("deferred", "Deferred"),
                        ],
                        default="identified",
                        help_text="Implementation status",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment that captured this aspiration",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_aspirations",
                        to="mana.assessment",
                    ),
                ),
                (
                    "captured_by",
                    models.ForeignKey(
                        help_text="User who captured this aspiration",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="captured_aspirations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="OBC community with this aspiration",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aspirations",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Aspiration",
                "verbose_name_plural": "Community Aspirations",
                "ordering": ["-priority_level", "category", "title"],
            },
        ),
    ]
