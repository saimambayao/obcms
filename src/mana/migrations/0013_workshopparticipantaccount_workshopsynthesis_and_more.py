# Generated by Django 4.2.24 on 2025-09-30 01:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0012_add_multiple_teams_to_stafftask"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("mana", "0012_add_province_to_assessment"),
    ]

    operations = [
        migrations.CreateModel(
            name="WorkshopParticipantAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stakeholder_type",
                    models.CharField(
                        choices=[
                            ("elder", "Community Elder"),
                            ("women_leader", "Women Leader"),
                            ("youth_leader", "Youth Leader"),
                            ("farmer", "Farmer"),
                            ("fisherfolk", "Fisherfolk"),
                            ("religious_leader", "Religious Leader"),
                            ("traditional_leader", "Traditional Leader"),
                            ("milf_representative", "MILF Representative"),
                            ("mnlf_representative", "MNLF Representative"),
                            ("business_leader", "Business Leader"),
                            ("teacher", "Teacher/Educator"),
                            ("health_worker", "Health Worker"),
                            ("lgu_official", "LGU Official"),
                            ("ngo_representative", "NGO Representative"),
                            ("other", "Other"),
                        ],
                        help_text="Type of stakeholder",
                        max_length=20,
                    ),
                ),
                (
                    "organization",
                    models.CharField(
                        blank=True, help_text="Organization represented", max_length=200
                    ),
                ),
                (
                    "completed_workshops",
                    models.JSONField(
                        default=list,
                        help_text="List of completed workshop types (e.g., ['workshop_1', 'workshop_2'])",
                    ),
                ),
                (
                    "current_workshop",
                    models.CharField(
                        blank=True,
                        help_text="Currently accessible workshop type",
                        max_length=15,
                    ),
                ),
                (
                    "consent_given",
                    models.BooleanField(
                        default=False, help_text="Whether participant gave consent"
                    ),
                ),
                (
                    "consent_date",
                    models.DateTimeField(
                        blank=True, help_text="Date consent was given", null=True
                    ),
                ),
                (
                    "profile_completed",
                    models.BooleanField(
                        default=False, help_text="Whether profile is complete"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment this participant is enrolled in",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participant_accounts",
                        to="mana.assessment",
                    ),
                ),
                (
                    "barangay",
                    models.ForeignKey(
                        blank=True,
                        help_text="Barangay (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workshop_participants",
                        to="common.barangay",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Facilitator who created this account",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_participant_accounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "municipality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Municipality (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workshop_participants",
                        to="common.municipality",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        help_text="Province represented by this participant",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshop_participants",
                        to="common.province",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Django user account for authentication",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshop_participant_account",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Workshop Participant Account",
                "verbose_name_plural": "Workshop Participant Accounts",
                "ordering": ["province", "user__last_name"],
                "permissions": [
                    ("can_access_regional_mana", "Can access regional MANA workshops"),
                    ("can_view_provincial_obc", "Can view provincial OBC data"),
                ],
                "unique_together": {("user", "assessment")},
            },
        ),
        migrations.CreateModel(
            name="WorkshopSynthesis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prompt_template",
                    models.TextField(help_text="Prompt template used for synthesis"),
                ),
                (
                    "filters",
                    models.JSONField(
                        blank=True,
                        help_text="Filters applied (province, stakeholder type, etc.)",
                        null=True,
                    ),
                ),
                (
                    "synthesis_text",
                    models.TextField(
                        blank=True, help_text="Generated synthesis content"
                    ),
                ),
                (
                    "key_themes",
                    models.JSONField(
                        blank=True,
                        help_text="Extracted key themes and patterns",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("reviewed", "Reviewed"),
                            ("approved", "Approved"),
                        ],
                        default="queued",
                        help_text="Synthesis status",
                        max_length=15,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        help_text="AI provider used (e.g., OpenAI, Anthropic)",
                        max_length=50,
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True,
                        help_text="Model used (e.g., gpt-4, claude-3)",
                        max_length=50,
                    ),
                ),
                (
                    "tokens_used",
                    models.IntegerField(
                        blank=True, help_text="Tokens consumed", null=True
                    ),
                ),
                (
                    "processing_time_seconds",
                    models.FloatField(
                        blank=True, help_text="Processing time in seconds", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="Error message if failed"),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Review notes from facilitator"
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, help_text="When synthesis was approved", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment this synthesis belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workshop_syntheses",
                        to="mana.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who requested this synthesis",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_syntheses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who reviewed this synthesis",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_syntheses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workshop",
                    models.ForeignKey(
                        help_text="Workshop being synthesized",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="syntheses",
                        to="mana.workshopactivity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Workshop Synthesis",
                "verbose_name_plural": "Workshop Syntheses",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["assessment", "status"],
                        name="mana_worksh_assessm_70b92a_idx",
                    ),
                    models.Index(
                        fields=["workshop", "status"],
                        name="mana_worksh_worksho_7c8266_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="WorkshopResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_id",
                    models.CharField(
                        help_text="Question identifier from schema", max_length=50
                    ),
                ),
                (
                    "response_data",
                    models.JSONField(
                        help_text="Response content (structure depends on question type)"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("validated", "Validated"),
                        ],
                        default="draft",
                        help_text="Response status",
                        max_length=15,
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True, help_text="When response was submitted", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "participant",
                    models.ForeignKey(
                        help_text="Participant who submitted this response",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="mana.workshopparticipantaccount",
                    ),
                ),
                (
                    "workshop",
                    models.ForeignKey(
                        help_text="Workshop this response belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="structured_responses",
                        to="mana.workshopactivity",
                    ),
                ),
            ],
            options={
                "ordering": ["workshop", "participant", "question_id"],
                "indexes": [
                    models.Index(
                        fields=["workshop", "status"],
                        name="mana_worksh_worksho_1c1107_idx",
                    ),
                    models.Index(
                        fields=["participant", "workshop"],
                        name="mana_worksh_partici_7f9ed8_idx",
                    ),
                ],
                "unique_together": {("participant", "workshop", "question_id")},
            },
        ),
        migrations.CreateModel(
            name="WorkshopAccessLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("view", "Viewed Workshop"),
                            ("submit", "Submitted Response"),
                            ("update", "Updated Response"),
                            ("unlock", "Workshop Unlocked"),
                            ("complete", "Workshop Completed"),
                        ],
                        help_text="Type of action",
                        max_length=15,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Additional metadata (IP address, user agent, etc.)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "participant",
                    models.ForeignKey(
                        help_text="Participant who performed the action",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="mana.workshopparticipantaccount",
                    ),
                ),
                (
                    "workshop",
                    models.ForeignKey(
                        help_text="Workshop accessed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_logs",
                        to="mana.workshopactivity",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["participant", "workshop"],
                        name="mana_worksh_partici_61c56d_idx",
                    ),
                    models.Index(
                        fields=["action_type", "created_at"],
                        name="mana_worksh_action__b44cc4_idx",
                    ),
                ],
            },
        ),
    ]
