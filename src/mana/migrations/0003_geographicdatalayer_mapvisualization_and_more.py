# Generated by Django 4.2.21 on 2025-05-22 12:15

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("communities", "0002_initial"),
        ("mana", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="GeographicDataLayer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the geographic data layer", max_length=150
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the data layer and its purpose"
                    ),
                ),
                (
                    "layer_type",
                    models.CharField(
                        choices=[
                            ("point", "Point Data"),
                            ("line", "Line/Route Data"),
                            ("polygon", "Polygon/Area Data"),
                            ("raster", "Raster/Satellite Data"),
                            ("heatmap", "Heatmap Data"),
                            ("cluster", "Clustered Data"),
                        ],
                        help_text="Type of geographic data",
                        max_length=15,
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("field_survey", "Field Survey"),
                            ("satellite_imagery", "Satellite Imagery"),
                            ("government_data", "Government Dataset"),
                            ("community_mapping", "Community Mapping"),
                            ("third_party", "Third Party Source"),
                            ("mobile_app", "Mobile Application"),
                            ("gps_tracking", "GPS Tracking"),
                        ],
                        help_text="Source of the geographic data",
                        max_length=20,
                    ),
                ),
                (
                    "geojson_data",
                    models.JSONField(help_text="GeoJSON data for the layer"),
                ),
                (
                    "bounding_box",
                    models.JSONField(
                        blank=True,
                        help_text="Bounding box coordinates [min_lng, min_lat, max_lng, max_lat]",
                        null=True,
                    ),
                ),
                (
                    "center_point",
                    models.JSONField(
                        blank=True,
                        help_text="Center point coordinates [longitude, latitude]",
                        null=True,
                    ),
                ),
                (
                    "style_properties",
                    models.JSONField(
                        blank=True,
                        help_text="Styling properties for map display (colors, symbols, etc.)",
                        null=True,
                    ),
                ),
                (
                    "zoom_level_min",
                    models.IntegerField(
                        default=1, help_text="Minimum zoom level for layer visibility"
                    ),
                ),
                (
                    "zoom_level_max",
                    models.IntegerField(
                        default=18, help_text="Maximum zoom level for layer visibility"
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the layer is visible by default",
                    ),
                ),
                (
                    "opacity",
                    models.FloatField(
                        default=1.0,
                        help_text="Layer opacity (0.0 to 1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "data_collection_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the data was collected",
                        null=True,
                    ),
                ),
                (
                    "accuracy_meters",
                    models.FloatField(
                        blank=True, help_text="Estimated accuracy in meters", null=True
                    ),
                ),
                (
                    "coordinate_system",
                    models.CharField(
                        default="EPSG:4326",
                        help_text="Coordinate reference system (e.g., EPSG:4326)",
                        max_length=50,
                    ),
                ),
                (
                    "attribution",
                    models.TextField(
                        blank=True, help_text="Data attribution and source credits"
                    ),
                ),
                (
                    "license_info",
                    models.CharField(
                        blank=True,
                        help_text="License information for the data",
                        max_length=100,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this layer is publicly accessible",
                    ),
                ),
                (
                    "access_groups",
                    models.JSONField(
                        blank=True,
                        help_text="User groups that have access to this layer",
                        null=True,
                    ),
                ),
                (
                    "feature_count",
                    models.IntegerField(
                        default=0, help_text="Number of features in the layer"
                    ),
                ),
                (
                    "file_size_bytes",
                    models.BigIntegerField(
                        blank=True, help_text="Size of the data in bytes", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assessment this layer was created for (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geographic_layers",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        help_text="Community this layer relates to (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geographic_layers",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this layer",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_geo_layers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MapVisualization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the map visualization", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description and purpose of the visualization"
                    ),
                ),
                (
                    "visualization_type",
                    models.CharField(
                        choices=[
                            ("basic_map", "Basic Map"),
                            ("choropleth", "Choropleth Map"),
                            ("heat_map", "Heat Map"),
                            ("cluster_map", "Cluster Map"),
                            ("timeline_map", "Timeline Map"),
                            ("comparison_map", "Comparison Map"),
                            ("story_map", "Story Map"),
                        ],
                        help_text="Type of map visualization",
                        max_length=20,
                    ),
                ),
                (
                    "basemap_provider",
                    models.CharField(
                        choices=[
                            ("openstreetmap", "OpenStreetMap"),
                            ("satellite", "Satellite Imagery"),
                            ("terrain", "Terrain Map"),
                            ("dark", "Dark Theme"),
                            ("light", "Light Theme"),
                            ("custom", "Custom Basemap"),
                        ],
                        default="openstreetmap",
                        help_text="Base map provider",
                        max_length=20,
                    ),
                ),
                (
                    "initial_zoom",
                    models.IntegerField(
                        default=10,
                        help_text="Initial zoom level",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(18),
                        ],
                    ),
                ),
                (
                    "initial_center",
                    models.JSONField(
                        help_text="Initial center point [longitude, latitude]"
                    ),
                ),
                (
                    "bounding_box",
                    models.JSONField(
                        blank=True,
                        help_text="Map bounding box [min_lng, min_lat, max_lng, max_lat]",
                        null=True,
                    ),
                ),
                (
                    "color_scheme",
                    models.JSONField(
                        blank=True, help_text="Color scheme configuration", null=True
                    ),
                ),
                (
                    "legend_configuration",
                    models.JSONField(
                        blank=True, help_text="Legend display configuration", null=True
                    ),
                ),
                (
                    "popup_template",
                    models.TextField(
                        blank=True, help_text="HTML template for feature popups"
                    ),
                ),
                (
                    "filters_configuration",
                    models.JSONField(
                        blank=True,
                        help_text="Interactive filters configuration",
                        null=True,
                    ),
                ),
                (
                    "is_interactive",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the map allows user interaction",
                    ),
                ),
                (
                    "enable_clustering",
                    models.BooleanField(
                        default=False, help_text="Whether to enable point clustering"
                    ),
                ),
                (
                    "enable_search",
                    models.BooleanField(
                        default=False, help_text="Whether to enable location search"
                    ),
                ),
                (
                    "enable_drawing",
                    models.BooleanField(
                        default=False, help_text="Whether to enable drawing tools"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this visualization is publicly accessible",
                    ),
                ),
                (
                    "is_embedded",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this visualization can be embedded",
                    ),
                ),
                (
                    "share_token",
                    models.CharField(
                        blank=True,
                        help_text="Unique token for sharing the visualization",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "view_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times this visualization has been viewed",
                    ),
                ),
                (
                    "last_viewed",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time this visualization was viewed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assessment this visualization was created for",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="map_visualizations",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        help_text="Community this visualization focuses on",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="map_visualizations",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this visualization",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_visualizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "layers",
                    models.ManyToManyField(
                        help_text="Geographic layers included in this visualization",
                        related_name="visualizations",
                        to="mana.geographicdatalayer",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SpatialDataPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name or identifier of the point", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the point"),
                ),
                (
                    "point_type",
                    models.CharField(
                        choices=[
                            ("community_center", "Community Center"),
                            ("health_facility", "Health Facility"),
                            ("school", "Educational Facility"),
                            ("mosque", "Mosque/Religious Site"),
                            ("government_office", "Government Office"),
                            ("market", "Market/Commerce"),
                            ("infrastructure", "Infrastructure"),
                            ("natural_resource", "Natural Resource"),
                            ("cultural_site", "Cultural Site"),
                            ("hazard_area", "Hazard/Risk Area"),
                            ("project_site", "Project Location"),
                            ("assessment_point", "Assessment Point"),
                        ],
                        help_text="Type of spatial point",
                        max_length=25,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("planned", "Planned"),
                            ("under_construction", "Under Construction"),
                            ("abandoned", "Abandoned"),
                            ("needs_verification", "Needs Verification"),
                        ],
                        default="active",
                        help_text="Current status of the point",
                        max_length=20,
                    ),
                ),
                ("latitude", models.FloatField(help_text="Latitude coordinate")),
                ("longitude", models.FloatField(help_text="Longitude coordinate")),
                (
                    "elevation",
                    models.FloatField(
                        blank=True,
                        help_text="Elevation in meters above sea level",
                        null=True,
                    ),
                ),
                (
                    "accuracy_meters",
                    models.FloatField(
                        blank=True, help_text="GPS accuracy in meters", null=True
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        help_text="Additional attributes and properties (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "collected_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date and time when point was collected",
                    ),
                ),
                (
                    "collection_method",
                    models.CharField(
                        blank=True,
                        help_text="Method used to collect this point",
                        max_length=50,
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Whether this point has been verified"
                    ),
                ),
                (
                    "verification_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when point was verified", null=True
                    ),
                ),
                (
                    "photo_url",
                    models.URLField(
                        blank=True, help_text="URL to photo of the location"
                    ),
                ),
                (
                    "media_files",
                    models.JSONField(
                        blank=True,
                        help_text="References to associated media files",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assessment that identified this point",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="spatial_points",
                        to="mana.assessment",
                    ),
                ),
                (
                    "collected_by",
                    models.ForeignKey(
                        help_text="User who collected this point",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="collected_points",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="Community this point belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spatial_points",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "data_layer",
                    models.ForeignKey(
                        help_text="Geographic layer this point belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_points",
                        to="mana.geographicdatalayer",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who verified this point",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_points",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-collected_date"],
                "indexes": [
                    models.Index(
                        fields=["community", "point_type"],
                        name="mana_spatia_communi_8a49cd_idx",
                    ),
                    models.Index(
                        fields=["latitude", "longitude"],
                        name="mana_spatia_latitud_c64138_idx",
                    ),
                    models.Index(
                        fields=["data_layer", "status"],
                        name="mana_spatia_data_la_ecf7b1_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="geographicdatalayer",
            index=models.Index(
                fields=["community", "layer_type"],
                name="mana_geogra_communi_b06ebf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="geographicdatalayer",
            index=models.Index(
                fields=["assessment", "data_source"],
                name="mana_geogra_assessm_a1baf9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="geographicdatalayer",
            index=models.Index(
                fields=["is_public", "is_visible"],
                name="mana_geogra_is_publ_57f69a_idx",
            ),
        ),
    ]
