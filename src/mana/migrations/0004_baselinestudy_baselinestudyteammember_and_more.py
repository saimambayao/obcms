# Generated by Django 4.2.21 on 2025-05-22 12:18

import uuid

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("communities", "0002_initial"),
        ("mana", "0003_geographicdatalayer_mapvisualization_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="BaselineStudyTeamMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("principal_investigator", "Principal Investigator"),
                            ("co_investigator", "Co-Investigator"),
                            ("field_coordinator", "Field Coordinator"),
                            ("data_collector", "Data Collector"),
                            ("data_analyst", "Data Analyst"),
                            ("community_liaison", "Community Liaison"),
                            ("translator", "Translator/Interpreter"),
                            ("quality_assurance", "Quality Assurance"),
                            ("supervisor", "Field Supervisor"),
                        ],
                        help_text="Role of the team member in this study",
                        max_length=25,
                    ),
                ),
                (
                    "assigned_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when assigned to the study",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this team member is currently active",
                    ),
                ),
                (
                    "responsibilities",
                    models.TextField(
                        blank=True, help_text="Specific responsibilities and tasks"
                    ),
                ),
                (
                    "study",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mana.baselinestudy",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("study", "user", "role")},
            },
        ),
        migrations.AddField(
            model_name="baselinestudy",
            name="research_team",
            field=models.ManyToManyField(
                help_text="Research team members",
                related_name="baseline_study_teams",
                through="mana.BaselineStudyTeamMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="BaselineIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the indicator", max_length=200),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description and definition of the indicator"
                    ),
                ),
                (
                    "indicator_type",
                    models.CharField(
                        choices=[
                            ("demographic", "Demographic"),
                            ("economic", "Economic"),
                            ("social", "Social"),
                            ("infrastructure", "Infrastructure"),
                            ("health", "Health"),
                            ("education", "Education"),
                            ("governance", "Governance"),
                            ("environment", "Environment"),
                            ("cultural", "Cultural"),
                        ],
                        help_text="Type/category of indicator",
                        max_length=15,
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage"),
                            ("count", "Count/Number"),
                            ("currency", "Currency Value"),
                            ("rate", "Rate"),
                            ("index", "Index Score"),
                            ("binary", "Yes/No"),
                            ("categorical", "Categorical"),
                            ("text", "Text/Qualitative"),
                        ],
                        help_text="Data type of the indicator value",
                        max_length=15,
                    ),
                ),
                (
                    "unit_of_measurement",
                    models.CharField(
                        blank=True,
                        help_text="Unit of measurement (e.g., %, PHP, persons)",
                        max_length=50,
                    ),
                ),
                (
                    "baseline_value",
                    models.TextField(help_text="Baseline value of the indicator"),
                ),
                (
                    "target_value",
                    models.TextField(
                        blank=True, help_text="Target value for this indicator"
                    ),
                ),
                (
                    "calculation_method",
                    models.TextField(
                        blank=True, help_text="How the indicator is calculated"
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        help_text="Source of data for this indicator", max_length=100
                    ),
                ),
                (
                    "collection_frequency",
                    models.CharField(
                        blank=True,
                        help_text="How frequently this indicator should be collected",
                        max_length=50,
                    ),
                ),
                (
                    "confidence_level",
                    models.CharField(
                        blank=True,
                        help_text="Statistical confidence level",
                        max_length=20,
                    ),
                ),
                (
                    "margin_of_error",
                    models.CharField(
                        blank=True,
                        help_text="Margin of error for the indicator",
                        max_length=20,
                    ),
                ),
                (
                    "data_quality_notes",
                    models.TextField(
                        blank=True, help_text="Notes on data quality and reliability"
                    ),
                ),
                (
                    "disaggregation_categories",
                    models.JSONField(
                        blank=True,
                        help_text="Categories for disaggregating the indicator",
                        null=True,
                    ),
                ),
                (
                    "disaggregated_values",
                    models.JSONField(
                        blank=True,
                        help_text="Disaggregated values (JSON format)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this indicator",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "study",
                    models.ForeignKey(
                        help_text="Baseline study this indicator belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicators",
                        to="mana.baselinestudy",
                    ),
                ),
            ],
            options={
                "ordering": ["indicator_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="BaselineDataCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "collection_method",
                    models.CharField(
                        choices=[
                            ("household_survey", "Household Survey"),
                            ("key_informant_interview", "Key Informant Interview"),
                            ("focus_group_discussion", "Focus Group Discussion"),
                            ("community_meeting", "Community Meeting"),
                            ("observation", "Direct Observation"),
                            ("document_review", "Document Review"),
                            ("secondary_data", "Secondary Data Collection"),
                        ],
                        help_text="Data collection method used",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the data collection activity"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("quality_check", "Quality Check"),
                            ("validated", "Validated"),
                            ("rejected", "Rejected"),
                        ],
                        default="planned",
                        help_text="Status of the data collection",
                        max_length=15,
                    ),
                ),
                (
                    "planned_date",
                    models.DateField(help_text="Planned date for data collection"),
                ),
                (
                    "actual_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual date of data collection",
                        null=True,
                    ),
                ),
                (
                    "duration_hours",
                    models.FloatField(
                        blank=True,
                        help_text="Duration of data collection in hours",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Location where data was collected", max_length=200
                    ),
                ),
                (
                    "coordinates",
                    models.JSONField(
                        blank=True,
                        help_text="GPS coordinates of collection location",
                        null=True,
                    ),
                ),
                (
                    "target_participants",
                    models.IntegerField(help_text="Target number of participants"),
                ),
                (
                    "actual_participants",
                    models.IntegerField(
                        default=0, help_text="Actual number of participants"
                    ),
                ),
                (
                    "participant_demographics",
                    models.JSONField(
                        blank=True,
                        help_text="Demographic breakdown of participants",
                        null=True,
                    ),
                ),
                (
                    "data_collected",
                    models.JSONField(
                        blank=True, help_text="Collected data (JSON format)", null=True
                    ),
                ),
                (
                    "data_quality_notes",
                    models.TextField(
                        blank=True, help_text="Notes on data quality and issues"
                    ),
                ),
                (
                    "completion_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Completion rate percentage",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Whether the data has been validated"
                    ),
                ),
                (
                    "validation_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when data was validated", null=True
                    ),
                ),
                (
                    "validation_notes",
                    models.TextField(
                        blank=True, help_text="Validation notes and feedback"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this data collection record",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_baseline_collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "data_collectors",
                    models.ManyToManyField(
                        help_text="Team members who collected the data",
                        related_name="baseline_data_collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "study",
                    models.ForeignKey(
                        help_text="Baseline study this data collection belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_collection_activities",
                        to="mana.baselinestudy",
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        help_text="Supervisor for this data collection",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="supervised_baseline_collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who validated the data",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_baseline_data",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-planned_date"],
            },
        ),
        migrations.AddIndex(
            model_name="baselinestudy",
            index=models.Index(
                fields=["community", "study_type"],
                name="mana_baseli_communi_b9764f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="baselinestudy",
            index=models.Index(
                fields=["status", "planned_start_date"],
                name="mana_baseli_status_3006d7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="baselinestudy",
            index=models.Index(
                fields=["assessment", "status"], name="mana_baseli_assessm_f1d7fc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="baselineindicator",
            unique_together={("study", "name")},
        ),
        migrations.AddIndex(
            model_name="baselinedatacollection",
            index=models.Index(
                fields=["study", "collection_method"],
                name="mana_baseli_study_i_898caa_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="baselinedatacollection",
            index=models.Index(
                fields=["status", "planned_date"], name="mana_baseli_status_de3fe1_idx"
            ),
        ),
    ]
