# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0002_initial'),
        ('communities', '0001_initial'),
        ('coordination', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the assessment category', max_length=100, unique=True)),
                ('category_type', models.CharField(choices=[('needs_assessment', 'Needs Assessment'), ('baseline_study', 'Baseline Study'), ('impact_assessment', 'Impact Assessment'), ('situational_analysis', 'Situational Analysis'), ('community_mapping', 'Community Mapping')], help_text='Type of assessment category', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of the assessment category')),
                ('icon', models.CharField(blank=True, help_text='CSS icon class for this category', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Color code for this category (hex format)', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Assessment Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='NeedsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the needs category', max_length=100, unique=True)),
                ('sector', models.CharField(choices=[('education', 'Education'), ('economic_development', 'Economic Development'), ('social_development', 'Social Development'), ('cultural_development', 'Cultural Development'), ('infrastructure', 'Infrastructure'), ('health', 'Health'), ('governance', 'Governance'), ('environment', 'Environment'), ('security', 'Peace and Security')], help_text='Development sector this category belongs to', max_length=25)),
                ('description', models.TextField(help_text='Description of this needs category')),
                ('icon', models.CharField(blank=True, help_text='CSS icon class for this category', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Color code for this category (hex format)', max_length=7)),
                ('weight_factor', models.DecimalField(decimal_places=2, default=1.0, help_text='Weight factor for prioritization (0.1 to 2.0)', max_digits=3)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Needs Categories',
                'ordering': ['sector', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NeedsPrioritization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the prioritization exercise', max_length=200)),
                ('description', models.TextField(help_text='Description of the prioritization exercise')),
                ('method', models.CharField(choices=[('scoring_matrix', 'Scoring Matrix'), ('pairwise_comparison', 'Pairwise Comparison'), ('ranking', 'Simple Ranking'), ('mca', 'Multi-Criteria Analysis'), ('community_voting', 'Community Voting'), ('expert_panel', 'Expert Panel Review')], help_text='Method used for prioritization', max_length=20)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', help_text='Status of the prioritization exercise', max_length=15)),
                ('participant_count', models.IntegerField(help_text='Number of community participants')),
                ('stakeholder_groups', models.TextField(help_text='Description of stakeholder groups involved')),
                ('start_date', models.DateField(help_text='Start date of prioritization exercise')),
                ('end_date', models.DateField(help_text='End date of prioritization exercise')),
                ('prioritization_criteria', models.JSONField(help_text='Criteria used for prioritization (JSON format)')),
                ('results', models.JSONField(blank=True, help_text='Prioritization results (JSON format)', null=True)),
                ('top_priorities', models.TextField(blank=True, help_text='Summary of top priority needs identified')),
                ('recommendations', models.TextField(blank=True, help_text='Recommendations based on prioritization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='NeedsPrioritizationItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(help_text='Rank assigned in this prioritization')),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Score assigned in this prioritization', max_digits=5, null=True)),
                ('criteria_scores', models.JSONField(blank=True, help_text='Scores for individual criteria (JSON format)', null=True)),
                ('justification', models.TextField(blank=True, help_text='Justification for the ranking/scoring')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['prioritization', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='NeedVote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vote_weight', models.PositiveIntegerField(default=1, help_text='Vote weight (1-5 stars). Default is 1 for simple upvote.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional comment explaining why this need is important')),
                ('voted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address for fraud detection', null=True)),
            ],
            options={
                'verbose_name': 'Need Vote',
                'verbose_name_plural': 'Need Votes',
                'ordering': ['-voted_at'],
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the survey', max_length=150)),
                ('survey_type', models.CharField(choices=[('household', 'Household Survey'), ('community_leader', 'Community Leader Interview'), ('focus_group', 'Focus Group Discussion'), ('key_informant', 'Key Informant Interview'), ('observation', 'Direct Observation'), ('document_review', 'Document Review')], help_text='Type of survey', max_length=20)),
                ('description', models.TextField(help_text='Description of the survey')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', help_text='Current status of the survey', max_length=15)),
                ('target_respondents', models.IntegerField(help_text='Target number of respondents')),
                ('actual_respondents', models.IntegerField(default=0, help_text='Actual number of respondents')),
                ('start_date', models.DateField(help_text='Survey start date')),
                ('end_date', models.DateField(help_text='Survey end date')),
                ('questions_count', models.IntegerField(default=0, help_text='Number of questions in the survey')),
                ('estimated_duration_minutes', models.IntegerField(help_text='Estimated duration to complete survey (in minutes)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['assessment', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SurveyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question text')),
                ('question_type', models.CharField(choices=[('text', 'Text Response'), ('number', 'Numeric Response'), ('single_choice', 'Single Choice'), ('multiple_choice', 'Multiple Choice'), ('scale', 'Rating Scale'), ('yes_no', 'Yes/No'), ('date', 'Date'), ('location', 'Geographic Location')], help_text='Type of question', max_length=20)),
                ('order', models.IntegerField(help_text='Order of the question in the survey')),
                ('is_required', models.BooleanField(default=False, help_text='Whether this question is required')),
                ('choices', models.JSONField(blank=True, help_text='Choices for single/multiple choice questions (JSON format)', null=True)),
                ('scale_min', models.IntegerField(blank=True, help_text='Minimum value for scale questions', null=True)),
                ('scale_max', models.IntegerField(blank=True, help_text='Maximum value for scale questions', null=True)),
                ('help_text', models.TextField(blank=True, help_text='Additional help text for respondents')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['survey', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SurveyResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('respondent_name', models.CharField(blank=True, help_text='Name of the respondent (optional)', max_length=100)),
                ('respondent_contact', models.CharField(blank=True, help_text='Contact information of respondent (optional)', max_length=50)),
                ('demographic_info', models.JSONField(blank=True, help_text='Demographic information (JSON format)', null=True)),
                ('responses', models.JSONField(help_text='Survey responses (JSON format)')),
                ('collection_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when response was collected')),
                ('collection_location', models.CharField(blank=True, help_text='Location where response was collected', max_length=200)),
                ('is_validated', models.BooleanField(default=False, help_text='Whether this response has been validated')),
                ('validation_notes', models.TextField(blank=True, help_text='Notes from validation process')),
                ('validation_date', models.DateTimeField(blank=True, help_text='Date when response was validated', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-collection_date'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('view', 'Viewed Workshop'), ('submit', 'Submitted Response'), ('update', 'Updated Response'), ('unlock', 'Workshop Unlocked'), ('complete', 'Workshop Completed')], help_text='Type of action', max_length=15)),
                ('metadata', models.JSONField(blank=True, help_text='Additional metadata (IP address, user agent, etc.)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workshop_type', models.CharField(choices=[('workshop_1', 'Workshop 1: Understanding the Community Context'), ('workshop_2', 'Workshop 2: Community Aspirations and Priorities'), ('workshop_3', 'Workshop 3: Community Collaboration and Empowerment'), ('workshop_4', 'Workshop 4: Community Feedback on Existing Initiatives'), ('workshop_5', 'Workshop 5: OBCs Needs, Challenges, Factors, and Outcomes'), ('workshop_6', 'Workshop 6: Ways Forward and Action Planning')], help_text='Type of workshop activity', max_length=15)),
                ('title', models.CharField(help_text='Workshop title', max_length=250)),
                ('description', models.TextField(help_text='Detailed description of workshop objectives')),
                ('workshop_day', models.CharField(choices=[('day_1', 'Day 1: Arrival and Registration'), ('day_2', 'Day 2: Opening and Understanding Community Context'), ('day_3', 'Day 3: Aspirations, Priorities, Collaboration & Empowerment'), ('day_4', 'Day 4: Feedback, Challenges, Ways Forward & Closing'), ('day_5', 'Day 5: Departure')], help_text='Day of the 5-day MANA schedule', max_length=10)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', help_text='Current status of the workshop', max_length=15)),
                ('scheduled_date', models.DateField(help_text='Scheduled date for the workshop')),
                ('start_time', models.TimeField(help_text='Start time of the workshop')),
                ('end_time', models.TimeField(help_text='End time of the workshop')),
                ('duration_hours', models.FloatField(help_text='Duration in hours')),
                ('target_participants', models.IntegerField(help_text='Target number of participants')),
                ('actual_participants', models.IntegerField(default=0, help_text='Actual number of participants')),
                ('methodology', models.TextField(help_text='Workshop methodology and approach')),
                ('materials_needed', models.TextField(blank=True, help_text='Materials and supplies needed')),
                ('expected_outputs', models.TextField(help_text='Expected workshop outputs and deliverables')),
                ('key_findings', models.TextField(blank=True, help_text='Key findings from the workshop')),
                ('recommendations', models.TextField(blank=True, help_text='Recommendations emerging from workshop')),
                ('challenges_encountered', models.TextField(blank=True, help_text='Challenges encountered during workshop')),
                ('workshop_outputs', models.JSONField(blank=True, help_text='Detailed outputs from the workshop session', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['workshop_day', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('workshop_advanced', 'Workshop Advanced'), ('workshop_reminder', 'Workshop Reminder'), ('assessment_complete', 'Assessment Complete')], help_text='Type of notification', max_length=30)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message content')),
                ('is_read', models.BooleanField(default=False, help_text='Whether participant has read this notification')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Workshop Notification',
                'verbose_name_plural': 'Workshop Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('output_type', models.CharField(choices=[('community_map', 'Community Map'), ('timeline', 'Historical Timeline'), ('asset_inventory', 'Asset Inventory'), ('stakeholder_map', 'Stakeholder Map'), ('vision_statement', 'Vision Statement'), ('needs_assessment', 'Needs Assessment'), ('priority_list', 'Priority List'), ('organization_map', 'Organization Map'), ('collaboration_strategy', 'Collaboration Strategy'), ('program_feedback', 'Program Feedback'), ('problem_tree', 'Problem Tree'), ('solution_inventory', 'Solution Inventory'), ('action_plan', 'Action Plan'), ('meta_cards', 'Meta Cards'), ('flip_charts', 'Flip Charts'), ('photos', 'Photo Documentation'), ('audio_recording', 'Audio Recording'), ('other', 'Other Output')], help_text='Type of workshop output', max_length=30)),
                ('title', models.CharField(help_text='Title or name of the output', max_length=200)),
                ('description', models.TextField(help_text='Description of the output')),
                ('content', models.TextField(help_text='Content or details of the output')),
                ('file_path', models.CharField(blank=True, help_text='Path to associated file (if any)', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['workshop', 'output_type'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Participant name', max_length=100)),
                ('participant_type', models.CharField(choices=[('elder', 'Community Elder'), ('women_leader', 'Women Leader'), ('youth_leader', 'Youth Leader'), ('farmer', 'Farmer'), ('fisherfolk', 'Fisherfolk'), ('religious_leader', 'Religious Leader'), ('traditional_leader', 'Traditional Leader'), ('milf_representative', 'MILF Representative'), ('mnlf_representative', 'MNLF Representative'), ('business_leader', 'Business Leader'), ('teacher', 'Teacher/Educator'), ('health_worker', 'Health Worker'), ('other', 'Other')], help_text='Type/role of participant', max_length=20)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], help_text='Gender of participant', max_length=10)),
                ('age_group', models.CharField(choices=[('18-30', '18-30 years'), ('31-45', '31-45 years'), ('46-60', '46-60 years'), ('60+', '60+ years')], help_text='Age group of participant', max_length=15)),
                ('contact_info', models.CharField(blank=True, help_text='Contact information', max_length=100)),
                ('organization', models.CharField(blank=True, help_text='Organization or group represented', max_length=150)),
                ('attendance_status', models.CharField(choices=[('attended', 'Attended'), ('partial', 'Partial Attendance'), ('absent', 'Absent')], default='attended', help_text='Attendance status', max_length=15)),
                ('participation_notes', models.TextField(blank=True, help_text='Notes on participant contributions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['participant_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopParticipantAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveIntegerField(blank=True, help_text="Participant's age", null=True)),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], help_text="Participant's sex", max_length=10)),
                ('stakeholder_type', models.CharField(choices=[('elder', 'Community Elder'), ('women_leader', 'Women Leader'), ('youth_leader', 'Youth Leader'), ('farmer', 'Farmer'), ('fisherfolk', 'Fisherfolk'), ('religious_leader', 'Religious Leader'), ('traditional_leader', 'Traditional Leader'), ('milf_representative', 'MILF Representative'), ('mnlf_representative', 'MNLF Representative'), ('business_leader', 'Business Leader'), ('teacher', 'Teacher/Educator'), ('health_worker', 'Health Worker'), ('lgu_official', 'LGU Official'), ('ngo_representative', 'NGO Representative'), ('other', 'Other')], help_text='Type of stakeholder', max_length=20)),
                ('educational_level', models.CharField(blank=True, choices=[('graduate_degree', 'Graduate Degree Holder'), ('bachelors_degree', "Bachelor's Degree Holder"), ('college_level', 'College Level'), ('high_school_graduate', 'High School Graduate'), ('high_school_level', 'High School Level'), ('elementary_level', 'Elementary Level'), ('no_formal_education', 'No Formal Education')], help_text='Educational attainment', max_length=50)),
                ('arabic_education_level', models.CharField(blank=True, choices=[('kulliyah_graduate', 'Kulliyah Graduate'), ('thanawiyyah_level', 'Thanawiyyah Level'), ('mutawassitah_level', 'Mutawassitah Level'), ('ibtidaiyyah_level', 'Ibtidaiyyah Level'), ('tahfidz_graduate', 'Tahfidz Graduate/Level'), ('no_arabic_education', 'No Arabic Education')], help_text='Arabic/Islamic education level', max_length=50)),
                ('occupation', models.CharField(blank=True, choices=[('government_employee', 'Government Employee'), ('business_owner', 'Business Owner'), ('private_sector', 'Private Sector Employee'), ('ngo_worker', 'NGO Worker'), ('farmer', 'Farmer'), ('fisherfolk', 'Fisherfolk'), ('teacher', 'Teacher/Educator'), ('health_worker', 'Health Worker'), ('religious_worker', 'Religious Worker/Imam'), ('traditional_leader', 'Traditional/Community Leader'), ('student', 'Student'), ('self_employed', 'Self-Employed'), ('unemployed', 'Unemployed'), ('retired', 'Retired'), ('other', 'Other')], help_text='Current occupation', max_length=50)),
                ('office_business_name', models.CharField(blank=True, help_text='Name of office or business (optional)', max_length=200)),
                ('office_mandate', models.TextField(blank=True, help_text='Mandate of office (if government agency, optional)')),
                ('aware_of_mandate', models.BooleanField(default=False, help_text='Aware of the Mandate for Assistance to Other Bangsamoro Communities')),
                ('completed_workshops', models.JSONField(default=list, help_text="List of completed workshop types (e.g., ['workshop_1', 'workshop_2'])")),
                ('current_workshop', models.CharField(blank=True, help_text='Currently accessible workshop type', max_length=15)),
                ('consent_given', models.BooleanField(default=False, help_text='Whether participant gave consent')),
                ('consent_date', models.DateTimeField(blank=True, help_text='Date consent was given', null=True)),
                ('profile_completed', models.BooleanField(default=False, help_text='Whether profile is complete')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facilitator_advanced_to', models.CharField(default='workshop_1', help_text='Maximum workshop unlocked by facilitator for this participant', max_length=15)),
            ],
            options={
                'verbose_name': 'Workshop Participant Account',
                'verbose_name_plural': 'Workshop Participant Accounts',
                'ordering': ['province', 'user__last_name'],
                'permissions': [('can_access_regional_mana', 'Can access regional MANA workshops'), ('can_view_provincial_obc', 'Can view provincial OBC data'), ('can_facilitate_workshop', 'Can facilitate and manage MANA workshops')],
            },
        ),
        migrations.CreateModel(
            name='WorkshopQuestionDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workshop_type', models.CharField(choices=[('workshop_1', 'Workshop 1: Understanding the Community Context'), ('workshop_2', 'Workshop 2: Community Aspirations and Priorities'), ('workshop_3', 'Workshop 3: Community Collaboration and Empowerment'), ('workshop_4', 'Workshop 4: Community Feedback on Existing Initiatives'), ('workshop_5', 'Workshop 5: OBCs Needs, Challenges, Factors, and Outcomes'), ('workshop_6', 'Workshop 6: Ways Forward and Action Planning')], help_text='Workshop this question belongs to', max_length=20)),
                ('question_id', models.CharField(help_text='Stable identifier matching schema JSON', max_length=50)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within workshop')),
                ('version', models.CharField(default='v1', help_text='Schema version tag', max_length=20)),
                ('definition', models.JSONField(help_text='Full question payload including text, type, fields, and metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Workshop Question Definition',
                'verbose_name_plural': 'Workshop Question Definitions',
                'ordering': ['workshop_type', 'order', 'question_id'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.CharField(help_text='Question identifier from schema', max_length=50)),
                ('response_data', models.JSONField(help_text='Response content (structure depends on question type)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('validated', 'Validated')], default='draft', help_text='Response status', max_length=15)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When response was submitted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['workshop', 'participant', 'question_id'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_title', models.CharField(help_text='Title of the session', max_length=200)),
                ('session_type', models.CharField(choices=[('opening', 'Opening Session'), ('presentation', 'Presentation'), ('group_work', 'Group Work'), ('plenary', 'Plenary Discussion'), ('breakout', 'Breakout Session'), ('synthesis', 'Synthesis Session'), ('closing', 'Closing Session')], help_text='Type of session', max_length=15)),
                ('session_order', models.IntegerField(help_text='Order of session within workshop')),
                ('start_time', models.TimeField(help_text='Session start time')),
                ('end_time', models.TimeField(help_text='Session end time')),
                ('objectives', models.TextField(help_text='Session objectives')),
                ('methodology', models.TextField(help_text='Session methodology and activities')),
                ('outputs', models.TextField(blank=True, help_text='Session outputs and results')),
                ('notes', models.TextField(blank=True, help_text='Session notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['workshop', 'session_order'],
            },
        ),
        migrations.CreateModel(
            name='WorkshopSynthesis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt_template', models.TextField(help_text='Prompt template used for synthesis')),
                ('filters', models.JSONField(blank=True, help_text='Filters applied (province, stakeholder type, etc.)', null=True)),
                ('synthesis_text', models.TextField(blank=True, help_text='Generated synthesis content')),
                ('key_themes', models.JSONField(blank=True, help_text='Extracted key themes and patterns', null=True)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('reviewed', 'Reviewed'), ('approved', 'Approved')], default='queued', help_text='Synthesis status', max_length=15)),
                ('provider', models.CharField(blank=True, help_text='AI provider used (e.g., OpenAI, Anthropic)', max_length=50)),
                ('model', models.CharField(blank=True, help_text='Model used (e.g., gpt-4, claude-3)', max_length=50)),
                ('tokens_used', models.IntegerField(blank=True, help_text='Tokens consumed', null=True)),
                ('processing_time_seconds', models.FloatField(blank=True, help_text='Processing time in seconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if failed')),
                ('review_notes', models.TextField(blank=True, help_text='Review notes from facilitator')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When synthesis was approved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Workshop Synthesis',
                'verbose_name_plural': 'Workshop Syntheses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the assessment', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the assessment')),
                ('objectives', models.TextField(help_text='Objectives and goals of the assessment')),
                ('assessment_level', models.CharField(choices=[('regional', 'Regional Level'), ('provincial', 'Provincial Level'), ('city_municipal', 'City/Municipal Level'), ('barangay', 'Barangay Level'), ('community', 'Community Level')], default='community', help_text='Level at which the assessment is conducted', max_length=20)),
                ('primary_methodology', models.CharField(choices=[('desk_review', 'Desk Review/Research'), ('survey', 'Survey'), ('kii', 'Key Informant Interview (KII)'), ('workshop', 'FGD/Workshops'), ('participatory', 'Participatory Assessment'), ('observation', 'Direct Observation'), ('mixed', 'Mixed Methods'), ('other', 'Other Methodologies')], default='survey', help_text='Primary methodology used in the assessment', max_length=20)),
                ('secondary_methodologies', models.JSONField(blank=True, help_text='List of secondary methodologies used', null=True)),
                ('location_details', models.TextField(blank=True, help_text='Additional location details and coverage area')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('preparation', 'Preparation'), ('data_collection', 'Data Collection'), ('analysis', 'Analysis'), ('reporting', 'Reporting'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', help_text='Current status of the assessment', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of the assessment', max_length=10)),
                ('planned_start_date', models.DateField(help_text='Planned start date for the assessment')),
                ('planned_end_date', models.DateField(help_text='Planned completion date for the assessment')),
                ('actual_start_date', models.DateField(blank=True, help_text='Actual start date of the assessment', null=True)),
                ('actual_end_date', models.DateField(blank=True, help_text='Actual completion date of the assessment', null=True)),
                ('estimated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated budget for the assessment', max_digits=12, null=True)),
                ('actual_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Actual budget spent on the assessment', max_digits=12, null=True)),
                ('key_findings', models.TextField(blank=True, help_text='Key findings from the assessment')),
                ('recommendations', models.TextField(blank=True, help_text='Recommendations based on assessment results')),
                ('impact_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], help_text='Level of impact identified', max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Completion percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('barangay', models.ForeignKey(blank=True, help_text='Barangay covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.barangay')),
                ('community', models.ForeignKey(blank=True, help_text='Community being assessed (for community-level assessments)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this assessment', on_delete=django.db.models.deletion.PROTECT, related_name='created_assessments', to=settings.AUTH_USER_MODEL)),
                ('lead_assessor', models.ForeignKey(help_text='Lead person responsible for the assessment', on_delete=django.db.models.deletion.PROTECT, related_name='led_assessments', to=settings.AUTH_USER_MODEL)),
                ('municipality', models.ForeignKey(blank=True, help_text='Municipality or city covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.municipality')),
                ('province', models.ForeignKey(blank=True, help_text='Province being assessed (for regional/provincial assessments)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='common.province')),
                ('region', models.ForeignKey(blank=True, help_text='Region covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.region')),
                ('category', models.ForeignKey(help_text='Category of assessment', on_delete=django.db.models.deletion.PROTECT, to='mana.assessmentcategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentTeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('team_leader', 'Team Leader/Executive Director'), ('deputy_leader', 'Deputy Team Leader/DMO IV'), ('facilitator', 'Facilitator (DMO/CDO)'), ('documenter', 'Documenter'), ('info_analyst', 'Information System Analyst'), ('secretariat', 'Secretariat/Admin Support'), ('data_collector', 'Data Collector'), ('technical_expert', 'Technical Expert'), ('observer', 'Observer')], help_text='Role of the team member in this assessment', max_length=20)),
                ('assigned_date', models.DateField(default=django.utils.timezone.now, help_text='Date when assigned to the assessment')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this team member is currently active')),
                ('notes', models.TextField(blank=True, help_text="Additional notes about this team member's involvement")),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mana.assessment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='assessment',
            name='team_members',
            field=models.ManyToManyField(blank=True, help_text='Team members involved in the assessment', related_name='assessment_teams', through='mana.AssessmentTeamMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BaselineStudy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the baseline study', max_length=250)),
                ('study_type', models.CharField(choices=[('comprehensive', 'Comprehensive Baseline'), ('socio_economic', 'Socio-Economic Study'), ('demographic', 'Demographic Study'), ('livelihood', 'Livelihood Assessment'), ('infrastructure', 'Infrastructure Assessment'), ('service_delivery', 'Service Delivery Assessment'), ('governance', 'Governance Assessment'), ('cultural', 'Cultural Assessment'), ('environmental', 'Environmental Assessment')], help_text='Type of baseline study', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the study')),
                ('objectives', models.TextField(help_text='Study objectives and research questions')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('design', 'Study Design'), ('data_collection', 'Data Collection'), ('analysis', 'Data Analysis'), ('reporting', 'Report Writing'), ('review', 'Under Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', help_text='Current status of the study', max_length=15)),
                ('methodology', models.CharField(choices=[('quantitative', 'Quantitative'), ('qualitative', 'Qualitative'), ('mixed_methods', 'Mixed Methods'), ('participatory', 'Participatory Research'), ('rapid_assessment', 'Rapid Assessment')], help_text='Research methodology used', max_length=20)),
                ('planned_start_date', models.DateField(help_text='Planned start date for the study')),
                ('planned_end_date', models.DateField(help_text='Planned completion date for the study')),
                ('actual_start_date', models.DateField(blank=True, help_text='Actual start date of the study', null=True)),
                ('actual_end_date', models.DateField(blank=True, help_text='Actual completion date of the study', null=True)),
                ('sample_size_target', models.IntegerField(blank=True, help_text='Target sample size for the study', null=True)),
                ('sample_size_actual', models.IntegerField(default=0, help_text='Actual sample size achieved')),
                ('sampling_method', models.CharField(blank=True, help_text='Sampling method used', max_length=100)),
                ('data_collection_methods', models.TextField(help_text='Description of data collection methods')),
                ('study_domains', models.JSONField(help_text='Study domains and indicators (JSON format)')),
                ('geographic_coverage', models.TextField(help_text='Geographic coverage of the study')),
                ('target_population', models.TextField(help_text='Description of target population')),
                ('estimated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated budget for the study', max_digits=12, null=True)),
                ('actual_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Actual budget spent', max_digits=12, null=True)),
                ('funding_source', models.CharField(blank=True, help_text='Funding source for the study', max_length=150)),
                ('key_findings', models.TextField(blank=True, help_text='Summary of key findings')),
                ('baseline_indicators', models.JSONField(blank=True, help_text='Baseline indicator values (JSON format)', null=True)),
                ('recommendations', models.TextField(blank=True, help_text='Study recommendations')),
                ('limitations', models.TextField(blank=True, help_text='Study limitations and constraints')),
                ('response_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Response rate percentage', max_digits=5, null=True)),
                ('data_quality_score', models.IntegerField(blank=True, choices=[(1, '1/10'), (2, '2/10'), (3, '3/10'), (4, '4/10'), (5, '5/10'), (6, '6/10'), (7, '7/10'), (8, '8/10'), (9, '9/10'), (10, '10/10')], help_text='Data quality score (1-10)', null=True)),
                ('study_protocol', models.TextField(blank=True, help_text='Study protocol and procedures')),
                ('data_analysis_plan', models.TextField(blank=True, help_text='Data analysis plan and methods')),
                ('ethics_approval', models.BooleanField(default=False, help_text='Whether ethics approval was obtained')),
                ('ethics_approval_number', models.CharField(blank=True, help_text='Ethics approval reference number', max_length=50)),
                ('consent_procedures', models.TextField(blank=True, help_text='Informed consent procedures')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Parent assessment this baseline study belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='baseline_studies', to='mana.assessment')),
                ('community', models.ForeignKey(help_text='Community being studied', on_delete=django.db.models.deletion.CASCADE, related_name='baseline_studies', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this study', on_delete=django.db.models.deletion.PROTECT, related_name='created_baseline_studies', to=settings.AUTH_USER_MODEL)),
                ('principal_investigator', models.ForeignKey(help_text='Principal investigator for the study', on_delete=django.db.models.deletion.PROTECT, related_name='led_baseline_studies', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BaselineIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the indicator', max_length=200)),
                ('description', models.TextField(help_text='Description and definition of the indicator')),
                ('indicator_type', models.CharField(choices=[('demographic', 'Demographic'), ('economic', 'Economic'), ('social', 'Social'), ('infrastructure', 'Infrastructure'), ('health', 'Health'), ('education', 'Education'), ('governance', 'Governance'), ('environment', 'Environment'), ('cultural', 'Cultural')], help_text='Type/category of indicator', max_length=15)),
                ('data_type', models.CharField(choices=[('percentage', 'Percentage'), ('count', 'Count/Number'), ('currency', 'Currency Value'), ('rate', 'Rate'), ('index', 'Index Score'), ('binary', 'Yes/No'), ('categorical', 'Categorical'), ('text', 'Text/Qualitative')], help_text='Data type of the indicator value', max_length=15)),
                ('unit_of_measurement', models.CharField(blank=True, help_text='Unit of measurement (e.g., %, PHP, persons)', max_length=50)),
                ('baseline_value', models.TextField(help_text='Baseline value of the indicator')),
                ('target_value', models.TextField(blank=True, help_text='Target value for this indicator')),
                ('calculation_method', models.TextField(blank=True, help_text='How the indicator is calculated')),
                ('data_source', models.CharField(help_text='Source of data for this indicator', max_length=100)),
                ('collection_frequency', models.CharField(blank=True, help_text='How frequently this indicator should be collected', max_length=50)),
                ('confidence_level', models.CharField(blank=True, help_text='Statistical confidence level', max_length=20)),
                ('margin_of_error', models.CharField(blank=True, help_text='Margin of error for the indicator', max_length=20)),
                ('data_quality_notes', models.TextField(blank=True, help_text='Notes on data quality and reliability')),
                ('disaggregation_categories', models.JSONField(blank=True, help_text='Categories for disaggregating the indicator', null=True)),
                ('disaggregated_values', models.JSONField(blank=True, help_text='Disaggregated values (JSON format)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this indicator', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('study', models.ForeignKey(help_text='Baseline study this indicator belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='indicators', to='mana.baselinestudy')),
            ],
            options={
                'ordering': ['indicator_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BaselineDataCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_method', models.CharField(choices=[('household_survey', 'Household Survey'), ('key_informant_interview', 'Key Informant Interview'), ('focus_group_discussion', 'Focus Group Discussion'), ('community_meeting', 'Community Meeting'), ('observation', 'Direct Observation'), ('document_review', 'Document Review'), ('secondary_data', 'Secondary Data Collection')], help_text='Data collection method used', max_length=25)),
                ('description', models.TextField(help_text='Description of the data collection activity')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('quality_check', 'Quality Check'), ('validated', 'Validated'), ('rejected', 'Rejected')], default='planned', help_text='Status of the data collection', max_length=15)),
                ('planned_date', models.DateField(help_text='Planned date for data collection')),
                ('actual_date', models.DateField(blank=True, help_text='Actual date of data collection', null=True)),
                ('duration_hours', models.FloatField(blank=True, help_text='Duration of data collection in hours', null=True)),
                ('location', models.CharField(help_text='Location where data was collected', max_length=200)),
                ('coordinates', models.JSONField(blank=True, help_text='GPS coordinates of collection location', null=True)),
                ('target_participants', models.IntegerField(help_text='Target number of participants')),
                ('actual_participants', models.IntegerField(default=0, help_text='Actual number of participants')),
                ('participant_demographics', models.JSONField(blank=True, help_text='Demographic breakdown of participants', null=True)),
                ('data_collected', models.JSONField(blank=True, help_text='Collected data (JSON format)', null=True)),
                ('data_quality_notes', models.TextField(blank=True, help_text='Notes on data quality and issues')),
                ('completion_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Completion rate percentage', max_digits=5, null=True)),
                ('is_validated', models.BooleanField(default=False, help_text='Whether the data has been validated')),
                ('validation_date', models.DateTimeField(blank=True, help_text='Date when data was validated', null=True)),
                ('validation_notes', models.TextField(blank=True, help_text='Validation notes and feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this data collection record', on_delete=django.db.models.deletion.PROTECT, related_name='created_baseline_collections', to=settings.AUTH_USER_MODEL)),
                ('data_collectors', models.ManyToManyField(help_text='Team members who collected the data', related_name='baseline_data_collections', to=settings.AUTH_USER_MODEL)),
                ('supervisor', models.ForeignKey(help_text='Supervisor for this data collection', on_delete=django.db.models.deletion.PROTECT, related_name='supervised_baseline_collections', to=settings.AUTH_USER_MODEL)),
                ('validated_by', models.ForeignKey(blank=True, help_text='User who validated the data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_baseline_data', to=settings.AUTH_USER_MODEL)),
                ('study', models.ForeignKey(help_text='Baseline study this data collection belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='data_collection_activities', to='mana.baselinestudy')),
            ],
            options={
                'ordering': ['-planned_date'],
            },
        ),
        migrations.CreateModel(
            name='BaselineStudyTeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('principal_investigator', 'Principal Investigator'), ('co_investigator', 'Co-Investigator'), ('field_coordinator', 'Field Coordinator'), ('data_collector', 'Data Collector'), ('data_analyst', 'Data Analyst'), ('community_liaison', 'Community Liaison'), ('translator', 'Translator/Interpreter'), ('quality_assurance', 'Quality Assurance'), ('supervisor', 'Field Supervisor')], help_text='Role of the team member in this study', max_length=25)),
                ('assigned_date', models.DateField(default=django.utils.timezone.now, help_text='Date when assigned to the study')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this team member is currently active')),
                ('responsibilities', models.TextField(blank=True, help_text='Specific responsibilities and tasks')),
                ('study', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mana.baselinestudy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='baselinestudy',
            name='research_team',
            field=models.ManyToManyField(help_text='Research team members', related_name='baseline_study_teams', through='mana.BaselineStudyTeamMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CommunityAspirations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('poverty_eradication', 'Poverty Eradication'), ('infrastructure', 'Infrastructure Development'), ('livelihood', 'Livelihood Programs'), ('education', 'Education Enhancement'), ('healthcare', 'Healthcare Access'), ('cultural_preservation', 'Cultural Preservation'), ('peace_security', 'Peace and Security'), ('governance', 'Governance Improvement'), ('environment', 'Environmental Protection'), ('other', 'Other Aspirations')], help_text='Category of aspiration', max_length=25)),
                ('title', models.CharField(help_text='Brief title of the aspiration', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the aspiration')),
                ('priority_level', models.CharField(choices=[('critical', 'Critical Priority'), ('high', 'High Priority'), ('medium', 'Medium Priority'), ('low', 'Low Priority')], default='medium', help_text='Priority level of this aspiration', max_length=10)),
                ('key_aspirations', models.TextField(blank=True, help_text='Key community aspirations (poverty eradication, improved services, etc.)')),
                ('infrastructure_priorities', models.TextField(blank=True, help_text='Infrastructure development priorities (roads, water, health, schools)')),
                ('livelihood_program_priorities', models.TextField(blank=True, help_text='Livelihood program priorities (agriculture, fisheries, SMEs, Halal, ecotourism)')),
                ('education_priorities', models.TextField(blank=True, help_text='Education priorities (scholarships, skills training, Madrasah support)')),
                ('healthcare_priorities', models.TextField(blank=True, help_text='Healthcare access priorities')),
                ('cultural_preservation_priorities', models.TextField(blank=True, help_text='Cultural preservation initiative priorities')),
                ('peace_security_priorities', models.TextField(blank=True, help_text='Peace and order/conflict resolution priorities')),
                ('specific_project_proposals', models.TextField(blank=True, help_text='Specific project proposals/ideas from the community')),
                ('estimated_beneficiaries', models.PositiveIntegerField(blank=True, help_text='Estimated number of beneficiaries', null=True)),
                ('estimated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated budget required', max_digits=15, null=True)),
                ('proposed_timeline', models.CharField(blank=True, help_text='Proposed timeline for implementation', max_length=100)),
                ('potential_partners', models.TextField(blank=True, help_text='Potential partners for implementation')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this aspiration is still active/relevant')),
                ('implementation_status', models.CharField(choices=[('identified', 'Identified'), ('planning', 'Under Planning'), ('funded', 'Funded'), ('implementing', 'Being Implemented'), ('completed', 'Completed'), ('deferred', 'Deferred')], default='identified', help_text='Implementation status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment that captured this aspiration', on_delete=django.db.models.deletion.CASCADE, related_name='community_aspirations', to='mana.assessment')),
                ('captured_by', models.ForeignKey(help_text='User who captured this aspiration', on_delete=django.db.models.deletion.PROTECT, related_name='captured_aspirations', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(help_text='OBC community with this aspiration', on_delete=django.db.models.deletion.CASCADE, related_name='aspirations', to='communities.obccommunity')),
            ],
            options={
                'verbose_name': 'Community Aspiration',
                'verbose_name_plural': 'Community Aspirations',
                'ordering': ['-priority_level', 'category', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CommunityChallenges',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('governance_policy', 'Governance and Policy'), ('public_services', 'Access to Public Services'), ('land_ownership', 'Land Ownership and Security'), ('economic', 'Economic Disparities'), ('social_conflict', 'Social Instability and Conflict'), ('cultural', 'Cultural Miscommunication'), ('gender', 'Gender Inequality'), ('substance_abuse', 'Substance Abuse'), ('financial_fraud', 'Investment Scams and Fraud'), ('environmental', 'Environmental Degradation'), ('other', 'Other Challenges')], help_text='Category of challenge', max_length=20)),
                ('title', models.CharField(help_text='Brief title of the challenge', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the challenge')),
                ('impact_description', models.TextField(help_text='Impact of this challenge on the community')),
                ('affected_population', models.PositiveIntegerField(blank=True, help_text='Number of people affected by this challenge', null=True)),
                ('severity_level', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Severity level (1=Low, 5=Critical)')),
                ('governance_policy_challenges', models.TextField(blank=True, help_text='Marginalization, lack of representation issues')),
                ('access_public_services_challenges', models.TextField(blank=True, help_text='Challenges in accessing education, health, infrastructure')),
                ('land_ownership_security_issues', models.TextField(blank=True, help_text='Land ownership and security challenges')),
                ('economic_disparities', models.TextField(blank=True, help_text='Poverty, limited employment, economic challenges')),
                ('social_instability_conflict', models.TextField(blank=True, help_text='Rido, security issues, social conflicts')),
                ('cultural_miscommunication', models.TextField(blank=True, help_text='Cultural miscommunication challenges')),
                ('gender_inequality_issues', models.TextField(blank=True, help_text='Gender inequality, early marriage issues')),
                ('substance_abuse_issues', models.TextField(blank=True, help_text='Drug use, substance abuse issues')),
                ('investment_scam_issues', models.TextField(blank=True, help_text='Investment scams and financial fraud issues')),
                ('environmental_degradation', models.TextField(blank=True, help_text='Mining, illegal fishing, environmental issues')),
                ('other_challenges', models.TextField(blank=True, help_text='Other specific challenges (ISAL education, Halal industry, etc.)')),
                ('challenges_impact', models.TextField(blank=True, help_text='Impact of these challenges on the community')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this challenge is currently active')),
                ('resolution_efforts', models.TextField(blank=True, help_text='Efforts being made to address this challenge')),
                ('support_needed', models.TextField(blank=True, help_text='Support needed to address this challenge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment that identified this challenge', on_delete=django.db.models.deletion.CASCADE, related_name='identified_challenges', to='mana.assessment')),
                ('community', models.ForeignKey(help_text='OBC community facing this challenge', on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='communities.obccommunity')),
                ('identified_by', models.ForeignKey(help_text='User who identified this challenge', on_delete=django.db.models.deletion.PROTECT, related_name='identified_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Challenge',
                'verbose_name_plural': 'Community Challenges',
                'ordering': ['-severity_level', 'category', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CommunityGovernance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formal_political_representation', models.TextField(blank=True, help_text='Presence in Barangay Council, LGU representation')),
                ('informal_leadership_structures', models.TextField(blank=True, help_text='Description of informal leadership structures')),
                ('community_organizations', models.TextField(blank=True, help_text='Community organizations/associations (name, focus, contact)')),
                ('relationship_with_lgu', models.CharField(blank=True, choices=[('collaborative', 'Collaborative'), ('strained', 'Strained'), ('minimal', 'Minimal'), ('good', 'Good'), ('excellent', 'Excellent')], help_text='Relationship with LGU', max_length=20)),
                ('participation_local_governance', models.TextField(blank=True, help_text='Participation in local governance and planning')),
                ('access_government_info', models.TextField(blank=True, help_text='Access to information on government programs')),
                ('key_community_leaders', models.TextField(blank=True, help_text='Key community leader(s)/focal person(s) with contact details')),
                ('relevant_lgu_officials', models.TextField(blank=True, help_text='Relevant LGU official(s) and their contact information')),
                ('community_leader', models.CharField(blank=True, help_text='Name of the primary community leader', max_length=255)),
                ('leader_contact', models.CharField(blank=True, help_text='Contact information for community leader', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment that created/updated this profile', on_delete=django.db.models.deletion.CASCADE, related_name='governance_profiles', to='mana.assessment')),
                ('community', models.OneToOneField(help_text='OBC community this governance profile belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='governance_profile', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this profile', on_delete=django.db.models.deletion.PROTECT, related_name='created_governance_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Governance Profile',
                'verbose_name_plural': 'Community Governance Profiles',
                'ordering': ['community__barangay__name'],
            },
        ),
        migrations.CreateModel(
            name='CommunityProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brief_historical_background', models.TextField(blank=True, help_text='Key historical narratives of the community in the area')),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the community was established', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)])),
                ('origin_story', models.TextField(blank=True, help_text='Story of how the community was established')),
                ('migration_history', models.TextField(blank=True, help_text='Migration history and patterns')),
                ('cultural_practices_traditions', models.TextField(blank=True, help_text='Notable customs, traditions, festivals')),
                ('religious_affiliation', models.TextField(blank=True, help_text='Religious affiliation and specific practices')),
                ('traditional_leaders_role', models.TextField(blank=True, help_text='Role of traditional leaders (Imams, Elders, Chieftains)')),
                ('cultural_preservation_efforts', models.TextField(blank=True, help_text='Existing cultural preservation efforts')),
                ('needs_assessment_date', models.DateField(blank=True, help_text='Date of last needs assessment', null=True)),
                ('key_findings_last_assessment', models.TextField(blank=True, help_text='Key findings from last needs assessment')),
                ('assessment_data_sources', models.TextField(blank=True, help_text='Data sources (community consultations, surveys, LGU data)')),
                ('identified_gaps', models.TextField(blank=True, help_text='Identified gaps based on assessments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment that created/updated this profile', on_delete=django.db.models.deletion.CASCADE, related_name='community_profiles', to='mana.assessment')),
                ('community', models.OneToOneField(help_text='OBC community this profile belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='community_profile', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this profile', on_delete=django.db.models.deletion.PROTECT, related_name='created_community_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Community Cultural Profile',
                'verbose_name_plural': 'Community Cultural Profiles',
                'ordering': ['community__barangay__name'],
            },
        ),
        migrations.CreateModel(
            name='FacilitatorAssessmentAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(help_text='Assessment the facilitator is assigned to', on_delete=django.db.models.deletion.CASCADE, related_name='facilitator_assignments', to='mana.assessment')),
                ('assigned_by', models.ForeignKey(help_text='Staff/superuser who made this assignment', on_delete=django.db.models.deletion.PROTECT, related_name='facilitator_assignments_created', to=settings.AUTH_USER_MODEL)),
                ('facilitator', models.ForeignKey(help_text='Facilitator user assigned to this assessment', on_delete=django.db.models.deletion.CASCADE, related_name='facilitator_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Facilitator Assessment Assignment',
                'verbose_name_plural': 'Facilitator Assessment Assignments',
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='MANAReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Report title', max_length=300)),
                ('report_status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('validation', 'Validation'), ('final', 'Final Report'), ('submitted', 'Submitted')], default='draft', help_text='Current status of the report', max_length=15)),
                ('executive_summary', models.TextField(blank=True, help_text='Executive summary including key findings and recommendations')),
                ('context_background', models.TextField(blank=True, help_text='Legal/policy frameworks and community profile')),
                ('methodology', models.TextField(blank=True, help_text='Data collection methods and analytical framework')),
                ('social_development_findings', models.TextField(blank=True, help_text='Education, health, social protection findings')),
                ('economic_development_findings', models.TextField(blank=True, help_text='Livelihoods, infrastructure, financial inclusion findings')),
                ('cultural_development_findings', models.TextField(blank=True, help_text='Cultural practices, religious institutions, arts findings')),
                ('rights_protection_findings', models.TextField(blank=True, help_text='Governance, access to justice, land rights findings')),
                ('priority_issues', models.TextField(blank=True, help_text='Prioritized needs and justification')),
                ('policy_recommendations', models.TextField(blank=True, help_text='Policy recommendations for each priority')),
                ('program_development_opportunities', models.TextField(blank=True, help_text='Program development opportunities')),
                ('strategic_approaches', models.TextField(blank=True, help_text='Strategic approaches and timeframes')),
                ('stakeholder_roles', models.TextField(blank=True, help_text='Stakeholder roles and responsibilities')),
                ('resource_requirements', models.TextField(blank=True, help_text='Resource requirements and sources')),
                ('monitoring_evaluation', models.TextField(blank=True, help_text='Monitoring and evaluation mechanisms')),
                ('validation_date', models.DateField(blank=True, help_text='Date of validation workshop', null=True)),
                ('validation_participants', models.TextField(blank=True, help_text='Validation workshop participants')),
                ('validation_feedback', models.TextField(blank=True, help_text='Feedback from validation workshop')),
                ('submission_date', models.DateField(blank=True, help_text='Date submitted to Office of Chief Minister', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.OneToOneField(help_text='Assessment this report belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='mana_report', to='mana.assessment')),
                ('created_by', models.ForeignKey(help_text='User who created this report', on_delete=django.db.models.deletion.PROTECT, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
                ('submitted_by', models.ForeignKey(blank=True, help_text='User who submitted the report', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MANA Report',
                'verbose_name_plural': 'MANA Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MappingActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the mapping activity', max_length=150)),
                ('mapping_type', models.CharField(choices=[('resource_mapping', 'Resource Mapping'), ('infrastructure_mapping', 'Infrastructure Mapping'), ('hazard_mapping', 'Hazard and Risk Mapping'), ('social_mapping', 'Social Mapping'), ('economic_mapping', 'Economic Activity Mapping'), ('cultural_mapping', 'Cultural Site Mapping')], help_text='Type of mapping activity', max_length=25)),
                ('description', models.TextField(help_text='Description of the mapping activity')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', help_text='Current status of the mapping activity', max_length=15)),
                ('coverage_area', models.TextField(help_text='Description of the geographic area covered')),
                ('coordinates', models.JSONField(blank=True, help_text='Geographic coordinates (GeoJSON format)', null=True)),
                ('start_date', models.DateField(help_text='Start date of mapping activity')),
                ('end_date', models.DateField(help_text='End date of mapping activity')),
                ('methodology', models.TextField(help_text='Methodology used for mapping')),
                ('tools_used', models.TextField(blank=True, help_text='Tools and equipment used for mapping')),
                ('findings', models.TextField(blank=True, help_text='Key findings from the mapping activity')),
                ('map_outputs', models.JSONField(blank=True, help_text='References to map outputs and visualizations', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(help_text='Assessment this mapping activity belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='mapping_activities', to='mana.assessment')),
                ('created_by', models.ForeignKey(help_text='User who created this mapping activity', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('mapping_team', models.ManyToManyField(help_text='Team members involved in mapping', related_name='mapping_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Mapping Activities',
                'ordering': ['assessment', 'start_date'],
            },
        ),
        migrations.CreateModel(
            name='Need',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title/name of the identified need', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the need')),
                ('affected_population', models.IntegerField(help_text='Number of people affected by this need')),
                ('affected_households', models.IntegerField(blank=True, help_text='Number of households affected', null=True)),
                ('geographic_scope', models.TextField(help_text='Geographic scope/area affected')),
                ('urgency_level', models.CharField(choices=[('immediate', 'Immediate (Within 1 month)'), ('short_term', 'Short-term (1-6 months)'), ('medium_term', 'Medium-term (6-12 months)'), ('long_term', 'Long-term (1+ years)')], help_text='How urgent is this need', max_length=15)),
                ('impact_severity', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], help_text='Impact severity on community (1=Low, 5=High)')),
                ('feasibility', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], help_text='Feasibility of addressing this need', max_length=10)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost to address this need', max_digits=15, null=True)),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('validated', 'Validated'), ('prioritized', 'Prioritized'), ('planned', 'Planned for Implementation'), ('in_progress', 'Implementation in Progress'), ('completed', 'Completed'), ('deferred', 'Deferred'), ('rejected', 'Rejected')], default='identified', help_text='Current status of this need', max_length=15)),
                ('priority_score', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated priority score', max_digits=5, null=True)),
                ('priority_rank', models.IntegerField(blank=True, help_text='Priority ranking within community', null=True)),
                ('evidence_sources', models.TextField(help_text='Sources of evidence for this need')),
                ('validation_method', models.CharField(blank=True, help_text='Method used to validate this need', max_length=100)),
                ('is_validated', models.BooleanField(default=False, help_text='Whether this need has been validated')),
                ('validation_date', models.DateTimeField(blank=True, help_text='Date when need was validated', null=True)),
                ('submission_type', models.CharField(choices=[('assessment_driven', 'Identified During Assessment'), ('community_submitted', 'Community-Submitted')], default='assessment_driven', help_text='How this need was identified', max_length=20)),
                ('submission_date', models.DateField(blank=True, help_text='Date when community submitted this need', null=True)),
                ('community_votes', models.PositiveIntegerField(default=0, help_text='Votes received during participatory budgeting sessions')),
                ('forwarded_date', models.DateField(blank=True, help_text='Date when forwarded to MAO', null=True)),
                ('budget_inclusion_date', models.DateField(blank=True, help_text='Date when this need was included in budget/PPA', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assessment', models.ForeignKey(blank=True, help_text='Assessment that identified this need (optional for community-submitted needs)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='identified_needs', to='mana.assessment')),
                ('community', models.ForeignKey(help_text='Community that has this need', on_delete=django.db.models.deletion.CASCADE, related_name='community_needs', to='communities.obccommunity')),
                ('forwarded_by', models.ForeignKey(blank=True, help_text='OOBC staff who forwarded this need', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forwarded_needs', to=settings.AUTH_USER_MODEL)),
                ('forwarded_to_mao', models.ForeignKey(blank=True, help_text='MAO that this need was forwarded to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forwarded_needs', to='coordination.organization')),
                ('identified_by', models.ForeignKey(help_text='User who identified this need', on_delete=django.db.models.deletion.PROTECT, related_name='identified_needs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-priority_score', '-impact_severity', 'title'],
            },
        ),
    ]
