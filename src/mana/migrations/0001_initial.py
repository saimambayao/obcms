# Generated by Django 4.2.21 on 2025-05-22 12:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("communities", "0002_stakeholder_stakeholderengagement"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the assessment", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the assessment"
                    ),
                ),
                (
                    "objectives",
                    models.TextField(
                        help_text="Objectives and goals of the assessment"
                    ),
                ),
                (
                    "location_details",
                    models.TextField(
                        blank=True,
                        help_text="Additional location details and coverage area",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("preparation", "Preparation"),
                            ("data_collection", "Data Collection"),
                            ("analysis", "Analysis"),
                            ("reporting", "Reporting"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planning",
                        help_text="Current status of the assessment",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of the assessment",
                        max_length=10,
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(help_text="Planned start date for the assessment"),
                ),
                (
                    "planned_end_date",
                    models.DateField(
                        help_text="Planned completion date for the assessment"
                    ),
                ),
                (
                    "actual_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual start date of the assessment",
                        null=True,
                    ),
                ),
                (
                    "actual_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Actual completion date of the assessment",
                        null=True,
                    ),
                ),
                (
                    "estimated_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated budget for the assessment",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "actual_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual budget spent on the assessment",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "key_findings",
                    models.TextField(
                        blank=True, help_text="Key findings from the assessment"
                    ),
                ),
                (
                    "recommendations",
                    models.TextField(
                        blank=True,
                        help_text="Recommendations based on assessment results",
                    ),
                ),
                (
                    "impact_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        help_text="Level of impact identified",
                        max_length=10,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0,
                        help_text="Completion percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the assessment category",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "category_type",
                    models.CharField(
                        choices=[
                            ("needs_assessment", "Needs Assessment"),
                            ("baseline_study", "Baseline Study"),
                            ("impact_assessment", "Impact Assessment"),
                            ("situational_analysis", "Situational Analysis"),
                            ("community_mapping", "Community Mapping"),
                        ],
                        help_text="Type of assessment category",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the assessment category"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS icon class for this category",
                        max_length=50,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Color code for this category (hex format)",
                        max_length=7,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Assessment Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the survey", max_length=150),
                ),
                (
                    "survey_type",
                    models.CharField(
                        choices=[
                            ("household", "Household Survey"),
                            ("community_leader", "Community Leader Interview"),
                            ("focus_group", "Focus Group Discussion"),
                            ("key_informant", "Key Informant Interview"),
                            ("observation", "Direct Observation"),
                            ("document_review", "Document Review"),
                        ],
                        help_text="Type of survey",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of the survey"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="Current status of the survey",
                        max_length=15,
                    ),
                ),
                (
                    "target_respondents",
                    models.IntegerField(help_text="Target number of respondents"),
                ),
                (
                    "actual_respondents",
                    models.IntegerField(
                        default=0, help_text="Actual number of respondents"
                    ),
                ),
                ("start_date", models.DateField(help_text="Survey start date")),
                ("end_date", models.DateField(help_text="Survey end date")),
                (
                    "questions_count",
                    models.IntegerField(
                        default=0, help_text="Number of questions in the survey"
                    ),
                ),
                (
                    "estimated_duration_minutes",
                    models.IntegerField(
                        help_text="Estimated duration to complete survey (in minutes)"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment this survey belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="surveys",
                        to="mana.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this survey",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["assessment", "title"],
            },
        ),
        migrations.CreateModel(
            name="SurveyResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "respondent_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the respondent (optional)",
                        max_length=100,
                    ),
                ),
                (
                    "respondent_contact",
                    models.CharField(
                        blank=True,
                        help_text="Contact information of respondent (optional)",
                        max_length=50,
                    ),
                ),
                (
                    "demographic_info",
                    models.JSONField(
                        blank=True,
                        help_text="Demographic information (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "responses",
                    models.JSONField(help_text="Survey responses (JSON format)"),
                ),
                (
                    "collection_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date and time when response was collected",
                    ),
                ),
                (
                    "collection_location",
                    models.CharField(
                        blank=True,
                        help_text="Location where response was collected",
                        max_length=200,
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this response has been validated",
                    ),
                ),
                (
                    "validation_notes",
                    models.TextField(
                        blank=True, help_text="Notes from validation process"
                    ),
                ),
                (
                    "validation_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when response was validated",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "collected_by",
                    models.ForeignKey(
                        help_text="User who collected this response",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        help_text="Survey this response belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="mana.survey",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who validated this response",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-collection_date"],
            },
        ),
        migrations.CreateModel(
            name="MappingActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the mapping activity", max_length=150
                    ),
                ),
                (
                    "mapping_type",
                    models.CharField(
                        choices=[
                            ("resource_mapping", "Resource Mapping"),
                            ("infrastructure_mapping", "Infrastructure Mapping"),
                            ("hazard_mapping", "Hazard and Risk Mapping"),
                            ("social_mapping", "Social Mapping"),
                            ("economic_mapping", "Economic Activity Mapping"),
                            ("cultural_mapping", "Cultural Site Mapping"),
                        ],
                        help_text="Type of mapping activity",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of the mapping activity"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("in_progress", "In Progress"),
                            ("review", "Under Review"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planning",
                        help_text="Current status of the mapping activity",
                        max_length=15,
                    ),
                ),
                (
                    "coverage_area",
                    models.TextField(
                        help_text="Description of the geographic area covered"
                    ),
                ),
                (
                    "coordinates",
                    models.JSONField(
                        blank=True,
                        help_text="Geographic coordinates (GeoJSON format)",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(help_text="Start date of mapping activity"),
                ),
                (
                    "end_date",
                    models.DateField(help_text="End date of mapping activity"),
                ),
                (
                    "methodology",
                    models.TextField(help_text="Methodology used for mapping"),
                ),
                (
                    "tools_used",
                    models.TextField(
                        blank=True, help_text="Tools and equipment used for mapping"
                    ),
                ),
                (
                    "findings",
                    models.TextField(
                        blank=True, help_text="Key findings from the mapping activity"
                    ),
                ),
                (
                    "map_outputs",
                    models.JSONField(
                        blank=True,
                        help_text="References to map outputs and visualizations",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment this mapping activity belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mapping_activities",
                        to="mana.assessment",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this mapping activity",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mapping_team",
                    models.ManyToManyField(
                        help_text="Team members involved in mapping",
                        related_name="mapping_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Mapping Activities",
                "ordering": ["assessment", "start_date"],
            },
        ),
        migrations.CreateModel(
            name="AssessmentTeamMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("lead_assessor", "Lead Assessor"),
                            ("data_collector", "Data Collector"),
                            ("analyst", "Data Analyst"),
                            ("facilitator", "Community Facilitator"),
                            ("technical_expert", "Technical Expert"),
                            ("coordinator", "Field Coordinator"),
                            ("observer", "Observer"),
                        ],
                        help_text="Role of the team member in this assessment",
                        max_length=20,
                    ),
                ),
                (
                    "assigned_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when assigned to the assessment",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this team member is currently active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this team member's involvement",
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="mana.assessment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("assessment", "user", "role")},
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="category",
            field=models.ForeignKey(
                help_text="Category of assessment",
                on_delete=django.db.models.deletion.PROTECT,
                to="mana.assessmentcategory",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="community",
            field=models.ForeignKey(
                help_text="Community being assessed",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assessments",
                to="communities.obccommunity",
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="created_by",
            field=models.ForeignKey(
                help_text="User who created this assessment",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_assessments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="lead_assessor",
            field=models.ForeignKey(
                help_text="Lead person responsible for the assessment",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="led_assessments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="assessment",
            name="team_members",
            field=models.ManyToManyField(
                blank=True,
                help_text="Team members involved in the assessment",
                related_name="assessment_teams",
                through="mana.AssessmentTeamMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="SurveyQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField(help_text="The question text")),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Response"),
                            ("number", "Numeric Response"),
                            ("single_choice", "Single Choice"),
                            ("multiple_choice", "Multiple Choice"),
                            ("scale", "Rating Scale"),
                            ("yes_no", "Yes/No"),
                            ("date", "Date"),
                            ("location", "Geographic Location"),
                        ],
                        help_text="Type of question",
                        max_length=20,
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        help_text="Order of the question in the survey"
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False, help_text="Whether this question is required"
                    ),
                ),
                (
                    "choices",
                    models.JSONField(
                        blank=True,
                        help_text="Choices for single/multiple choice questions (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "scale_min",
                    models.IntegerField(
                        blank=True,
                        help_text="Minimum value for scale questions",
                        null=True,
                    ),
                ),
                (
                    "scale_max",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum value for scale questions",
                        null=True,
                    ),
                ),
                (
                    "help_text",
                    models.TextField(
                        blank=True, help_text="Additional help text for respondents"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "survey",
                    models.ForeignKey(
                        help_text="Survey this question belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="mana.survey",
                    ),
                ),
            ],
            options={
                "ordering": ["survey", "order"],
                "unique_together": {("survey", "order")},
            },
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["community", "status"], name="mana_assess_communi_327d97_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["category", "priority"], name="mana_assess_categor_cea5c1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="assessment",
            index=models.Index(
                fields=["planned_start_date", "planned_end_date"],
                name="mana_assess_planned_1337b4_idx",
            ),
        ),
    ]
