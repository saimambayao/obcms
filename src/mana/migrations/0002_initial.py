# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0003_initial'),
        ('communities', '0002_initial'),
        ('mana', '0001_initial'),
        ('monitoring', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='need',
            name='linked_ppa',
            field=models.ForeignKey(blank=True, help_text='PPA (MonitoringEntry) that addresses this need', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='addressing_needs', to='monitoring.monitoringentry'),
        ),
        migrations.AddField(
            model_name='need',
            name='submitted_by_user',
            field=models.ForeignKey(blank=True, help_text='Community leader who submitted (if community-initiated)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='community_submitted_needs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='need',
            name='validated_by',
            field=models.ForeignKey(blank=True, help_text='User who validated this need', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_needs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='need',
            name='category',
            field=models.ForeignKey(help_text='Category this need belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='needs', to='mana.needscategory'),
        ),
        migrations.AddField(
            model_name='needsprioritization',
            name='assessment',
            field=models.ForeignKey(help_text='Assessment this prioritization belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='prioritization_exercises', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='needsprioritization',
            name='community',
            field=models.ForeignKey(help_text='Community for which needs are being prioritized', on_delete=django.db.models.deletion.CASCADE, related_name='prioritization_exercises', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='needsprioritization',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this prioritization', on_delete=django.db.models.deletion.PROTECT, related_name='created_prioritizations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='needsprioritization',
            name='facilitators',
            field=models.ManyToManyField(help_text='Users who facilitated this prioritization', related_name='facilitated_prioritizations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='needsprioritizationitem',
            name='need',
            field=models.ForeignKey(help_text='Need being prioritized', on_delete=django.db.models.deletion.CASCADE, related_name='prioritization_items', to='mana.need'),
        ),
        migrations.AddField(
            model_name='needsprioritizationitem',
            name='prioritization',
            field=models.ForeignKey(help_text='Prioritization exercise this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='prioritization_items', to='mana.needsprioritization'),
        ),
        migrations.AddField(
            model_name='needvote',
            name='need',
            field=models.ForeignKey(help_text='The community need being voted for', on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='mana.need'),
        ),
        migrations.AddField(
            model_name='needvote',
            name='user',
            field=models.ForeignKey(help_text='The user who cast this vote', on_delete=django.db.models.deletion.CASCADE, related_name='need_votes', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='needvote',
            name='voter_community',
            field=models.ForeignKey(blank=True, help_text='Community the voter belongs to (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='community_votes', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='survey',
            name='assessment',
            field=models.ForeignKey(help_text='Assessment this survey belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='survey',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this survey', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='surveyquestion',
            name='survey',
            field=models.ForeignKey(help_text='Survey this question belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='mana.survey'),
        ),
        migrations.AddField(
            model_name='surveyresponse',
            name='collected_by',
            field=models.ForeignKey(help_text='User who collected this response', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='surveyresponse',
            name='survey',
            field=models.ForeignKey(help_text='Survey this response belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='mana.survey'),
        ),
        migrations.AddField(
            model_name='surveyresponse',
            name='validated_by',
            field=models.ForeignKey(blank=True, help_text='User who validated this response', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_responses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopactivity',
            name='assessment',
            field=models.ForeignKey(help_text='Assessment this workshop belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='workshop_activities', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='workshopactivity',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this workshop', on_delete=django.db.models.deletion.PROTECT, related_name='created_workshops', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopactivity',
            name='facilitators',
            field=models.ManyToManyField(help_text='Workshop facilitators', related_name='facilitated_workshops', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopaccesslog',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop accessed', on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopnotification',
            name='workshop',
            field=models.ForeignKey(blank=True, help_text='Related workshop (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopoutput',
            name='created_by',
            field=models.ForeignKey(help_text='User who documented this output', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopoutput',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop that produced this output', on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopparticipant',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop this participant attended', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='assessment',
            field=models.ForeignKey(help_text='Assessment this participant is enrolled in', on_delete=django.db.models.deletion.CASCADE, related_name='participant_accounts', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='barangay',
            field=models.ForeignKey(blank=True, help_text='Barangay (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workshop_participants', to='common.barangay'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='created_by',
            field=models.ForeignKey(help_text='Facilitator who created this account', on_delete=django.db.models.deletion.PROTECT, related_name='created_participant_accounts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='municipality',
            field=models.ForeignKey(blank=True, help_text='Municipality (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workshop_participants', to='common.municipality'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='office_barangay',
            field=models.ForeignKey(blank=True, help_text='Office barangay (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_participants', to='common.barangay'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='office_municipality',
            field=models.ForeignKey(blank=True, help_text='Office municipality (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_participants', to='common.municipality'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='office_province',
            field=models.ForeignKey(blank=True, help_text='Office province (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_participants', to='common.province'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='office_region',
            field=models.ForeignKey(blank=True, help_text='Office region (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_participants', to='common.region'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='province',
            field=models.ForeignKey(help_text='Province represented by this participant', on_delete=django.db.models.deletion.CASCADE, related_name='workshop_participants', to='common.province'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='region',
            field=models.ForeignKey(blank=True, help_text='Region of participant', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workshop_participants_region', to='common.region'),
        ),
        migrations.AddField(
            model_name='workshopparticipantaccount',
            name='user',
            field=models.OneToOneField(help_text='Django user account for authentication', on_delete=django.db.models.deletion.CASCADE, related_name='workshop_participant_account', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopnotification',
            name='participant',
            field=models.ForeignKey(help_text='Participant receiving this notification', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='mana.workshopparticipantaccount'),
        ),
        migrations.AddField(
            model_name='workshopaccesslog',
            name='participant',
            field=models.ForeignKey(help_text='Participant who performed the action', on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='mana.workshopparticipantaccount'),
        ),
        migrations.AlterUniqueTogether(
            name='workshopquestiondefinition',
            unique_together={('workshop_type', 'question_id', 'version')},
        ),
        migrations.AddField(
            model_name='workshopresponse',
            name='participant',
            field=models.ForeignKey(help_text='Participant who submitted this response', on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='mana.workshopparticipantaccount'),
        ),
        migrations.AddField(
            model_name='workshopresponse',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop this response belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='structured_responses', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopsession',
            name='facilitator',
            field=models.ForeignKey(help_text='Primary facilitator for this session', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopsession',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop this session belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='mana.workshopactivity'),
        ),
        migrations.AddField(
            model_name='workshopoutput',
            name='created_by_session',
            field=models.ForeignKey(blank=True, help_text='Session that created this output', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mana.workshopsession'),
        ),
        migrations.AddField(
            model_name='workshopsynthesis',
            name='assessment',
            field=models.ForeignKey(help_text='Assessment this synthesis belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='workshop_syntheses', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='workshopsynthesis',
            name='created_by',
            field=models.ForeignKey(help_text='User who requested this synthesis', on_delete=django.db.models.deletion.PROTECT, related_name='created_syntheses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopsynthesis',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, help_text='User who reviewed this synthesis', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_syntheses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workshopsynthesis',
            name='workshop',
            field=models.ForeignKey(help_text='Workshop being synthesized', on_delete=django.db.models.deletion.CASCADE, related_name='syntheses', to='mana.workshopactivity'),
        ),
        migrations.AlterUniqueTogether(
            name='assessmentteammember',
            unique_together={('assessment', 'user', 'role')},
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['community', 'status'], name='mana_assess_communi_327d97_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['province', 'status'], name='mana_assess_provinc_0a8eca_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['municipality', 'status'], name='mana_assess_municip_9ff447_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['barangay', 'status'], name='mana_assess_baranga_b3cadf_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['region', 'status'], name='mana_assess_region__fa24ec_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['category', 'priority'], name='mana_assess_categor_cea5c1_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['planned_start_date', 'planned_end_date'], name='mana_assess_planned_1337b4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='baselineindicator',
            unique_together={('study', 'name')},
        ),
        migrations.AddIndex(
            model_name='baselinedatacollection',
            index=models.Index(fields=['study', 'collection_method'], name='mana_baseli_study_i_898caa_idx'),
        ),
        migrations.AddIndex(
            model_name='baselinedatacollection',
            index=models.Index(fields=['status', 'planned_date'], name='mana_baseli_status_de3fe1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='baselinestudyteammember',
            unique_together={('study', 'user', 'role')},
        ),
        migrations.AddIndex(
            model_name='baselinestudy',
            index=models.Index(fields=['community', 'study_type'], name='mana_baseli_communi_b9764f_idx'),
        ),
        migrations.AddIndex(
            model_name='baselinestudy',
            index=models.Index(fields=['status', 'planned_start_date'], name='mana_baseli_status_3006d7_idx'),
        ),
        migrations.AddIndex(
            model_name='baselinestudy',
            index=models.Index(fields=['assessment', 'status'], name='mana_baseli_assessm_f1d7fc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='facilitatorassessmentassignment',
            unique_together={('facilitator', 'assessment')},
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['community', 'category'], name='mana_need_communi_db679a_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['status', 'priority_score'], name='mana_need_status_aecffd_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['urgency_level', 'impact_severity'], name='mana_need_urgency_599872_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['submission_type', 'status'], name='mana_need_submiss_b96101_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['submitted_by_user', 'status'], name='mana_need_submitt_7b7195_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['forwarded_to_mao', 'status'], name='mana_need_forward_88cba7_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['linked_ppa'], name='mana_need_linked__734a45_idx'),
        ),
        migrations.AddIndex(
            model_name='need',
            index=models.Index(fields=['community_votes'], name='mana_need_communi_873e72_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='needsprioritizationitem',
            unique_together={('prioritization', 'need')},
        ),
        migrations.AddIndex(
            model_name='needvote',
            index=models.Index(fields=['need', '-voted_at'], name='mana_needvo_need_id_2060fd_idx'),
        ),
        migrations.AddIndex(
            model_name='needvote',
            index=models.Index(fields=['user', '-voted_at'], name='mana_needvo_user_id_022ac0_idx'),
        ),
        migrations.AddIndex(
            model_name='needvote',
            index=models.Index(fields=['-voted_at'], name='mana_needvo_voted_a_15b44e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='needvote',
            unique_together={('need', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='surveyquestion',
            unique_together={('survey', 'order')},
        ),
        migrations.AlterUniqueTogether(
            name='workshopactivity',
            unique_together={('assessment', 'workshop_type')},
        ),
        migrations.AlterUniqueTogether(
            name='workshopparticipant',
            unique_together={('workshop', 'name', 'participant_type')},
        ),
        migrations.AlterUniqueTogether(
            name='workshopparticipantaccount',
            unique_together={('user', 'assessment')},
        ),
        migrations.AddIndex(
            model_name='workshopnotification',
            index=models.Index(fields=['participant', '-created_at'], name='mana_worksh_partici_52f564_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopnotification',
            index=models.Index(fields=['participant', 'is_read'], name='mana_worksh_partici_84dd9e_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopaccesslog',
            index=models.Index(fields=['participant', 'workshop'], name='mana_worksh_partici_61c56d_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopaccesslog',
            index=models.Index(fields=['action_type', 'created_at'], name='mana_worksh_action__b44cc4_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopresponse',
            index=models.Index(fields=['workshop', 'status'], name='mana_worksh_worksho_1c1107_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopresponse',
            index=models.Index(fields=['participant', 'workshop'], name='mana_worksh_partici_7f9ed8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workshopresponse',
            unique_together={('participant', 'workshop', 'question_id')},
        ),
        migrations.AlterUniqueTogether(
            name='workshopsession',
            unique_together={('workshop', 'session_order')},
        ),
        migrations.AddIndex(
            model_name='workshopsynthesis',
            index=models.Index(fields=['assessment', 'status'], name='mana_worksh_assessm_70b92a_idx'),
        ),
        migrations.AddIndex(
            model_name='workshopsynthesis',
            index=models.Index(fields=['workshop', 'status'], name='mana_worksh_worksho_7c8266_idx'),
        ),
    ]
