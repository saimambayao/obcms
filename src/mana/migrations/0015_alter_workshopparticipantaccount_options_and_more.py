# Generated by Django 4.2.24 on 2025-09-30 07:38

from django.db import migrations, models
import django.db.models.deletion


def populate_assessment_locations(apps, schema_editor):
    Assessment = apps.get_model('mana', 'Assessment')

    assessments = Assessment.objects.select_related(
        'community__barangay__municipality__province__region',
        'barangay__municipality__province__region',
        'municipality__province__region',
        'province__region',
    )

    for assessment in assessments:
        update_kwargs = {}

        if assessment.community_id:
            barangay = getattr(assessment.community, 'barangay', None)
            if barangay and assessment.barangay_id != barangay.id:
                update_kwargs['barangay_id'] = barangay.id

            municipality = getattr(barangay, 'municipality', None)
            if municipality and assessment.municipality_id != municipality.id:
                update_kwargs['municipality_id'] = municipality.id

            province = getattr(municipality, 'province', None)
            if province and assessment.province_id != province.id:
                update_kwargs['province_id'] = province.id

            region = getattr(province, 'region', None)
            if region and assessment.region_id != region.id:
                update_kwargs['region_id'] = region.id
        else:
            if assessment.barangay_id and assessment.barangay:
                barangay = assessment.barangay
                municipality = getattr(barangay, 'municipality', None)
                if municipality and assessment.municipality_id != municipality.id:
                    update_kwargs['municipality_id'] = municipality.id
                province = getattr(municipality, 'province', None)
                if province and assessment.province_id != province.id:
                    update_kwargs['province_id'] = province.id
                region = getattr(province, 'region', None)
                if region and assessment.region_id != region.id:
                    update_kwargs['region_id'] = region.id

            if assessment.municipality_id and assessment.municipality:
                municipality = assessment.municipality
                province = getattr(municipality, 'province', None)
                if province and assessment.province_id != province.id:
                    update_kwargs.setdefault('province_id', province.id)
                region = getattr(province, 'region', None)
                if region and assessment.region_id != region.id:
                    update_kwargs['region_id'] = region.id

            if assessment.province_id and assessment.province:
                province = assessment.province
                region = getattr(province, 'region', None)
                if region and assessment.region_id != region.id:
                    update_kwargs.setdefault('region_id', region.id)

        if update_kwargs:
            Assessment.objects.filter(pk=assessment.pk).update(**update_kwargs)


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0012_add_multiple_teams_to_stafftask'),
        ('mana', '0014_workshopquestiondefinition'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='workshopparticipantaccount',
            options={'ordering': ['province', 'user__last_name'], 'permissions': [('can_access_regional_mana', 'Can access regional MANA workshops'), ('can_view_provincial_obc', 'Can view provincial OBC data'), ('can_facilitate_workshop', 'Can facilitate and manage MANA workshops')], 'verbose_name': 'Workshop Participant Account', 'verbose_name_plural': 'Workshop Participant Accounts'},
        ),
        migrations.AddField(
            model_name='assessment',
            name='barangay',
            field=models.ForeignKey(blank=True, help_text='Barangay covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.barangay'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='municipality',
            field=models.ForeignKey(blank=True, help_text='Municipality or city covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.municipality'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='region',
            field=models.ForeignKey(blank=True, help_text='Region covered by the assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessments', to='common.region'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['municipality', 'status'], name='mana_assess_municip_9ff447_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['barangay', 'status'], name='mana_assess_baranga_b3cadf_idx'),
        ),
        migrations.AddIndex(
            model_name='assessment',
            index=models.Index(fields=['region', 'status'], name='mana_assess_region__fa24ec_idx'),
        ),
        migrations.RunPython(populate_assessment_locations, migrations.RunPython.noop),
    ]
