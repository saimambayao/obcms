# Generated by Django 4.2.21 on 2025-05-22 12:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("communities", "0002_stakeholder_stakeholderengagement"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("mana", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="NeedsCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the needs category",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "sector",
                    models.CharField(
                        choices=[
                            ("education", "Education"),
                            ("economic_development", "Economic Development"),
                            ("social_development", "Social Development"),
                            ("cultural_development", "Cultural Development"),
                            ("infrastructure", "Infrastructure"),
                            ("health", "Health"),
                            ("governance", "Governance"),
                            ("environment", "Environment"),
                            ("security", "Peace and Security"),
                        ],
                        help_text="Development sector this category belongs to",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of this needs category"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS icon class for this category",
                        max_length=50,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Color code for this category (hex format)",
                        max_length=7,
                    ),
                ),
                (
                    "weight_factor",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="Weight factor for prioritization (0.1 to 2.0)",
                        max_digits=3,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Needs Categories",
                "ordering": ["sector", "name"],
            },
        ),
        migrations.CreateModel(
            name="NeedsPrioritization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the prioritization exercise", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the prioritization exercise"
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("scoring_matrix", "Scoring Matrix"),
                            ("pairwise_comparison", "Pairwise Comparison"),
                            ("ranking", "Simple Ranking"),
                            ("mca", "Multi-Criteria Analysis"),
                            ("community_voting", "Community Voting"),
                            ("expert_panel", "Expert Panel Review"),
                        ],
                        help_text="Method used for prioritization",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planning",
                        help_text="Status of the prioritization exercise",
                        max_length=15,
                    ),
                ),
                (
                    "participant_count",
                    models.IntegerField(help_text="Number of community participants"),
                ),
                (
                    "stakeholder_groups",
                    models.TextField(
                        help_text="Description of stakeholder groups involved"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(help_text="Start date of prioritization exercise"),
                ),
                (
                    "end_date",
                    models.DateField(help_text="End date of prioritization exercise"),
                ),
                (
                    "prioritization_criteria",
                    models.JSONField(
                        help_text="Criteria used for prioritization (JSON format)"
                    ),
                ),
                (
                    "results",
                    models.JSONField(
                        blank=True,
                        help_text="Prioritization results (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "top_priorities",
                    models.TextField(
                        blank=True, help_text="Summary of top priority needs identified"
                    ),
                ),
                (
                    "recommendations",
                    models.TextField(
                        blank=True, help_text="Recommendations based on prioritization"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment this prioritization belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prioritization_exercises",
                        to="mana.assessment",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="Community for which needs are being prioritized",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prioritization_exercises",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this prioritization",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_prioritizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "facilitators",
                    models.ManyToManyField(
                        help_text="Users who facilitated this prioritization",
                        related_name="facilitated_prioritizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Need",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title/name of the identified need", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the need"),
                ),
                (
                    "affected_population",
                    models.IntegerField(
                        help_text="Number of people affected by this need"
                    ),
                ),
                (
                    "affected_households",
                    models.IntegerField(
                        blank=True, help_text="Number of households affected", null=True
                    ),
                ),
                (
                    "geographic_scope",
                    models.TextField(help_text="Geographic scope/area affected"),
                ),
                (
                    "urgency_level",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediate (Within 1 month)"),
                            ("short_term", "Short-term (1-6 months)"),
                            ("medium_term", "Medium-term (6-12 months)"),
                            ("long_term", "Long-term (1+ years)"),
                        ],
                        help_text="How urgent is this need",
                        max_length=15,
                    ),
                ),
                (
                    "impact_severity",
                    models.IntegerField(
                        choices=[(1, "1"), (2, "2"), (3, "3"), (4, "4"), (5, "5")],
                        help_text="Impact severity on community (1=Low, 5=High)",
                    ),
                ),
                (
                    "feasibility",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        help_text="Feasibility of addressing this need",
                        max_length=10,
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost to address this need",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("identified", "Identified"),
                            ("validated", "Validated"),
                            ("prioritized", "Prioritized"),
                            ("planned", "Planned for Implementation"),
                            ("in_progress", "Implementation in Progress"),
                            ("completed", "Completed"),
                            ("deferred", "Deferred"),
                            ("rejected", "Rejected"),
                        ],
                        default="identified",
                        help_text="Current status of this need",
                        max_length=15,
                    ),
                ),
                (
                    "priority_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Calculated priority score",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "priority_rank",
                    models.IntegerField(
                        blank=True,
                        help_text="Priority ranking within community",
                        null=True,
                    ),
                ),
                (
                    "evidence_sources",
                    models.TextField(help_text="Sources of evidence for this need"),
                ),
                (
                    "validation_method",
                    models.CharField(
                        blank=True,
                        help_text="Method used to validate this need",
                        max_length=100,
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False, help_text="Whether this need has been validated"
                    ),
                ),
                (
                    "validation_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when need was validated", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="Assessment that identified this need",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="identified_needs",
                        to="mana.assessment",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Category this need belongs to",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="needs",
                        to="mana.needscategory",
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="Community that has this need",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_needs",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "identified_by",
                    models.ForeignKey(
                        help_text="User who identified this need",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="identified_needs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who validated this need",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_needs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-priority_score", "-impact_severity", "title"],
            },
        ),
        migrations.CreateModel(
            name="NeedsPrioritizationItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rank",
                    models.IntegerField(
                        help_text="Rank assigned in this prioritization"
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Score assigned in this prioritization",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "criteria_scores",
                    models.JSONField(
                        blank=True,
                        help_text="Scores for individual criteria (JSON format)",
                        null=True,
                    ),
                ),
                (
                    "justification",
                    models.TextField(
                        blank=True, help_text="Justification for the ranking/scoring"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "need",
                    models.ForeignKey(
                        help_text="Need being prioritized",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prioritization_items",
                        to="mana.need",
                    ),
                ),
                (
                    "prioritization",
                    models.ForeignKey(
                        help_text="Prioritization exercise this item belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prioritization_items",
                        to="mana.needsprioritization",
                    ),
                ),
            ],
            options={
                "ordering": ["prioritization", "rank"],
                "unique_together": {("prioritization", "need")},
            },
        ),
        migrations.AddIndex(
            model_name="need",
            index=models.Index(
                fields=["community", "category"], name="mana_need_communi_db679a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="need",
            index=models.Index(
                fields=["status", "priority_score"], name="mana_need_status_aecffd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="need",
            index=models.Index(
                fields=["urgency_level", "impact_severity"],
                name="mana_need_urgency_599872_idx",
            ),
        ),
    ]
