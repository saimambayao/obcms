#!/usr/bin/env python
"""Debug script to test MOA PPA signal handler."""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'obc_management.settings.development')
django.setup()

from decimal import Decimal
from django.contrib.auth import get_user_model
from monitoring.models import MonitoringEntry
from coordination.models import Organization
from common.models import TaskTemplate
import signal
import time

User = get_user_model()

def timeout_handler(signum, frame):
    raise TimeoutError("Test timed out after 5 seconds")

# Set a 5-second timeout
signal.signal(signal.SIGALRM, timeout_handler)

try:
    print("Creating test user...")
    user, _ = User.objects.get_or_create(
        username="test_signal_user",
        defaults={
            "user_type": "oobc_staff",
            "is_approved": True,
        }
    )

    print("Creating test organization...")
    org, _ = Organization.objects.get_or_create(
        name="Test MOA",
        defaults={
            "organization_type": "bmoa",
            "created_by": user,
        }
    )

    print(f"Checking if template exists: ppa_budget_cycle")
    template_exists = TaskTemplate.objects.filter(
        name="ppa_budget_cycle",
        is_active=True
    ).exists()
    print(f"Template exists: {template_exists}")

    print("\n=== Starting MonitoringEntry creation ===")
    signal.alarm(5)  # 5 second timeout
    start_time = time.time()

    entry = MonitoringEntry.objects.create(
        title="Test PPA Entry",
        category="moa_ppa",
        implementing_moa=org,
        status="planning",
        progress=0,
        budget_allocation=Decimal("100000.00"),
        created_by=user,
        updated_by=user,
    )

    signal.alarm(0)  # Cancel timeout
    elapsed = time.time() - start_time

    print(f"\n=== SUCCESS ===")
    print(f"Entry created in {elapsed:.3f} seconds")
    print(f"Entry ID: {entry.id}")
    print(f"Entry title: {entry.title}")

    # Check if tasks were created
    from common.proxies import StaffTaskProxy as StaffTask
    related_tasks = StaffTask.objects.filter(related_ppa=entry)
    print(f"Related tasks created: {related_tasks.count()}")

    # Cleanup
    print("\nCleaning up...")
    entry.delete()

except TimeoutError as e:
    print(f"\n=== TIMEOUT ERROR ===")
    print(f"Error: {e}")
    print("\nThis indicates the signal handler is hanging.")
    print("Check the create_ppa_tasks signal in common/services/task_automation.py")
    sys.exit(1)

except Exception as e:
    print(f"\n=== ERROR ===")
    print(f"Error: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

print("\nTest completed successfully!")
