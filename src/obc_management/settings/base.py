"""
Django settings for OBC Management System (Other Bangsamoro Communities Management System).

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import warnings
from pathlib import Path
import environ

from obc_management.settings.bmms_config import BMMSMode

# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(list, ["localhost", "127.0.0.1"]),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# __file__ = src/obc_management/settings/base.py
# .parent = src/obc_management/settings/
# .parent = src/obc_management/
# .parent = src/ (this is BASE_DIR - the Django project root)
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Take environment variables from .env file if it exists
environ.Env.read_env(os.path.join(BASE_DIR.parent, ".env"))

# ============================================================================
# PYTORCH JIT WARNING SUPPRESSION
# ============================================================================
# Suppress PyTorch JIT warnings (cosmetic only - no functional impact)
# These warnings appear when sentence-transformers loads PyTorch models
# Source: torch/_jit_internal.py line 1001
warnings.filterwarnings('ignore',
    message='Unable to retrieve source for @torch.jit._overload function',
    category=UserWarning,
    module='torch._jit_internal'
)

# Alternative suppression via environment variable (if set)
if env.bool("TORCH_JIT_WARNING_DISABLE", default=False):
    os.environ["TORCH_JIT_WARNING_DISABLE"] = "1"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY",
    default="ul07ouqfvodh0w7zm469dmlk4uxk2q8defl5d1uhy8bka0ciagpti9w8kx7h3zq",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env("ALLOWED_HOSTS")

# Custom User Model
AUTH_USER_MODEL = "common.User"

# Authentication URLs
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/login/"

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.humanize",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",  # JWT token blacklisting
    "corsheaders",
    "django_filters",
    "django_extensions",
    "crispy_forms",
    "auditlog",  # Audit logging for compliance
    "axes",  # Failed login tracking and account lockout
    "mptt",  # Django MPTT for hierarchical work items
    "django_structlog",  # Structured JSON logging for production
]

LOCAL_APPS = [
    "common",
    "organizations",  # Phase 1: BMMS multi-tenant foundation (44 MOAs)
    "communities",
    "municipal_profiles",
    "monitoring",
    "mana",
    "coordination",
    "recommendations",
    "recommendations.documents",
    "recommendations.policies",
    "recommendations.policy_tracking",
    "data_imports",
    "services",  # Phase 3: Service catalog and applications
    "project_central",  # Integrated project management system
    "ai_assistant",  # AI assistant with vector search and semantic similarity
    "planning",  # Phase 1: Strategic planning module (BMMS)
    "budget_preparation",  # Phase 2A: Budget Preparation (Parliament Bill No. 325)
    "budget_execution",  # Phase 2B: Budget Execution (Parliament Bill No. 325 Section 78)
    "ocm",  # Phase 6: OCM aggregation layer
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# ============================================================================
# DEPRECATED LEGACY MODELS (Added: 2025-10-05)
# ============================================================================
# The following models have been DEPRECATED and marked as ABSTRACT:
#
# 1. common.models.StaffTask → Use WorkItem(work_type='task')
# 2. coordination.models.Event → Use WorkItem(work_type='activity')
# 3. project_central.models.ProjectWorkflow → Use WorkItem(work_type='project')
#
# These models cannot be saved/deleted (NotImplementedError).
# All database records have been migrated to WorkItem.
# Database tables remain for migration rollback but should NOT be used.
#
# See: docs/refactor/WORKITEM_MIGRATION_COMPLETE.md
# See: src/common/legacy/deprecation_warnings.py
# ============================================================================

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Serve static files in production
    "common.middleware.DeprecatedURLRedirectMiddleware",  # Phase 0: URL refactoring backward compatibility (TEMPORARY - remove after 30 days)
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "axes.middleware.AxesMiddleware",  # Failed login tracking (after AuthenticationMiddleware)
    "auditlog.middleware.AuditlogMiddleware",  # Audit logging (after AuthenticationMiddleware)
    "common.middleware.organization_context.OrganizationContextMiddleware",  # Phase 5: BMMS multi-tenant organization context (after AuthenticationMiddleware)
    "common.middleware.AuditMiddleware",  # Budget system audit logging (Parliament Bill No. 325 Section 78)
    "ocm.middleware.OCMAccessMiddleware",  # Enforce OCM read-only access
    "common.middleware.APILoggingMiddleware",  # API request/response logging for security audit
    "common.middleware.DeprecationLoggingMiddleware",  # Track deprecated URL usage for migration planning
    "common.middleware.MANAAccessControlMiddleware",  # Restrict MANA user access to authorized pages only
    "mana.middleware.ManaWorkshopContextMiddleware",
    "mana.middleware.ManaParticipantAccessMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Add debug toolbar for development
# if DEBUG:
#     INSTALLED_APPS.append('debug_toolbar')
#     MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
#     INTERNAL_IPS = ['127.0.0.1']

ROOT_URLCONF = "obc_management.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR.parent / "templates",
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "common.context_processors.location_api",
                "common.context_processors.feature_flags",
                "project_central.context_processors.project_central_context",
                "organizations.views.organization_switcher_context",
            ],
        },
    },
]

WSGI_APPLICATION = "obc_management.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": env.db(default="sqlite:///" + str(BASE_DIR / "db.sqlite3"))}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased from default 8 to 12 (NIST recommendation)
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Manila"  # Philippines timezone
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Points to src/static/ directory
]

# Django 4.2+ STORAGES configuration
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": (
            "whitenoise.storage.CompressedManifestStaticFilesStorage"
            if not DEBUG
            else "django.contrib.staticfiles.storage.StaticFilesStorage"
        ),
    },
}

# WhiteNoise configuration
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_USE_FINDERS = DEBUG
WHITENOISE_MAX_AGE = 31536000  # 1 year cache for static files with hashes
WHITENOISE_MANIFEST_STRICT = False  # Graceful degradation if hashed file missing

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "common.throttling.BurstThrottle",  # Short-term burst protection
        "common.throttling.AnonThrottle",  # Anonymous user throttling
        "common.throttling.UserThrottle",  # Authenticated user throttling
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "100/hour",  # Anonymous users: 100 requests per hour
        "user": "1000/hour",  # Authenticated users: 1000 requests per hour
        "auth": "5/minute",  # Authentication endpoints: 5 attempts per minute
        "burst": "60/minute",  # Burst protection: 60 requests per minute
        "export": "10/hour",  # Data export operations: 10 per hour
        "admin": "5000/hour",  # Admin users: 5000 requests per hour
    },
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old tokens after rotation
    "UPDATE_LAST_LOGIN": True,  # Update user's last_login field on token refresh
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Site settings
SITE_NAME = env("SITE_NAME", default="OBC Management System")
SITE_DESCRIPTION = env(
    "SITE_DESCRIPTION", default="Other Bangsamoro Communities Management System"
)

# Django Admin "View site" link
SITE_ID = 1
SITE_URL = "/auth/dashboard/"

# Canonical base URL for email templates and absolute links
BASE_URL = env("BASE_URL", default="http://localhost:8000")

# Crispy Forms
CRISPY_TEMPLATE_PACK = "bootstrap4"

# Email settings
EMAIL_BACKEND = env(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
)
DEFAULT_FROM_EMAIL = env(
    "DEFAULT_FROM_EMAIL", default="OBCMS <noreply@example.com>"
)
if EMAIL_BACKEND != "django.core.mail.backends.console.EmailBackend":
    EMAIL_HOST = env("EMAIL_HOST", default="")
    EMAIL_PORT = env("EMAIL_PORT", default=587)
    EMAIL_USE_TLS = env("EMAIL_USE_TLS", default=True)
    EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")

# Celery Configuration (for background tasks)
CELERY_BROKER_URL = env("REDIS_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = env("REDIS_URL", default="redis://localhost:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Celery Beat Schedule (automated task scheduling)
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # ========================================================================
    # MONITORING & EVALUATION (M&E) AUTOMATION TASKS
    # ========================================================================
    # Nightly PPA progress sync from WorkItems at 2:00 AM
    "auto-sync-ppa-progress": {
        "task": "monitoring.auto_sync_ppa_progress",
        "schedule": crontab(hour=2, minute=0),
    },
    # Budget variance detection every 6 hours
    "detect-budget-variances": {
        "task": "monitoring.detect_budget_variances",
        "schedule": crontab(hour="*/6"),
    },
    # Approval deadline reminders daily at 8:00 AM
    "send-approval-deadline-reminders": {
        "task": "monitoring.send_approval_deadline_reminders",
        "schedule": crontab(hour=8, minute=0),
    },
    # ========================================================================
    # PROJECT CENTRAL AUTOMATION TASKS
    # ========================================================================
    # Daily alert generation at 6:00 AM
    "generate-daily-alerts": {
        "task": "project_central.generate_daily_alerts",
        "schedule": crontab(hour=6, minute=0),
    },
    # Deactivate resolved alerts daily at 6:30 AM
    "deactivate-resolved-alerts": {
        "task": "project_central.deactivate_resolved_alerts",
        "schedule": crontab(hour=6, minute=30),
    },
    # Update budget ceiling allocations daily at 7:00 AM
    "update-budget-ceiling-allocations": {
        "task": "project_central.update_budget_ceiling_allocations",
        "schedule": crontab(hour=7, minute=0),
    },
    # Check workflow deadlines daily at 8:00 AM
    "check-workflow-deadlines": {
        "task": "project_central.check_workflow_deadlines",
        "schedule": crontab(hour=8, minute=0),
    },
    # Sync workflow-PPA status daily at 9:00 AM
    "sync-workflow-ppa-status": {
        "task": "project_central.sync_workflow_ppa_status",
        "schedule": crontab(hour=9, minute=0),
    },
    # ========================================================================
    # WORKITEM MAINTENANCE TASKS
    # ========================================================================
    # Weekly cleanup of orphaned WorkItems every Sunday at 3:00 AM
    "cleanup-orphaned-workitems": {
        "task": "project_central.cleanup_orphaned_workitems",
        "schedule": crontab(hour=3, minute=0, day_of_week=0),
    },
    # Monthly progress recalculation on 1st of month at 4:00 AM
    "recalculate-all-progress": {
        "task": "project_central.recalculate_all_progress",
        "schedule": crontab(hour=4, minute=0, day_of_month=1),
    },
    # ========================================================================
    # REPORTING TASKS
    # ========================================================================
    # Weekly workflow report every Monday at 9:00 AM
    "generate-weekly-workflow-report": {
        "task": "project_central.generate_weekly_workflow_report",
        "schedule": crontab(hour=9, minute=0, day_of_week=1),
    },
    # Monthly budget report on 1st of month at 10:00 AM
    "generate-monthly-budget-report": {
        "task": "project_central.generate_monthly_budget_report",
        "schedule": crontab(hour=10, minute=0, day_of_month=1),
    },
    # ========================================================================
    # CLEANUP TASKS
    # ========================================================================
    # Weekly cleanup of expired alerts every Sunday at 2:00 AM
    "cleanup-expired-alerts": {
        "task": "project_central.cleanup_expired_alerts",
        "schedule": crontab(hour=2, minute=0, day_of_week=0),
    },
}

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "security_audit": {
            "format": (
                "{levelname} {asctime} - {message} | "
                "User: {username} (ID: {user_id}) | "
                "Organization: {organization_name} (ID: {organization_id}) | "
                "IP: {client_ip} | "
                "Event: {event_type}"
            ),
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "logs" / "django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "rbac_security": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": BASE_DIR / "logs" / "rbac_security.log",
            "maxBytes": 10485760,  # 10MB
            "backupCount": 10,  # Keep 10 backup files (~100MB total)
            "formatter": "security_audit",
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "obc_management": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "rbac.access_denied": {
            "handlers": ["rbac_security", "console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / "logs", exist_ok=True)

# ============================================================================
# REAL-TIME SECURITY ALERTING
# ============================================================================

# Slack webhook URL for security alerts (optional)
# Get from: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL = env.str("SLACK_WEBHOOK_URL", default="")

# Security team email addresses (for critical alerts)
SECURITY_TEAM_EMAILS = env.list(
    "SECURITY_TEAM_EMAILS", default=["security@oobc.gov.ph"]
)

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Django Axes: Failed login tracking and account lockout
# https://django-axes.readthedocs.io/
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 5  # Lock account after 5 failed login attempts
AXES_COOLOFF_TIME = timedelta(minutes=30)  # Lock duration: 30 minutes
AXES_RESET_ON_SUCCESS = True  # Reset failure count on successful login
AXES_LOCKOUT_TEMPLATE = None  # Use default lockout response
# Track by both username AND IP address (list of lists, each inner list is AND'd)
AXES_LOCKOUT_PARAMETERS = [["username", "ip_address"]]  # Track by username AND IP
AXES_IPWARE_PROXY_COUNT = 1  # Trust X-Forwarded-For header (behind proxy)
AXES_IPWARE_META_PRECEDENCE_ORDER = [
    "HTTP_X_FORWARDED_FOR",
    "REMOTE_ADDR",
]

# Django Axes: Configure authentication backend
AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",  # Check Axes first
    "django.contrib.auth.backends.ModelBackend",  # Then Django's default backend
]

# Django Auditlog: Audit trail for model changes
# https://django-auditlog.readthedocs.io/
AUDITLOG_INCLUDE_TRACKING_MODELS = (
    "common.User",
    "communities.OBCCommunity",
    "communities.MunicipalityCoverage",
    "communities.ProvinceCoverage",
    "mana.Assessment",
    "mana.AssessmentResponse",
    "coordination.Partnership",
    "project_central.Task",
    "project_central.Workflow",
)

# Security Event Logging
LOGGING["loggers"]["axes"] = {
    "handlers": ["console", "file"],
    "level": "WARNING",
    "propagate": False,
}

LOGGING["loggers"]["auditlog"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

LOGGING["loggers"]["django.security"] = {
    "handlers": ["console", "file"],
    "level": "WARNING",
    "propagate": False,
}

LOGGING["loggers"]["api"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

# ========== ORGANIZATION CONTEXT LOGGING ==========
# Enhanced logging for BMMS multi-tenant organization context

# Organization audit logger
LOGGING["loggers"]["organizations.audit"] = {
    "handlers": ["console", "file"],
    "level": "INFO",
    "propagate": False,
}

# Organization security logger
LOGGING["loggers"]["organizations.security"] = {
    "handlers": ["rbac_security", "console"],
    "level": "WARNING",
    "propagate": False,
}

# Add rotating file handler for organization audit logs
LOGGING["handlers"]["organizations_audit"] = {
    "level": "INFO",
    "class": "logging.handlers.RotatingFileHandler",
    "filename": BASE_DIR / "logs" / "organizations_audit.log",
    "maxBytes": 52428800,  # 50MB
    "backupCount": 20,  # Keep 20 backup files (~1GB total)
    "formatter": "security_audit",
}

# Update organization audit logger to use dedicated handler
LOGGING["loggers"]["organizations.audit"]["handlers"] = ["organizations_audit", "console"]

# ========== AI CONFIGURATION ==========
# Google Gemini API Key for AI features
GOOGLE_API_KEY = env.str("GOOGLE_API_KEY", default="")
ENABLE_GEMINI_INTEGRATION_TESTS = env.bool(
    "ENABLE_GEMINI_INTEGRATION_TESTS", default=False
)

# ========== WORK HIERARCHY CONFIGURATION ==========
# WorkItem Migration Completed: October 5, 2025
# See: WORKITEM_MIGRATION_COMPLETE.md

# Feature Flags (controlled via environment variables)
USE_WORKITEM_MODEL = env.bool("USE_WORKITEM_MODEL", default=True)
USE_UNIFIED_CALENDAR = env.bool("USE_UNIFIED_CALENDAR", default=True)
DUAL_WRITE_ENABLED = env.bool("DUAL_WRITE_ENABLED", default=False)
LEGACY_MODELS_READONLY = env.bool("LEGACY_MODELS_READONLY", default=True)

# ========== DEPRECATED MODELS ==========
# The following models are maintained for backward compatibility only:
#
# - common.models.StaffTask (DEPRECATED)
#   Replacement: common.work_item_model.WorkItem with work_type='task'
#   Status: Marked abstract, database table removed
#   Removal: Version 3.0
#
# - coordination.models.Event (DEPRECATED)
#   Replacement: common.work_item_model.WorkItem with work_type='activity'
#   Status: Marked abstract, database table removed
#   Removal: Version 3.0
#
# - project_central.models.ProjectWorkflow (DEPRECATED)
#   Replacement: common.work_item_model.WorkItem with work_type='project'
#   Status: Marked abstract, database table removed
#   Removal: Version 3.0
#
# Migration Documentation:
# - WORKITEM_MIGRATION_COMPLETE.md (migration summary)
# - docs/refactor/LEGACY_CODE_DEPRECATION_PLAN.md (code migration guide)
# - docs/guidelines/EVENT_VS_WORKITEM_ACTIVITY.md (activity vs event clarification)
#
# Legacy model locations (preserved for historical reference):
# - src/common/legacy/ - Documentation and deprecation utilities
# - src/coordination/legacy/ - Event model deprecation info
# - src/project_central/legacy/ - ProjectWorkflow deprecation info

# Enforce read-only mode for legacy models in production
if LEGACY_MODELS_READONLY and not DEBUG:
    # Prevent accidental writes to deprecated models
    # Implemented via model save() method NotImplementedError
    pass

# Migration verification options (deprecated - migration complete)
WORKITEM_MIGRATION_AUTO_FIX = env.bool("WORKITEM_MIGRATION_AUTO_FIX", default=False)
WORKITEM_MIGRATION_STRICT_MODE = env.bool(
    "WORKITEM_MIGRATION_STRICT_MODE", default=False
)

# ========== BMMS MODE CONFIGURATION ==========
# Operational mode: 'obcms' (single-tenant) or 'bmms' (multi-tenant)
BMMS_MODE = env.str('BMMS_MODE', default=BMMSMode.OBCMS)

# Default organization code for OBCMS mode
DEFAULT_ORGANIZATION_CODE = env.str('DEFAULT_ORGANIZATION_CODE', default='OOBC')

# ========== BMMS MULTI-TENANT RBAC CONFIGURATION ==========
# Phase 5: Organization Context and Multi-Tenant Support
# See: docs/plans/bmms/TRANSITION_PLAN.md

RBAC_SETTINGS = {
    # Enable multi-tenant organization context
    # In OBCMS mode, this is automatically set to False
    'ENABLE_MULTI_TENANT': env.bool(
        'ENABLE_MULTI_TENANT',
        default=(BMMS_MODE == BMMSMode.BMMS)
    ),

    # Office of Chief Minister (OCM) organization code
    # OCM has special aggregation access (read-only across all MOAs)
    'OCM_ORGANIZATION_CODE': 'OCM',

    # Permission cache timeout (seconds)
    'CACHE_TIMEOUT': 300,  # 5 minutes

    # Organization switching
    # In OBCMS mode, this is automatically set to False
    'ALLOW_ORGANIZATION_SWITCHING': env.bool(
        'ALLOW_ORGANIZATION_SWITCHING',
        default=(BMMS_MODE == BMMSMode.BMMS)
    ),

    # Session key for current organization
    'SESSION_ORG_KEY': 'current_organization',
}
