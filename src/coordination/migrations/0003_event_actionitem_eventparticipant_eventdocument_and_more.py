# Generated by Django 4.2.21 on 2025-05-22 12:33

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("communities", "0002_stakeholder_stakeholderengagement"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("mana", "0004_baselinestudy_baselinestudyteammember_and_more"),
        ("coordination", "0002_organization_organizationcontact_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the event", max_length=255),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("meeting", "Coordination Meeting"),
                            ("consultation", "Public Consultation"),
                            ("courtesy_call", "Courtesy Call"),
                            ("workshop", "Workshop/Training"),
                            ("forum", "Public Forum"),
                            ("conference", "Conference"),
                            ("seminar", "Seminar"),
                            ("field_visit", "Field Visit"),
                            ("assessment", "Assessment Activity"),
                            ("validation", "Validation Session"),
                            ("orientation", "Orientation"),
                            ("briefing", "Briefing"),
                            ("planning", "Planning Session"),
                            ("review", "Review Meeting"),
                            ("other", "Other"),
                        ],
                        help_text="Type of event",
                        max_length=15,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the event"),
                ),
                (
                    "objectives",
                    models.TextField(
                        blank=True, help_text="Objectives and expected outcomes"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("planned", "Planned"),
                            ("scheduled", "Scheduled"),
                            ("confirmed", "Confirmed"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("postponed", "Postponed"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="draft",
                        help_text="Current status of the event",
                        max_length=15,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of this event",
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField(help_text="Start date of the event")),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date of the event (if multi-day)",
                        null=True,
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True, help_text="Start time of the event", null=True
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True, help_text="End time of the event", null=True
                    ),
                ),
                (
                    "duration_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Expected duration in hours",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "venue",
                    models.CharField(
                        help_text="Venue or location of the event", max_length=255
                    ),
                ),
                ("address", models.TextField(help_text="Full address of the venue")),
                (
                    "coordinates",
                    models.JSONField(
                        blank=True,
                        help_text="Geographic coordinates of the venue (GeoJSON format)",
                        null=True,
                    ),
                ),
                (
                    "is_virtual",
                    models.BooleanField(
                        default=False, help_text="Whether this is a virtual event"
                    ),
                ),
                (
                    "virtual_platform",
                    models.CharField(
                        blank=True,
                        help_text="Virtual platform used (Zoom, Teams, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "virtual_link",
                    models.URLField(blank=True, help_text="Link to virtual meeting"),
                ),
                (
                    "virtual_meeting_id",
                    models.CharField(
                        blank=True, help_text="Virtual meeting ID/code", max_length=100
                    ),
                ),
                (
                    "virtual_passcode",
                    models.CharField(
                        blank=True, help_text="Virtual meeting passcode", max_length=50
                    ),
                ),
                (
                    "expected_participants",
                    models.PositiveIntegerField(
                        default=0, help_text="Expected number of participants"
                    ),
                ),
                (
                    "actual_participants",
                    models.PositiveIntegerField(
                        default=0, help_text="Actual number of participants"
                    ),
                ),
                (
                    "target_audience",
                    models.TextField(
                        blank=True, help_text="Description of target audience"
                    ),
                ),
                (
                    "agenda",
                    models.TextField(blank=True, help_text="Event agenda and program"),
                ),
                (
                    "materials_needed",
                    models.TextField(
                        blank=True, help_text="Materials and resources needed"
                    ),
                ),
                (
                    "minutes",
                    models.TextField(blank=True, help_text="Meeting minutes and notes"),
                ),
                (
                    "outcomes",
                    models.TextField(blank=True, help_text="Key outcomes and results"),
                ),
                (
                    "decisions_made",
                    models.TextField(
                        blank=True, help_text="Decisions made during the event"
                    ),
                ),
                (
                    "key_discussions",
                    models.TextField(
                        blank=True, help_text="Summary of key discussions"
                    ),
                ),
                (
                    "budget_allocated",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Budget allocated for this event",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost incurred",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "feedback_summary",
                    models.TextField(
                        blank=True, help_text="Summary of participant feedback"
                    ),
                ),
                (
                    "satisfaction_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "1 stars"),
                            (2, "2 stars"),
                            (3, "3 stars"),
                            (4, "4 stars"),
                            (5, "5 stars"),
                        ],
                        help_text="Overall satisfaction rating (1-5 stars)",
                        null=True,
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True, help_text="Lessons learned and recommendations"
                    ),
                ),
                (
                    "follow_up_required",
                    models.BooleanField(
                        default=False, help_text="Whether follow-up is required"
                    ),
                ),
                (
                    "follow_up_date",
                    models.DateField(
                        blank=True, help_text="Scheduled follow-up date", null=True
                    ),
                ),
                (
                    "follow_up_notes",
                    models.TextField(
                        blank=True, help_text="Follow-up notes and actions"
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False, help_text="Whether this is a recurring event"
                    ),
                ),
                (
                    "recurrence_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("bi_weekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("annually", "Annually"),
                        ],
                        help_text="Recurrence pattern (if recurring)",
                        max_length=20,
                    ),
                ),
                (
                    "recurrence_end_date",
                    models.DateField(
                        blank=True, help_text="End date for recurring events", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "co_organizers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Co-organizers of the event",
                        related_name="co_organized_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary community involved (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this event",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "facilitators",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Event facilitators",
                        related_name="facilitated_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organizations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Organizations involved in this event",
                        related_name="events",
                        to="coordination.organization",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        help_text="Primary organizer of the event",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="organized_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent_event",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent event (for recurring event instances)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recurring_instances",
                        to="coordination.event",
                    ),
                ),
                (
                    "related_assessment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related assessment (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="mana.assessment",
                    ),
                ),
                (
                    "related_engagement",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related stakeholder engagement (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="events",
                        to="coordination.stakeholderengagement",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="ActionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the action item", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the action required"
                    ),
                ),
                (
                    "deliverable",
                    models.TextField(
                        blank=True, help_text="Expected deliverable or outcome"
                    ),
                ),
                (
                    "assigned_to_external",
                    models.CharField(
                        blank=True,
                        help_text="External person/entity assigned (if not in system)",
                        max_length=255,
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True, help_text="Due date for completion", null=True
                    ),
                ),
                (
                    "estimated_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated hours to complete",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        default="pending",
                        help_text="Current status of the action item",
                        max_length=15,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level",
                        max_length=10,
                    ),
                ),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0,
                        help_text="Progress percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "completion_date",
                    models.DateField(
                        blank=True, help_text="Date of completion", null=True
                    ),
                ),
                (
                    "completion_notes",
                    models.TextField(blank=True, help_text="Notes about completion"),
                ),
                (
                    "verification_date",
                    models.DateField(
                        blank=True, help_text="Date of verification", null=True
                    ),
                ),
                (
                    "requires_follow_up",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this action requires follow-up",
                    ),
                ),
                (
                    "follow_up_date",
                    models.DateField(
                        blank=True, help_text="Scheduled follow-up date", null=True
                    ),
                ),
                (
                    "follow_up_notes",
                    models.TextField(blank=True, help_text="Follow-up notes"),
                ),
                (
                    "last_update",
                    models.TextField(blank=True, help_text="Latest update on progress"),
                ),
                (
                    "last_update_date",
                    models.DateTimeField(
                        blank=True, help_text="Date of last update", null=True
                    ),
                ),
                (
                    "communication_history",
                    models.JSONField(
                        blank=True,
                        help_text="History of communications about this action",
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization responsible for this action",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_action_items",
                        to="coordination.organization",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to complete this action",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_action_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this action item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_action_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Action items this depends on",
                        related_name="dependent_actions",
                        to="coordination.actionitem",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Event this action item originated from",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_items",
                        to="coordination.event",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who verified completion",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_action_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["due_date", "priority", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="EventParticipant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "participant_type",
                    models.CharField(
                        choices=[
                            ("internal", "Internal Staff"),
                            ("stakeholder", "Community Stakeholder"),
                            ("organization", "Organization Representative"),
                            ("guest", "Guest/External"),
                            ("facilitator", "Facilitator"),
                            ("observer", "Observer"),
                        ],
                        help_text="Type of participant",
                        max_length=15,
                    ),
                ),
                (
                    "participation_role",
                    models.CharField(
                        choices=[
                            ("organizer", "Organizer"),
                            ("facilitator", "Facilitator"),
                            ("presenter", "Presenter"),
                            ("participant", "Participant"),
                            ("observer", "Observer"),
                            ("resource_person", "Resource Person"),
                            ("interpreter", "Interpreter/Translator"),
                            ("documentor", "Documentor"),
                        ],
                        default="participant",
                        help_text="Role in the event",
                        max_length=20,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Name of participant (for external/manual entry)",
                        max_length=255,
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="Position/title of participant",
                        max_length=150,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Email address", max_length=254
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, help_text="Phone number", max_length=50
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        help_text="Organization name (for manual entry)",
                        max_length=255,
                    ),
                ),
                (
                    "invitation_status",
                    models.CharField(
                        choices=[
                            ("not_sent", "Not Sent"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("bounced", "Bounced"),
                        ],
                        default="not_sent",
                        help_text="Status of invitation",
                        max_length=15,
                    ),
                ),
                (
                    "invitation_sent_date",
                    models.DateTimeField(
                        blank=True, help_text="Date invitation was sent", null=True
                    ),
                ),
                (
                    "invitation_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("letter", "Letter"),
                            ("in_person", "In Person"),
                            ("other", "Other"),
                        ],
                        default="email",
                        help_text="Method used to send invitation",
                        max_length=20,
                    ),
                ),
                (
                    "response_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("tentative", "Tentative"),
                            ("no_response", "No Response"),
                        ],
                        default="pending",
                        help_text="Response status",
                        max_length=15,
                    ),
                ),
                (
                    "response_date",
                    models.DateTimeField(
                        blank=True, help_text="Date of response", null=True
                    ),
                ),
                (
                    "response_notes",
                    models.TextField(
                        blank=True, help_text="Additional notes from response"
                    ),
                ),
                (
                    "attended",
                    models.BooleanField(
                        default=False,
                        help_text="Whether participant attended the event",
                    ),
                ),
                (
                    "check_in_time",
                    models.DateTimeField(
                        blank=True, help_text="Time participant checked in", null=True
                    ),
                ),
                (
                    "check_out_time",
                    models.DateTimeField(
                        blank=True, help_text="Time participant checked out", null=True
                    ),
                ),
                (
                    "attendance_notes",
                    models.TextField(blank=True, help_text="Notes about attendance"),
                ),
                (
                    "contribution_notes",
                    models.TextField(
                        blank=True, help_text="Notes about participant's contribution"
                    ),
                ),
                (
                    "feedback_provided",
                    models.TextField(
                        blank=True, help_text="Feedback provided by participant"
                    ),
                ),
                (
                    "satisfaction_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "1 stars"),
                            (2, "2 stars"),
                            (3, "3 stars"),
                            (4, "4 stars"),
                            (5, "5 stars"),
                        ],
                        help_text="Participant's satisfaction rating",
                        null=True,
                    ),
                ),
                (
                    "transportation_required",
                    models.BooleanField(
                        default=False, help_text="Whether transportation is required"
                    ),
                ),
                (
                    "accommodation_required",
                    models.BooleanField(
                        default=False, help_text="Whether accommodation is required"
                    ),
                ),
                (
                    "dietary_requirements",
                    models.CharField(
                        blank=True,
                        help_text="Dietary requirements or restrictions",
                        max_length=255,
                    ),
                ),
                (
                    "accessibility_needs",
                    models.CharField(
                        blank=True, help_text="Accessibility needs", max_length=255
                    ),
                ),
                (
                    "special_requirements",
                    models.TextField(
                        blank=True, help_text="Other special requirements"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this participant"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific organization contact",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_participations",
                        to="coordination.organizationcontact",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Event this participant is associated with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="coordination.event",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization represented",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="event_participations",
                        to="coordination.organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Internal user (for internal staff)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name", "user__last_name"],
                "indexes": [
                    models.Index(
                        fields=["event", "participant_type"],
                        name="coordinatio_event_i_5df138_idx",
                    ),
                    models.Index(
                        fields=["response_status", "attended"],
                        name="coordinatio_respons_9ad252_idx",
                    ),
                    models.Index(
                        fields=["organization", "event"],
                        name="coordinatio_organiz_4bd908_idx",
                    ),
                ],
                "unique_together": {("event", "contact"), ("event", "user")},
            },
        ),
        migrations.CreateModel(
            name="EventDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("agenda", "Agenda"),
                            ("minutes", "Minutes"),
                            ("presentation", "Presentation"),
                            ("handout", "Handout"),
                            ("photo", "Photo"),
                            ("recording", "Recording"),
                            ("attendance", "Attendance Sheet"),
                            ("evaluation", "Evaluation Form"),
                            ("report", "Report"),
                            ("invitation", "Invitation"),
                            ("other", "Other"),
                        ],
                        help_text="Type of document",
                        max_length=15,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the document", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the document"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Document file", upload_to="events/%Y/%m/"
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document is publicly accessible",
                    ),
                ),
                (
                    "is_confidential",
                    models.BooleanField(
                        default=False, help_text="Whether this document is confidential"
                    ),
                ),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this document"
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="Event this document belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="coordination.event",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this document",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="uploaded_event_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-upload_date"],
                "indexes": [
                    models.Index(
                        fields=["event", "document_type"],
                        name="coordinatio_event_i_56c819_idx",
                    ),
                    models.Index(
                        fields=["is_public", "is_confidential"],
                        name="coordinatio_is_publ_6596fa_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["event_type", "status"], name="coordinatio_event_t_753ae8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start_date", "priority"], name="coordinatio_start_d_a3a9a9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["community", "status"], name="coordinatio_communi_1b0212_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["organizer", "start_date"],
                name="coordinatio_organiz_127b77_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="actionitem",
            index=models.Index(
                fields=["event", "status"], name="coordinatio_event_i_35acf9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="actionitem",
            index=models.Index(
                fields=["assigned_to", "status"], name="coordinatio_assigne_252a02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="actionitem",
            index=models.Index(
                fields=["due_date", "priority"], name="coordinatio_due_dat_821709_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="actionitem",
            index=models.Index(
                fields=["assigned_organization", "status"],
                name="coordinatio_assigne_e648c9_idx",
            ),
        ),
    ]
