# Generated by Django 4.2.24 on 2025-10-01 10:27

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0013_calendarresource_recurringeventpattern_and_more'),
        ('coordination', '0008_maoquarterlyreport_and_more'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='event',
            name='recurrence_end_date',
        ),
        migrations.AddField(
            model_name='event',
            name='is_recurrence_exception',
            field=models.BooleanField(default=False, help_text='True if this instance was edited separately from the recurrence pattern'),
        ),
        migrations.AddField(
            model_name='event',
            name='recurrence_parent',
            field=models.ForeignKey(blank=True, help_text='Parent event if this is a recurrence instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_instances', to='coordination.event'),
        ),
        migrations.AddField(
            model_name='eventparticipant',
            name='attendance_status',
            field=models.CharField(choices=[('not_checked_in', 'Not Checked In'), ('checked_in', 'Checked In'), ('checked_out', 'Checked Out'), ('absent', 'Absent')], default='not_checked_in', help_text='Current attendance status', max_length=20),
        ),
        migrations.AddField(
            model_name='eventparticipant',
            name='check_in_method',
            field=models.CharField(blank=True, choices=[('manual', 'Manual'), ('qr_code', 'QR Code'), ('nfc', 'NFC')], help_text='Method used for check-in', max_length=20),
        ),
        migrations.AddField(
            model_name='eventparticipant',
            name='rsvp_status',
            field=models.CharField(choices=[('invited', 'Invited'), ('going', 'Going'), ('maybe', 'Maybe'), ('declined', 'Declined')], default='invited', help_text='RSVP status for the event', max_length=20),
        ),
        migrations.AddField(
            model_name='stakeholderengagement',
            name='is_recurrence_exception',
            field=models.BooleanField(default=False, help_text='True if this instance was edited separately from the recurrence pattern'),
        ),
        migrations.AddField(
            model_name='stakeholderengagement',
            name='is_recurring',
            field=models.BooleanField(default=False, help_text='Whether this is a recurring engagement'),
        ),
        migrations.AddField(
            model_name='stakeholderengagement',
            name='recurrence_parent',
            field=models.ForeignKey(blank=True, help_text='Parent engagement if this is a recurrence instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_instances', to='coordination.stakeholderengagement'),
        ),
        migrations.AddField(
            model_name='stakeholderengagement',
            name='recurrence_pattern',
            field=models.ForeignKey(blank=True, help_text='Recurrence pattern configuration (RFC 5545 compatible)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_engagements', to='common.recurringeventpattern'),
        ),
        migrations.AlterField(
            model_name='event',
            name='parent_event',
            field=models.ForeignKey(blank=True, help_text='[DEPRECATED] Use recurrence_parent instead', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances_legacy', to='coordination.event'),
        ),
        migrations.AlterField(
            model_name='event',
            name='recurrence_pattern',
            field=models.ForeignKey(blank=True, help_text='Recurrence pattern configuration (RFC 5545 compatible)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_events', to='common.recurringeventpattern'),
        ),
    ]
