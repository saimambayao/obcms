# Generated by Django 5.2.7 on 2025-10-10 17:27

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0035_alter_calendarresource_options_and_more"),
        ("coordination", "0013_add_model_validation_constraints"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CoordinationNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "note_date",
                    models.DateField(
                        help_text="Date of the coordination activity or meeting."
                    ),
                ),
                (
                    "note_time",
                    models.TimeField(
                        blank=True,
                        help_text="Optional start time reference for the meeting.",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Subject or title for this coordination note entry.",
                        max_length=255,
                    ),
                ),
                (
                    "location_description",
                    models.CharField(
                        blank=True,
                        help_text="Venue or location details, if different from the linked activity.",
                        max_length=255,
                    ),
                ),
                (
                    "meeting_overview",
                    models.TextField(
                        blank=True,
                        help_text="Objectives or high-level context for the coordination activity.",
                    ),
                ),
                (
                    "key_agenda",
                    models.TextField(
                        blank=True, help_text="Agenda items covered during the meeting."
                    ),
                ),
                (
                    "discussion_highlights",
                    models.TextField(
                        blank=True,
                        help_text="Key discussion points and insights captured during the session.",
                    ),
                ),
                (
                    "decisions",
                    models.TextField(
                        blank=True, help_text="Decisions or agreements reached."
                    ),
                ),
                (
                    "action_items",
                    models.TextField(
                        blank=True,
                        help_text="Action items with responsible persons or teams.",
                    ),
                ),
                (
                    "follow_up_items",
                    models.TextField(
                        blank=True,
                        help_text="Follow-up requirements, deadlines, or support needed.",
                    ),
                ),
                (
                    "partnership_details",
                    models.TextField(
                        blank=True,
                        help_text="Specific partnership updates, commitments, or concerns.",
                    ),
                ),
                (
                    "attachments_links",
                    models.TextField(
                        blank=True,
                        help_text="Reference links, shared folders, or document notes.",
                    ),
                ),
                (
                    "additional_notes",
                    models.TextField(
                        blank=True,
                        help_text="Other remarks, observations, or reminders.",
                    ),
                ),
                (
                    "coverage_map_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Serialized map metadata for geographic coverage (pins, bounds).",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "coverage_barangay",
                    models.ForeignKey(
                        blank=True,
                        help_text="Barangay covered, if applicable.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordination_notes",
                        to="common.barangay",
                    ),
                ),
                (
                    "coverage_municipality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Municipality or city covered.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordination_notes",
                        to="common.municipality",
                    ),
                ),
                (
                    "coverage_province",
                    models.ForeignKey(
                        blank=True,
                        help_text="Province covered by this coordination effort.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordination_notes",
                        to="common.province",
                    ),
                ),
                (
                    "coverage_region",
                    models.ForeignKey(
                        blank=True,
                        help_text="Region covered by this coordination effort.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordination_notes",
                        to="common.region",
                    ),
                ),
                (
                    "partner_organizations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Partner organizations present in the activity.",
                        related_name="coordination_notes",
                        to="coordination.organization",
                    ),
                ),
                (
                    "partnership_agreements",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Related partnership agreements discussed.",
                        related_name="coordination_notes",
                        to="coordination.partnership",
                    ),
                ),
                (
                    "recorded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Staff member who recorded these notes.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordination_notes_recorded",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "staff_participants",
                    models.ManyToManyField(
                        blank=True,
                        help_text="OOBC staff who were present or contributed.",
                        related_name="coordination_notes_participated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "work_item",
                    models.ForeignKey(
                        help_text="Linked coordination activity (WorkItem with work_type='activity').",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coordination_notes",
                        to="common.workitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coordination Note",
                "verbose_name_plural": "Coordination Notes",
                "ordering": ["-note_date", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["note_date"], name="coordinatio_note_da_636500_idx"
                    ),
                    models.Index(
                        fields=["work_item"], name="coordinatio_work_it_1de5ea_idx"
                    ),
                ],
            },
        ),
    ]
