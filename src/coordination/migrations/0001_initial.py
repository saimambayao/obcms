# Generated by Django 4.2.21 on 2025-05-22 12:13

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("mana", "0002_needscategory_needsprioritization_need_and_more"),
        ("communities", "0002_stakeholder_stakeholderengagement"),
    ]

    operations = [
        migrations.CreateModel(
            name="EngagementFacilitator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("lead_facilitator", "Lead Facilitator"),
                            ("co_facilitator", "Co-Facilitator"),
                            ("note_taker", "Note Taker"),
                            ("logistics_coordinator", "Logistics Coordinator"),
                            ("translator", "Translator/Interpreter"),
                            ("technical_expert", "Technical Expert"),
                            ("observer", "Observer"),
                        ],
                        help_text="Role of the facilitator in this engagement",
                        max_length=25,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary facilitator",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this facilitator's role",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StakeholderEngagementType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the engagement type",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("consultation", "Public Consultation"),
                            ("meeting", "Coordination Meeting"),
                            ("workshop", "Workshop/Training"),
                            ("focus_group", "Focus Group Discussion"),
                            ("interview", "Key Informant Interview"),
                            ("survey", "Survey/Questionnaire"),
                            ("courtesy_call", "Courtesy Call"),
                            ("field_visit", "Field Visit"),
                            ("community_assembly", "Community Assembly"),
                            ("validation", "Validation Session"),
                        ],
                        help_text="Category of engagement",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of this engagement type"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="CSS icon class for this engagement type",
                        max_length=50,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Color code for this engagement type",
                        max_length=7,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this engagement type is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Stakeholder Engagement Types",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="StakeholderEngagement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the engagement activity", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the engagement activity"
                    ),
                ),
                (
                    "objectives",
                    models.TextField(help_text="Objectives and expected outcomes"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("postponed", "Postponed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        help_text="Current status of the engagement",
                        max_length=15,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of this engagement",
                        max_length=10,
                    ),
                ),
                (
                    "participation_level",
                    models.CharField(
                        choices=[
                            ("inform", "Inform"),
                            ("consult", "Consult"),
                            ("involve", "Involve"),
                            ("collaborate", "Collaborate"),
                            ("empower", "Empower"),
                        ],
                        default="consult",
                        help_text="Level of participation (IAP2 framework)",
                        max_length=12,
                    ),
                ),
                (
                    "planned_date",
                    models.DateTimeField(
                        help_text="Planned date and time for the engagement"
                    ),
                ),
                (
                    "actual_start_datetime",
                    models.DateTimeField(
                        blank=True, help_text="Actual start date and time", null=True
                    ),
                ),
                (
                    "actual_end_datetime",
                    models.DateTimeField(
                        blank=True, help_text="Actual end date and time", null=True
                    ),
                ),
                (
                    "duration_minutes",
                    models.IntegerField(
                        blank=True, help_text="Planned duration in minutes", null=True
                    ),
                ),
                (
                    "venue",
                    models.CharField(
                        help_text="Venue or location of the engagement", max_length=200
                    ),
                ),
                ("address", models.TextField(help_text="Full address of the venue")),
                (
                    "coordinates",
                    models.JSONField(
                        blank=True,
                        help_text="Geographic coordinates of the venue (GeoJSON format)",
                        null=True,
                    ),
                ),
                (
                    "target_participants",
                    models.IntegerField(help_text="Target number of participants"),
                ),
                (
                    "actual_participants",
                    models.IntegerField(
                        default=0, help_text="Actual number of participants"
                    ),
                ),
                (
                    "stakeholder_groups",
                    models.TextField(
                        help_text="Description of stakeholder groups involved"
                    ),
                ),
                (
                    "methodology",
                    models.TextField(
                        help_text="Methodology and approach for the engagement"
                    ),
                ),
                (
                    "materials_needed",
                    models.TextField(
                        blank=True, help_text="Materials and resources needed"
                    ),
                ),
                (
                    "budget_allocated",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Budget allocated for this engagement",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost incurred",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "key_outcomes",
                    models.TextField(blank=True, help_text="Key outcomes and results"),
                ),
                (
                    "feedback_summary",
                    models.TextField(
                        blank=True, help_text="Summary of feedback received"
                    ),
                ),
                (
                    "action_items",
                    models.TextField(
                        blank=True, help_text="Action items and follow-up activities"
                    ),
                ),
                (
                    "satisfaction_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "1 stars"),
                            (2, "2 stars"),
                            (3, "3 stars"),
                            (4, "4 stars"),
                            (5, "5 stars"),
                        ],
                        help_text="Overall satisfaction rating (1-5 stars)",
                        null=True,
                    ),
                ),
                (
                    "meeting_minutes",
                    models.TextField(
                        blank=True, help_text="Meeting minutes or detailed notes"
                    ),
                ),
                (
                    "attendance_list",
                    models.JSONField(
                        blank=True,
                        help_text="List of attendees (JSON format)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community",
                    models.ForeignKey(
                        help_text="Primary community involved",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stakeholder_engagements",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this engagement",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_engagements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "engagement_type",
                    models.ForeignKey(
                        help_text="Type of engagement activity",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="coordination.stakeholderengagementtype",
                    ),
                ),
                (
                    "facilitators",
                    models.ManyToManyField(
                        help_text="Staff members facilitating the engagement",
                        related_name="facilitated_engagements",
                        through="coordination.EngagementFacilitator",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_assessment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related assessment (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stakeholder_engagements",
                        to="mana.assessment",
                    ),
                ),
            ],
            options={
                "ordering": ["-planned_date"],
            },
        ),
        migrations.CreateModel(
            name="EngagementTracking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                        ],
                        help_text="Tracking period type",
                        max_length=10,
                    ),
                ),
                (
                    "period_start",
                    models.DateField(help_text="Start date of the tracking period"),
                ),
                (
                    "period_end",
                    models.DateField(help_text="End date of the tracking period"),
                ),
                (
                    "total_engagements",
                    models.IntegerField(
                        default=0, help_text="Total number of engagements in the period"
                    ),
                ),
                (
                    "completed_engagements",
                    models.IntegerField(
                        default=0, help_text="Number of completed engagements"
                    ),
                ),
                (
                    "total_participants",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of participants across all engagements",
                    ),
                ),
                (
                    "unique_participants",
                    models.IntegerField(
                        default=0, help_text="Number of unique participants"
                    ),
                ),
                (
                    "average_satisfaction",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Average satisfaction rating",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "total_feedback_items",
                    models.IntegerField(
                        default=0, help_text="Total number of feedback items received"
                    ),
                ),
                (
                    "positive_feedback_count",
                    models.IntegerField(
                        default=0, help_text="Number of positive feedback items"
                    ),
                ),
                (
                    "negative_feedback_count",
                    models.IntegerField(
                        default=0, help_text="Number of negative feedback items"
                    ),
                ),
                (
                    "feedback_response_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of feedback items that received responses",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "engagement_reach",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of community reached through engagements",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "repeat_participation_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of participants who attended multiple engagements",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "diversity_index",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Diversity index of participants (0-1 scale)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "calculated_by",
                    models.ForeignKey(
                        help_text="User who calculated these metrics",
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "community",
                    models.ForeignKey(
                        help_text="Community being tracked",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="engagement_tracking",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "ordering": ["-period_start"],
            },
        ),
        migrations.AddField(
            model_name="engagementfacilitator",
            name="engagement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="coordination.stakeholderengagement",
            ),
        ),
        migrations.AddField(
            model_name="engagementfacilitator",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="ConsultationFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback_type",
                    models.CharField(
                        choices=[
                            ("verbal", "Verbal Feedback"),
                            ("written", "Written Feedback"),
                            ("survey", "Survey Response"),
                            ("observation", "Observation Notes"),
                            ("complaint", "Complaint/Concern"),
                            ("suggestion", "Suggestion/Recommendation"),
                        ],
                        help_text="Type of feedback",
                        max_length=15,
                    ),
                ),
                (
                    "participant_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the participant (optional)",
                        max_length=100,
                    ),
                ),
                (
                    "participant_organization",
                    models.CharField(
                        blank=True,
                        help_text="Organization the participant represents",
                        max_length=150,
                    ),
                ),
                (
                    "feedback_content",
                    models.TextField(help_text="Content of the feedback"),
                ),
                (
                    "topic_area",
                    models.CharField(
                        blank=True,
                        help_text="Topic or subject area of the feedback",
                        max_length=100,
                    ),
                ),
                (
                    "sentiment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("positive", "Positive"),
                            ("neutral", "Neutral"),
                            ("negative", "Negative"),
                            ("mixed", "Mixed"),
                        ],
                        help_text="Overall sentiment of the feedback",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level for addressing this feedback",
                        max_length=10,
                    ),
                ),
                (
                    "response_provided",
                    models.TextField(
                        blank=True, help_text="Response provided to the feedback"
                    ),
                ),
                (
                    "action_taken",
                    models.TextField(
                        blank=True, help_text="Action taken based on this feedback"
                    ),
                ),
                (
                    "is_addressed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this feedback has been addressed",
                    ),
                ),
                (
                    "addressed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when feedback was addressed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "addressed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who addressed this feedback",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="addressed_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "engagement",
                    models.ForeignKey(
                        help_text="Engagement this feedback relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback_items",
                        to="coordination.stakeholderengagement",
                    ),
                ),
                (
                    "recorded_by",
                    models.ForeignKey(
                        help_text="User who recorded this feedback",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="recorded_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="stakeholderengagement",
            index=models.Index(
                fields=["community", "status"], name="coordinatio_communi_a6e15b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="stakeholderengagement",
            index=models.Index(
                fields=["engagement_type", "planned_date"],
                name="coordinatio_engagem_12ed22_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="stakeholderengagement",
            index=models.Index(
                fields=["status", "priority"], name="coordinatio_status_f4abc4_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="engagementtracking",
            unique_together={("community", "period_type", "period_start")},
        ),
        migrations.AlterUniqueTogether(
            name="engagementfacilitator",
            unique_together={("engagement", "user", "role")},
        ),
    ]
