# Generated by Django 5.2.7 on 2025-10-24 14:18

import common.validators
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('communities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StakeholderEngagementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the engagement type', max_length=100, unique=True)),
                ('category', models.CharField(choices=[('consultation', 'Public Consultation'), ('meeting', 'Coordination Meeting'), ('workshop', 'Workshop/Training'), ('focus_group', 'Focus Group Discussion'), ('interview', 'Key Informant Interview'), ('survey', 'Survey/Questionnaire'), ('courtesy_call', 'Courtesy Call'), ('field_visit', 'Field Visit'), ('community_assembly', 'Community Assembly'), ('validation', 'Validation Session')], help_text='Category of engagement', max_length=25)),
                ('description', models.TextField(help_text='Description of this engagement type')),
                ('icon', models.CharField(blank=True, help_text='CSS icon class for this engagement type', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Color code for this engagement type', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this engagement type is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Stakeholder Engagement Types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CommunicationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the template', max_length=150)),
                ('template_type', models.CharField(choices=[('email', 'Email Template'), ('letter', 'Letter Template'), ('memo', 'Memorandum Template'), ('invitation', 'Invitation Template'), ('announcement', 'Announcement Template'), ('request', 'Request Template'), ('response', 'Response Template'), ('report', 'Report Template'), ('other', 'Other Template')], help_text='Type of template', max_length=15)),
                ('description', models.TextField(blank=True, help_text='Description of when to use this template')),
                ('subject_template', models.CharField(blank=True, help_text='Subject line template (with placeholders)', max_length=255)),
                ('content_template', models.TextField(help_text='Content template (with placeholders like {{organization_name}}, {{date}}, etc.)')),
                ('language', models.CharField(choices=[('en', 'English'), ('fil', 'Filipino'), ('ar', 'Arabic'), ('maguindanaon', 'Maguindanaon'), ('maranao', 'Maranao'), ('tausug', 'Tausug')], default='en', help_text='Language of the template', max_length=15)),
                ('formal_level', models.CharField(choices=[('formal', 'Formal'), ('semi_formal', 'Semi-Formal'), ('informal', 'Informal')], default='formal', help_text='Level of formality', max_length=15)),
                ('usage_instructions', models.TextField(blank=True, help_text='Instructions on how to use this template')),
                ('placeholders', models.JSONField(blank=True, help_text='List of available placeholders and their descriptions', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is currently active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default template for this type')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether communications using this template require approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver', models.ForeignKey(blank=True, help_text='User who can approve communications using this template', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='template_approvals', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this template', on_delete=django.db.models.deletion.PROTECT, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ConsultationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('verbal', 'Verbal Feedback'), ('written', 'Written Feedback'), ('survey', 'Survey Response'), ('observation', 'Observation Notes'), ('complaint', 'Complaint/Concern'), ('suggestion', 'Suggestion/Recommendation')], help_text='Type of feedback', max_length=15)),
                ('participant_name', models.CharField(blank=True, help_text='Name of the participant (optional)', max_length=100)),
                ('participant_organization', models.CharField(blank=True, help_text='Organization the participant represents', max_length=150)),
                ('feedback_content', models.TextField(help_text='Content of the feedback')),
                ('topic_area', models.CharField(blank=True, help_text='Topic or subject area of the feedback', max_length=100)),
                ('sentiment', models.CharField(blank=True, choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('mixed', 'Mixed')], help_text='Overall sentiment of the feedback', max_length=10, null=True)),
                ('priority_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level for addressing this feedback', max_length=10)),
                ('response_provided', models.TextField(blank=True, help_text='Response provided to the feedback')),
                ('action_taken', models.TextField(blank=True, help_text='Action taken based on this feedback')),
                ('is_addressed', models.BooleanField(default=False, help_text='Whether this feedback has been addressed')),
                ('addressed_date', models.DateTimeField(blank=True, help_text='Date when feedback was addressed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('addressed_by', models.ForeignKey(blank=True, help_text='User who addressed this feedback', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='addressed_feedback', to=settings.AUTH_USER_MODEL)),
                ('recorded_by', models.ForeignKey(help_text='User who recorded this feedback', on_delete=django.db.models.deletion.PROTECT, related_name='recorded_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EngagementFacilitator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('lead_facilitator', 'Lead Facilitator'), ('co_facilitator', 'Co-Facilitator'), ('note_taker', 'Note Taker'), ('logistics_coordinator', 'Logistics Coordinator'), ('translator', 'Translator/Interpreter'), ('technical_expert', 'Technical Expert'), ('observer', 'Observer')], help_text='Role of the facilitator in this engagement', max_length=25)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary facilitator')),
                ('notes', models.TextField(blank=True, help_text="Additional notes about this facilitator's role")),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EngagementTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], help_text='Tracking period type', max_length=10)),
                ('period_start', models.DateField(help_text='Start date of the tracking period')),
                ('period_end', models.DateField(help_text='End date of the tracking period')),
                ('total_engagements', models.IntegerField(default=0, help_text='Total number of engagements in the period')),
                ('completed_engagements', models.IntegerField(default=0, help_text='Number of completed engagements')),
                ('total_participants', models.IntegerField(default=0, help_text='Total number of participants across all engagements')),
                ('unique_participants', models.IntegerField(default=0, help_text='Number of unique participants')),
                ('average_satisfaction', models.DecimalField(blank=True, decimal_places=2, help_text='Average satisfaction rating', max_digits=3, null=True)),
                ('total_feedback_items', models.IntegerField(default=0, help_text='Total number of feedback items received')),
                ('positive_feedback_count', models.IntegerField(default=0, help_text='Number of positive feedback items')),
                ('negative_feedback_count', models.IntegerField(default=0, help_text='Number of negative feedback items')),
                ('feedback_response_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of feedback items that received responses', max_digits=5, null=True)),
                ('engagement_reach', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of community reached through engagements', max_digits=5, null=True)),
                ('repeat_participation_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of participants who attended multiple engagements', max_digits=5, null=True)),
                ('diversity_index', models.DecimalField(blank=True, decimal_places=2, help_text='Diversity index of participants (0-1 scale)', max_digits=3, null=True)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calculated_by', models.ForeignKey(help_text='User who calculated these metrics', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(help_text='Community being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='engagement_tracking', to='communities.obccommunity')),
            ],
            options={
                'ordering': ['-period_start'],
            },
        ),
        migrations.CreateModel(
            name='InterMOAPartnership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the inter-MOA partnership', max_length=255)),
                ('partnership_type', models.CharField(choices=[('bilateral', 'Bilateral Partnership (2 MOAs)'), ('multilateral', 'Multilateral Partnership (3+ MOAs)'), ('joint_program', 'Joint Program Implementation'), ('resource_sharing', 'Resource Sharing Agreement'), ('capacity_building', 'Capacity Building Initiative'), ('policy_coordination', 'Policy Coordination'), ('service_delivery', 'Joint Service Delivery'), ('other', 'Other')], help_text='Type of partnership between MOAs', max_length=30)),
                ('description', models.TextField(help_text='Detailed description of the partnership objectives and scope')),
                ('objectives', models.TextField(help_text='Specific objectives and goals of this partnership')),
                ('lead_moa_code', models.CharField(help_text="Code of the lead MOA (e.g., 'OOBC', 'MOH', 'MAFAR')", max_length=20)),
                ('participating_moa_codes', models.JSONField(default=list, help_text="List of participating MOA codes (e.g., ['MOH', 'MOLE'])")),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('terminated', 'Terminated')], default='draft', help_text='Current status of the partnership', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this partnership', max_length=10)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Overall progress (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_date', models.DateField(blank=True, help_text='Partnership start date', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Partnership end date (if applicable)', null=True)),
                ('focal_person_name', models.CharField(blank=True, help_text='Name of the focal person managing this partnership', max_length=255)),
                ('focal_person_email', models.EmailField(blank=True, help_text='Email of the focal person', max_length=254)),
                ('focal_person_phone', models.CharField(blank=True, help_text='Phone number of the focal person', max_length=50)),
                ('expected_outcomes', models.TextField(blank=True, help_text='Expected outcomes and impact of the partnership')),
                ('deliverables', models.TextField(blank=True, help_text='Key deliverables and milestones')),
                ('total_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Total budget for the partnership (in PHP)', max_digits=15, null=True)),
                ('resource_commitments', models.JSONField(blank=True, default=dict, help_text='Resource commitments by each MOA (JSON: {moa_code: resources})')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this partnership is publicly visible (for OCM oversight)')),
                ('requires_ocm_approval', models.BooleanField(default=False, help_text='Whether this partnership requires OCM (Office of the Chief Minister) approval')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this partnership', on_delete=django.db.models.deletion.PROTECT, related_name='created_inter_moa_partnerships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inter-MOA Partnership',
                'verbose_name_plural': 'Inter-MOA Partnerships',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Full name of the organization', max_length=255)),
                ('acronym', models.CharField(blank=True, help_text='Organization acronym (e.g., MILF, ARMM, DOH)', max_length=20)),
                ('organization_type', models.CharField(choices=[('bmoa', 'BARMM Ministry/Agency/Office'), ('lgu', 'Local Government Unit'), ('nga', 'National Government Agency'), ('ingo', 'International NGO'), ('ngo', 'Non-Governmental Organization'), ('cso', 'Civil Society Organization'), ('academic', 'Academic Institution'), ('religious', 'Religious Organization'), ('private', 'Private Sector'), ('media', 'Media Organization'), ('donor', 'Donor Agency'), ('tribal', 'Tribal/Indigenous Organization'), ('other', 'Other')], help_text='Type of organization', max_length=15)),
                ('description', models.TextField(blank=True, help_text='Description of the organization and its mandate')),
                ('mandate', models.TextField(blank=True, help_text='Official mandate of the organization (particularly for government agencies)')),
                ('powers_and_functions', models.TextField(blank=True, help_text='Powers and functions of the organization (particularly for government agencies)')),
                ('address', models.TextField(blank=True, help_text='Physical address of the organization')),
                ('mailing_address', models.TextField(blank=True, help_text='Mailing address (if different from physical address)')),
                ('phone', models.CharField(blank=True, help_text='Primary phone number', max_length=50)),
                ('mobile', models.CharField(blank=True, help_text='Mobile phone number', max_length=50)),
                ('email', models.EmailField(blank=True, help_text='Primary email address', max_length=254)),
                ('website', models.URLField(blank=True, help_text='Organization website')),
                ('social_media', models.JSONField(blank=True, help_text='Social media accounts (Facebook, Twitter, etc.)', null=True)),
                ('head_of_organization', models.CharField(blank=True, help_text='Name of the head of organization (e.g., Minister, Mayor, Director)', max_length=255)),
                ('head_position', models.CharField(blank=True, help_text='Position title of the head of organization', max_length=100)),
                ('focal_person', models.CharField(blank=True, help_text='Name of the designated focal person for OBC matters', max_length=255)),
                ('focal_person_position', models.CharField(blank=True, help_text='Position of the focal person', max_length=100)),
                ('focal_person_contact', models.CharField(blank=True, help_text='Contact information for the focal person', max_length=100)),
                ('focal_person_email', models.EmailField(blank=True, help_text='Email address of the focal person', max_length=254)),
                ('partnership_level', models.CharField(blank=True, choices=[('implementing', 'Implementing Partner'), ('funding', 'Funding Partner'), ('technical', 'Technical Partner'), ('coordinating', 'Coordinating Agency'), ('beneficiary', 'Beneficiary Organization'), ('observer', 'Observer'), ('other', 'Other')], help_text='Level of partnership with OOBC', max_length=15)),
                ('partnership_start_date', models.DateField(blank=True, help_text='Date when partnership was established', null=True)),
                ('partnership_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='active', help_text='Current partnership status', max_length=20)),
                ('areas_of_expertise', models.TextField(blank=True, help_text='Areas of expertise and services provided')),
                ('geographic_coverage', models.TextField(blank=True, help_text='Geographic areas of operation')),
                ('target_beneficiaries', models.TextField(blank=True, help_text='Target beneficiaries and communities served')),
                ('annual_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Annual budget (in PHP)', max_digits=15, null=True)),
                ('staff_count', models.PositiveIntegerField(blank=True, help_text='Number of staff members', null=True)),
                ('registration_number', models.CharField(blank=True, help_text='Official registration number (SEC, DTI, etc.)', max_length=100)),
                ('tax_identification_number', models.CharField(blank=True, help_text='Tax Identification Number (TIN)', max_length=50)),
                ('accreditation_details', models.TextField(blank=True, help_text='Accreditation details and certifications')),
                ('last_engagement_date', models.DateField(blank=True, help_text='Date of last engagement or communication', null=True)),
                ('engagement_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually'), ('as_needed', 'As Needed')], default='as_needed', help_text='Frequency of engagement', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this organization is currently active')),
                ('is_priority', models.BooleanField(default=False, help_text='Whether this is a priority partner organization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barangay', models.ForeignKey(blank=True, help_text='Barangay where the primary office is located', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organizations', to='common.barangay')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this organization record', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_organizations', to=settings.AUTH_USER_MODEL)),
                ('municipality', models.ForeignKey(blank=True, help_text='Municipality or city where the primary office is located', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organizations', to='common.municipality')),
                ('province', models.ForeignKey(blank=True, help_text="Province where the organization's primary office is located", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organizations', to='common.province')),
                ('region', models.ForeignKey(blank=True, help_text="Region where the organization's primary office is located", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organizations', to='common.region')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MAOFocalPerson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('primary', 'Primary Focal Person'), ('alternate', 'Alternate Focal Person')], default='primary', help_text='Role: primary or alternate focal person', max_length=10)),
                ('designation', models.CharField(help_text='Official title/position within the MAO', max_length=255)),
                ('contact_email', models.EmailField(help_text='Official email address', max_length=254)),
                ('contact_phone', models.CharField(blank=True, help_text='Primary phone number', max_length=50)),
                ('contact_mobile', models.CharField(blank=True, help_text='Mobile phone number', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this focal person is currently active')),
                ('appointed_date', models.DateField(help_text='Date when appointed as focal person')),
                ('end_date', models.DateField(blank=True, help_text='Date when focal person role ended (if applicable)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this focal person')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User account for this focal person', on_delete=django.db.models.deletion.CASCADE, related_name='mao_focal_roles', to=settings.AUTH_USER_MODEL)),
                ('mao', models.ForeignKey(help_text='MAO that this focal person represents', limit_choices_to={'organization_type': 'bmoa'}, on_delete=django.db.models.deletion.CASCADE, related_name='focal_persons', to='coordination.organization')),
            ],
            options={
                'verbose_name': 'MAO Focal Person',
                'verbose_name_plural': 'MAO Focal Persons',
                'ordering': ['mao__name', 'role', '-appointed_date'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_type', models.CharField(choices=[('primary', 'Primary Contact'), ('secondary', 'Secondary Contact'), ('technical', 'Technical Contact'), ('administrative', 'Administrative Contact'), ('executive', 'Executive Contact'), ('field', 'Field Contact'), ('emergency', 'Emergency Contact')], help_text='Type of contact', max_length=15)),
                ('first_name', models.CharField(help_text='First name', max_length=100)),
                ('last_name', models.CharField(help_text='Last name', max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text='Middle name', max_length=100)),
                ('title', models.CharField(blank=True, help_text='Professional title (Mr., Ms., Dr., Eng., etc.)', max_length=100)),
                ('position', models.CharField(help_text='Position/designation in the organization', max_length=150)),
                ('department', models.CharField(blank=True, help_text='Department or unit', max_length=150)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=50)),
                ('mobile', models.CharField(blank=True, help_text='Mobile number', max_length=50)),
                ('alternative_email', models.EmailField(blank=True, help_text='Alternative email address', max_length=254)),
                ('areas_of_responsibility', models.TextField(blank=True, help_text='Areas of responsibility and expertise')),
                ('languages_spoken', models.CharField(blank=True, help_text='Languages spoken (comma-separated)', max_length=200)),
                ('preferred_communication_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('mobile', 'Mobile'), ('letter', 'Official Letter'), ('meeting', 'Face-to-face Meeting')], default='email', help_text='Preferred method of communication', max_length=20)),
                ('best_contact_time', models.CharField(blank=True, help_text='Best time to contact (e.g., 9AM-5PM weekdays)', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this contact is currently active')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary contact for the organization')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this contact')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(help_text='Organization this contact belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='coordination.organization')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='CommunicationSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_type', models.CharField(choices=[('one_time', 'One-time'), ('recurring', 'Recurring'), ('follow_up', 'Follow-up Reminder'), ('deadline', 'Deadline Reminder')], help_text='Type of schedule', max_length=15)),
                ('title', models.CharField(help_text='Title or description of the scheduled communication', max_length=200)),
                ('scheduled_date', models.DateField(help_text='Date when communication should be sent/performed')),
                ('scheduled_time', models.TimeField(blank=True, help_text='Time when communication should be sent/performed', null=True)),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('bi_weekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('semi_annual', 'Semi-annual'), ('annual', 'Annual')], help_text='Recurrence pattern (for recurring schedules)', max_length=15)),
                ('recurrence_end_date', models.DateField(blank=True, help_text='End date for recurring schedule', null=True)),
                ('subject', models.CharField(help_text='Subject or title of the communication', max_length=255)),
                ('message_content', models.TextField(blank=True, help_text='Pre-written message content')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this schedule is currently active')),
                ('last_executed', models.DateTimeField(blank=True, help_text='Date and time of last execution', null=True)),
                ('next_execution', models.DateTimeField(help_text='Date and time of next execution')),
                ('execution_count', models.PositiveIntegerField(default=0, help_text='Number of times this schedule has been executed')),
                ('send_reminder', models.BooleanField(default=True, help_text='Whether to send reminder notifications')),
                ('reminder_days_before', models.PositiveIntegerField(default=1, help_text='Days before scheduled date to send reminder')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and instructions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='User assigned to handle this communication', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_communications', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created this schedule', on_delete=django.db.models.deletion.PROTECT, related_name='created_schedules', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, help_text='Communication template to use', null=True, on_delete=django.db.models.deletion.SET_NULL, to='coordination.communicationtemplate')),
                ('organization', models.ForeignKey(help_text='Organization for this scheduled communication', on_delete=django.db.models.deletion.CASCADE, related_name='communication_schedules', to='coordination.organization')),
                ('contact', models.ForeignKey(blank=True, help_text='Specific contact person (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='communication_schedules', to='coordination.organizationcontact')),
            ],
            options={
                'ordering': ['next_execution'],
            },
        ),
        migrations.CreateModel(
            name='Communication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('communication_type', models.CharField(choices=[('email', 'Email'), ('letter', 'Official Letter'), ('meeting', 'Meeting'), ('phone', 'Phone Call'), ('video_call', 'Video Conference'), ('site_visit', 'Site Visit'), ('workshop', 'Workshop/Training'), ('consultation', 'Consultation'), ('memo', 'Memorandum'), ('report', 'Report Submission'), ('request', 'Request/Application'), ('response', 'Response/Reply'), ('announcement', 'Announcement'), ('invitation', 'Invitation'), ('other', 'Other')], help_text='Type of communication', max_length=15)),
                ('direction', models.CharField(choices=[('incoming', 'Incoming'), ('outgoing', 'Outgoing'), ('internal', 'Internal')], help_text='Direction of communication', max_length=10)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('received', 'Received'), ('acknowledged', 'Acknowledged'), ('responded', 'Responded'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', help_text='Current status of the communication', max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level of this communication', max_length=10)),
                ('subject', models.CharField(help_text='Subject or title of the communication', max_length=255)),
                ('content', models.TextField(help_text='Content or description of the communication')),
                ('reference_number', models.CharField(blank=True, help_text='Official reference number (for letters, memos, etc.)', max_length=100)),
                ('communication_date', models.DateField(help_text='Date of the communication')),
                ('communication_time', models.TimeField(blank=True, help_text='Time of the communication (for calls, meetings, etc.)', null=True)),
                ('due_date', models.DateField(blank=True, help_text='Due date for response or action', null=True)),
                ('sender', models.CharField(blank=True, help_text='Name of the sender', max_length=255)),
                ('sender_position', models.CharField(blank=True, help_text='Position of the sender', max_length=150)),
                ('recipient', models.CharField(blank=True, help_text='Name of the recipient', max_length=255)),
                ('recipient_position', models.CharField(blank=True, help_text='Position of the recipient', max_length=150)),
                ('cc_recipients', models.TextField(blank=True, help_text='CC recipients (one per line)')),
                ('requires_follow_up', models.BooleanField(default=False, help_text='Whether this communication requires follow-up')),
                ('follow_up_date', models.DateField(blank=True, help_text='Scheduled follow-up date', null=True)),
                ('follow_up_notes', models.TextField(blank=True, help_text='Follow-up notes and action items')),
                ('follow_up_completed', models.BooleanField(default=False, help_text='Whether follow-up has been completed')),
                ('response_received', models.BooleanField(default=False, help_text='Whether a response has been received')),
                ('response_date', models.DateField(blank=True, help_text='Date response was received', null=True)),
                ('response_content', models.TextField(blank=True, help_text='Content of the response received')),
                ('attachments', models.JSONField(blank=True, help_text='List of attached files (JSON format)', null=True)),
                ('meeting_minutes', models.TextField(blank=True, help_text='Meeting minutes (for meetings)')),
                ('outcomes', models.TextField(blank=True, help_text='Outcomes and decisions from the communication')),
                ('tags', models.CharField(blank=True, help_text='Tags for categorization (comma-separated)', max_length=500)),
                ('topic_areas', models.CharField(blank=True, help_text='Topic areas discussed (comma-separated)', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_by', models.ForeignKey(help_text='User who recorded this communication', on_delete=django.db.models.deletion.PROTECT, related_name='recorded_communications', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='Organization involved in this communication', on_delete=django.db.models.deletion.CASCADE, related_name='communications', to='coordination.organization')),
                ('contact', models.ForeignKey(blank=True, help_text='Specific contact person (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='communications', to='coordination.organizationcontact')),
            ],
            options={
                'ordering': ['-communication_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Partnership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the partnership/agreement', max_length=255)),
                ('partnership_type', models.CharField(choices=[('moa', 'Memorandum of Agreement'), ('mou', 'Memorandum of Understanding'), ('contract', 'Service Contract'), ('grant_agreement', 'Grant Agreement'), ('cooperation_agreement', 'Cooperation Agreement'), ('joint_venture', 'Joint Venture'), ('consortium', 'Consortium Agreement'), ('informal', 'Informal Partnership'), ('other', 'Other')], help_text='Type of partnership or agreement', max_length=25)),
                ('description', models.TextField(help_text='Detailed description of the partnership')),
                ('objectives', models.TextField(help_text='Objectives and goals of the partnership')),
                ('scope', models.TextField(help_text='Scope of work and responsibilities')),
                ('concept_date', models.DateField(blank=True, help_text='Date when partnership concept was developed', null=True)),
                ('negotiation_start_date', models.DateField(blank=True, help_text='Date when negotiations started', null=True)),
                ('signing_date', models.DateField(blank=True, help_text='Date when agreement was signed', null=True)),
                ('start_date', models.DateField(blank=True, help_text='Official start date of the partnership', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the partnership', null=True)),
                ('renewal_date', models.DateField(blank=True, help_text='Date for renewal consideration', null=True)),
                ('status', models.CharField(choices=[('concept', 'Concept/Planning'), ('draft', 'Draft'), ('review', 'Under Review'), ('negotiation', 'Under Negotiation'), ('pending_approval', 'Pending Approval'), ('pending_signature', 'Pending Signature'), ('active', 'Active'), ('completed', 'Completed'), ('terminated', 'Terminated'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('cancelled', 'Cancelled')], default='concept', help_text='Current status of the partnership', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this partnership', max_length=10)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Overall progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Total budget for the partnership (in PHP)', max_digits=15, null=True)),
                ('oobc_contribution', models.DecimalField(blank=True, decimal_places=2, help_text='OOBC financial contribution (in PHP)', max_digits=15, null=True)),
                ('partner_contribution', models.DecimalField(blank=True, decimal_places=2, help_text='Partner financial contribution (in PHP)', max_digits=15, null=True)),
                ('document_number', models.CharField(blank=True, help_text='Official document/reference number', max_length=100)),
                ('legal_reference', models.CharField(blank=True, help_text='Legal or regulatory reference', max_length=200)),
                ('key_performance_indicators', models.TextField(blank=True, help_text='Key performance indicators and metrics')),
                ('expected_outcomes', models.TextField(blank=True, help_text='Expected outcomes and impact')),
                ('actual_outcomes', models.TextField(blank=True, help_text='Actual outcomes achieved')),
                ('lessons_learned', models.TextField(blank=True, help_text='Lessons learned during implementation')),
                ('risks_identified', models.TextField(blank=True, help_text='Identified risks and challenges')),
                ('mitigation_strategies', models.TextField(blank=True, help_text='Risk mitigation strategies')),
                ('communication_plan', models.TextField(blank=True, help_text='Communication plan and protocols')),
                ('reporting_requirements', models.TextField(blank=True, help_text='Reporting requirements and schedule')),
                ('is_renewable', models.BooleanField(default=False, help_text='Whether this partnership can be renewed')),
                ('renewal_criteria', models.TextField(blank=True, help_text='Criteria for renewal')),
                ('termination_clause', models.TextField(blank=True, help_text='Termination conditions and procedures')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and observations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('backup_focal_person', models.ForeignKey(blank=True, help_text='Backup focal person', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backup_partnerships', to=settings.AUTH_USER_MODEL)),
                ('communities', models.ManyToManyField(blank=True, help_text='Communities involved or benefiting from this partnership', related_name='partnerships', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this partnership record', on_delete=django.db.models.deletion.PROTECT, related_name='created_partnerships', to=settings.AUTH_USER_MODEL)),
                ('focal_person', models.ForeignKey(blank=True, help_text='OOBC focal person managing this partnership', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_partnerships', to=settings.AUTH_USER_MODEL)),
                ('lead_organization', models.ForeignKey(help_text='Lead organization for this partnership', on_delete=django.db.models.deletion.PROTECT, related_name='led_partnerships', to='coordination.organization')),
                ('organizations', models.ManyToManyField(help_text='Organizations involved in this partnership', related_name='partnerships', to='coordination.organization')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CoordinationNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('note_date', models.DateField(help_text='Date of the coordination activity or meeting.')),
                ('note_time', models.TimeField(blank=True, help_text='Optional start time reference for the meeting.', null=True)),
                ('title', models.CharField(help_text='Subject or title for this coordination note entry.', max_length=255)),
                ('location_description', models.CharField(blank=True, help_text='Venue or location details, if different from the linked activity.', max_length=255)),
                ('meeting_overview', models.TextField(blank=True, help_text='Objectives or high-level context for the coordination activity.')),
                ('key_agenda', models.TextField(blank=True, help_text='Agenda items covered during the meeting.')),
                ('discussion_highlights', models.TextField(blank=True, help_text='Key discussion points and insights captured during the session.')),
                ('decisions', models.TextField(blank=True, help_text='Decisions or agreements reached.')),
                ('action_items', models.TextField(blank=True, help_text='Action items with responsible persons or teams.')),
                ('follow_up_items', models.TextField(blank=True, help_text='Follow-up requirements, deadlines, or support needed.')),
                ('partnership_details', models.TextField(blank=True, help_text='Specific partnership updates, commitments, or concerns.')),
                ('attachments_links', models.TextField(blank=True, help_text='Reference links, shared folders, or document notes.')),
                ('additional_notes', models.TextField(blank=True, help_text='Other remarks, observations, or reminders.')),
                ('coverage_map_data', models.JSONField(blank=True, default=dict, help_text='Serialized map metadata for geographic coverage (pins, bounds).')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coverage_barangay', models.ForeignKey(blank=True, help_text='Barangay covered, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordination_notes', to='common.barangay')),
                ('coverage_municipality', models.ForeignKey(blank=True, help_text='Municipality or city covered.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordination_notes', to='common.municipality')),
                ('coverage_province', models.ForeignKey(blank=True, help_text='Province covered by this coordination effort.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordination_notes', to='common.province')),
                ('coverage_region', models.ForeignKey(blank=True, help_text='Region covered by this coordination effort.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordination_notes', to='common.region')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='Staff member who recorded these notes.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordination_notes_recorded', to=settings.AUTH_USER_MODEL)),
                ('staff_participants', models.ManyToManyField(blank=True, help_text='OOBC staff who were present or contributed.', related_name='coordination_notes_participated', to=settings.AUTH_USER_MODEL)),
                ('work_item', models.ForeignKey(help_text="Linked coordination activity (WorkItem with work_type='activity').", on_delete=django.db.models.deletion.CASCADE, related_name='coordination_notes', to='common.workitem')),
                ('partner_organizations', models.ManyToManyField(blank=True, help_text='Partner organizations present in the activity.', related_name='coordination_notes', to='coordination.organization')),
                ('partnership_agreements', models.ManyToManyField(blank=True, help_text='Related partnership agreements discussed.', related_name='coordination_notes', to='coordination.partnership')),
            ],
            options={
                'verbose_name': 'Coordination Note',
                'verbose_name_plural': 'Coordination Notes',
                'ordering': ['-note_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnershipDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('agreement', 'Main Agreement'), ('amendment', 'Amendment'), ('appendix', 'Appendix'), ('addendum', 'Addendum'), ('proposal', 'Proposal'), ('presentation', 'Presentation'), ('report', 'Report'), ('correspondence', 'Correspondence'), ('legal_opinion', 'Legal Opinion'), ('authorization', 'Authorization'), ('certificate', 'Certificate'), ('other', 'Other')], help_text='Type of document', max_length=15)),
                ('title', models.CharField(help_text='Title of the document', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the document')),
                ('version', models.CharField(default='1.0', help_text='Document version', max_length=10)),
                ('file', models.FileField(help_text='Document file (PDF, DOC, DOCX, XLS, XLSX - max 10MB)', upload_to='partnerships/%Y/%m/', validators=[common.validators.validate_document_file])),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('is_confidential', models.BooleanField(default=False, help_text='Whether this document is confidential')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this document can be shared publicly')),
                ('access_restrictions', models.TextField(blank=True, help_text='Access restrictions and guidelines')),
                ('document_date', models.DateField(blank=True, help_text='Date of the document', null=True)),
                ('effective_date', models.DateField(blank=True, help_text='Date when document becomes effective', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Date when document expires', null=True)),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether this document requires approval')),
                ('approved', models.BooleanField(default=False, help_text='Whether this document has been approved')),
                ('approval_date', models.DateField(blank=True, help_text='Date of approval', null=True)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this document')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_partnership_documents', to=settings.AUTH_USER_MODEL)),
                ('partnership', models.ForeignKey(help_text='Partnership this document belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='coordination.partnership')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this document', on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_partnership_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='PartnershipMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the milestone', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the milestone')),
                ('milestone_type', models.CharField(choices=[('deliverable', 'Deliverable'), ('payment', 'Payment'), ('review', 'Review/Evaluation'), ('approval', 'Approval'), ('event', 'Event/Activity'), ('report', 'Report Submission'), ('other', 'Other')], default='deliverable', help_text='Type of milestone', max_length=15)),
                ('planned_start_date', models.DateField(blank=True, help_text='Planned start date', null=True)),
                ('due_date', models.DateField(help_text='Due date for this milestone')),
                ('actual_completion_date', models.DateField(blank=True, help_text='Actual completion date', null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('delayed', 'Delayed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue')], default='planned', help_text='Current status', max_length=15)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('responsible_person', models.CharField(blank=True, help_text='Person responsible for this milestone', max_length=255)),
                ('deliverable_description', models.TextField(blank=True, help_text='Description of expected deliverable')),
                ('acceptance_criteria', models.TextField(blank=True, help_text='Criteria for accepting this milestone')),
                ('evidence_provided', models.TextField(blank=True, help_text='Evidence of completion provided')),
                ('verification_notes', models.TextField(blank=True, help_text='Notes from verification process')),
                ('verification_date', models.DateField(blank=True, help_text='Date of verification', null=True)),
                ('budget_allocated', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocated for this milestone', max_digits=12, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Actual cost incurred', max_digits=12, null=True)),
                ('issues_encountered', models.TextField(blank=True, help_text='Issues encountered during implementation')),
                ('resolution_actions', models.TextField(blank=True, help_text='Actions taken to resolve issues')),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this milestone', on_delete=django.db.models.deletion.PROTECT, related_name='created_milestones', to=settings.AUTH_USER_MODEL)),
                ('depends_on', models.ManyToManyField(blank=True, help_text='Milestones this depends on', related_name='dependent_milestones', to='coordination.partnershipmilestone')),
                ('oobc_focal_person', models.ForeignKey(blank=True, help_text='OOBC person monitoring this milestone', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitored_milestones', to=settings.AUTH_USER_MODEL)),
                ('partnership', models.ForeignKey(help_text='Partnership this milestone belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='coordination.partnership')),
                ('responsible_organization', models.ForeignKey(blank=True, help_text='Organization responsible for this milestone', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responsible_milestones', to='coordination.organization')),
                ('verified_by', models.ForeignKey(blank=True, help_text='User who verified completion', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_milestones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['due_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnershipSignatory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the signatory', max_length=255)),
                ('position', models.CharField(help_text='Position/title of the signatory', max_length=150)),
                ('role', models.CharField(choices=[('primary', 'Primary Signatory'), ('witness', 'Witness'), ('approver', 'Approver'), ('notary', 'Notary'), ('legal_counsel', 'Legal Counsel')], default='primary', help_text='Role of this signatory', max_length=15)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('phone', models.CharField(blank=True, help_text='Phone number', max_length=50)),
                ('is_required', models.BooleanField(default=True, help_text="Whether this signatory's signature is required")),
                ('signed', models.BooleanField(default=False, help_text='Whether this signatory has signed')),
                ('signature_date', models.DateField(blank=True, help_text='Date when signature was provided', null=True)),
                ('signature_location', models.CharField(blank=True, help_text='Location where signature was provided', max_length=255)),
                ('has_authority', models.BooleanField(default=True, help_text='Whether signatory has authority to sign')),
                ('authorization_document', models.CharField(blank=True, help_text='Reference to authorization document', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this signatory')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact', models.ForeignKey(blank=True, help_text='Specific contact if available in system', null=True, on_delete=django.db.models.deletion.SET_NULL, to='coordination.organizationcontact')),
                ('organization', models.ForeignKey(help_text='Organization the signatory represents', on_delete=django.db.models.deletion.CASCADE, to='coordination.organization')),
                ('partnership', models.ForeignKey(help_text='Partnership this signatory belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='signatories', to='coordination.partnership')),
            ],
            options={
                'ordering': ['organization__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StakeholderEngagement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the engagement activity', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the engagement activity')),
                ('objectives', models.TextField(help_text='Objectives and expected outcomes')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('postponed', 'Postponed'), ('cancelled', 'Cancelled')], default='planned', help_text='Current status of the engagement', max_length=15)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Priority level of this engagement', max_length=10)),
                ('participation_level', models.CharField(choices=[('inform', 'Inform'), ('consult', 'Consult'), ('involve', 'Involve'), ('collaborate', 'Collaborate'), ('empower', 'Empower')], default='consult', help_text='Level of participation (IAP2 framework)', max_length=12)),
                ('planned_date', models.DateTimeField(help_text='Planned date and time for the engagement')),
                ('actual_start_datetime', models.DateTimeField(blank=True, help_text='Actual start date and time', null=True)),
                ('actual_end_datetime', models.DateTimeField(blank=True, help_text='Actual end date and time', null=True)),
                ('duration_minutes', models.IntegerField(blank=True, help_text='Planned duration in minutes', null=True)),
                ('venue', models.CharField(help_text='Venue or location of the engagement', max_length=200)),
                ('address', models.TextField(help_text='Full address of the venue')),
                ('coordinates', models.JSONField(blank=True, help_text='Geographic coordinates of the venue (GeoJSON format)', null=True)),
                ('target_participants', models.IntegerField(help_text='Target number of participants')),
                ('actual_participants', models.IntegerField(default=0, help_text='Actual number of participants')),
                ('stakeholder_groups', models.TextField(help_text='Description of stakeholder groups involved')),
                ('methodology', models.TextField(help_text='Methodology and approach for the engagement')),
                ('materials_needed', models.TextField(blank=True, help_text='Materials and resources needed')),
                ('budget_allocated', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocated for this engagement', max_digits=12, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Actual cost incurred', max_digits=12, null=True)),
                ('is_participatory_budgeting', models.BooleanField(default=False, help_text='Whether this engagement facilitates participatory budgeting')),
                ('budget_amount_to_allocate', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount to be allocated during the participatory budgeting session', max_digits=14, null=True)),
                ('voting_open_date', models.DateField(blank=True, help_text='When community voting opens for participatory budgeting', null=True)),
                ('voting_close_date', models.DateField(blank=True, help_text='When community voting closes for participatory budgeting', null=True)),
                ('key_outcomes', models.TextField(blank=True, help_text='Key outcomes and results')),
                ('feedback_summary', models.TextField(blank=True, help_text='Summary of feedback received')),
                ('action_items', models.TextField(blank=True, help_text='Action items and follow-up activities')),
                ('satisfaction_rating', models.IntegerField(blank=True, choices=[(1, '1 stars'), (2, '2 stars'), (3, '3 stars'), (4, '4 stars'), (5, '5 stars')], help_text='Overall satisfaction rating (1-5 stars)', null=True)),
                ('meeting_minutes', models.TextField(blank=True, help_text='Meeting minutes or detailed notes')),
                ('attendance_list', models.JSONField(blank=True, help_text='List of attendees (JSON format)', null=True)),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this is a recurring engagement')),
                ('is_recurrence_exception', models.BooleanField(default=False, help_text='True if this instance was edited separately from the recurrence pattern')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('community', models.ForeignKey(help_text='Primary community involved', on_delete=django.db.models.deletion.CASCADE, related_name='stakeholder_engagements', to='communities.obccommunity')),
                ('created_by', models.ForeignKey(help_text='User who created this engagement', on_delete=django.db.models.deletion.PROTECT, related_name='created_engagements', to=settings.AUTH_USER_MODEL)),
                ('facilitators', models.ManyToManyField(help_text='Staff members facilitating the engagement', related_name='facilitated_engagements', through='coordination.EngagementFacilitator', to=settings.AUTH_USER_MODEL)),
                ('recurrence_parent', models.ForeignKey(blank=True, help_text='Parent engagement if this is a recurrence instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_instances', to='coordination.stakeholderengagement')),
                ('recurrence_pattern', models.ForeignKey(blank=True, help_text='Recurrence pattern configuration (RFC 5545 compatible)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_engagements', to='common.recurringeventpattern')),
            ],
            options={
                'ordering': ['-planned_date'],
            },
        ),
    ]
