# Generated by Django 4.2.21 on 2025-05-22 13:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("communities", "0002_stakeholder_stakeholderengagement"),
        (
            "coordination",
            "0003_event_actionitem_eventparticipant_eventdocument_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Partnership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the partnership/agreement", max_length=255
                    ),
                ),
                (
                    "partnership_type",
                    models.CharField(
                        choices=[
                            ("moa", "Memorandum of Agreement"),
                            ("mou", "Memorandum of Understanding"),
                            ("contract", "Service Contract"),
                            ("grant_agreement", "Grant Agreement"),
                            ("cooperation_agreement", "Cooperation Agreement"),
                            ("joint_venture", "Joint Venture"),
                            ("consortium", "Consortium Agreement"),
                            ("informal", "Informal Partnership"),
                            ("other", "Other"),
                        ],
                        help_text="Type of partnership or agreement",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the partnership"
                    ),
                ),
                (
                    "objectives",
                    models.TextField(
                        help_text="Objectives and goals of the partnership"
                    ),
                ),
                (
                    "scope",
                    models.TextField(help_text="Scope of work and responsibilities"),
                ),
                (
                    "concept_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when partnership concept was developed",
                        null=True,
                    ),
                ),
                (
                    "negotiation_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when negotiations started",
                        null=True,
                    ),
                ),
                (
                    "signing_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when agreement was signed",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Official start date of the partnership",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True, help_text="End date of the partnership", null=True
                    ),
                ),
                (
                    "renewal_date",
                    models.DateField(
                        blank=True,
                        help_text="Date for renewal consideration",
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("concept", "Concept/Planning"),
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("negotiation", "Under Negotiation"),
                            ("pending_approval", "Pending Approval"),
                            ("pending_signature", "Pending Signature"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("terminated", "Terminated"),
                            ("expired", "Expired"),
                            ("suspended", "Suspended"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="concept",
                        help_text="Current status of the partnership",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level of this partnership",
                        max_length=10,
                    ),
                ),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0,
                        help_text="Overall progress percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "total_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total budget for the partnership (in PHP)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "oobc_contribution",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="OOBC financial contribution (in PHP)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "partner_contribution",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Partner financial contribution (in PHP)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        blank=True,
                        help_text="Official document/reference number",
                        max_length=100,
                    ),
                ),
                (
                    "legal_reference",
                    models.CharField(
                        blank=True,
                        help_text="Legal or regulatory reference",
                        max_length=200,
                    ),
                ),
                (
                    "key_performance_indicators",
                    models.TextField(
                        blank=True, help_text="Key performance indicators and metrics"
                    ),
                ),
                (
                    "expected_outcomes",
                    models.TextField(
                        blank=True, help_text="Expected outcomes and impact"
                    ),
                ),
                (
                    "actual_outcomes",
                    models.TextField(blank=True, help_text="Actual outcomes achieved"),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True, help_text="Lessons learned during implementation"
                    ),
                ),
                (
                    "risks_identified",
                    models.TextField(
                        blank=True, help_text="Identified risks and challenges"
                    ),
                ),
                (
                    "mitigation_strategies",
                    models.TextField(
                        blank=True, help_text="Risk mitigation strategies"
                    ),
                ),
                (
                    "communication_plan",
                    models.TextField(
                        blank=True, help_text="Communication plan and protocols"
                    ),
                ),
                (
                    "reporting_requirements",
                    models.TextField(
                        blank=True, help_text="Reporting requirements and schedule"
                    ),
                ),
                (
                    "is_renewable",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this partnership can be renewed",
                    ),
                ),
                (
                    "renewal_criteria",
                    models.TextField(blank=True, help_text="Criteria for renewal"),
                ),
                (
                    "termination_clause",
                    models.TextField(
                        blank=True, help_text="Termination conditions and procedures"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes and observations"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "backup_focal_person",
                    models.ForeignKey(
                        blank=True,
                        help_text="Backup focal person",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="backup_partnerships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Communities involved or benefiting from this partnership",
                        related_name="partnerships",
                        to="communities.obccommunity",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this partnership record",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_partnerships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "focal_person",
                    models.ForeignKey(
                        blank=True,
                        help_text="OOBC focal person managing this partnership",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_partnerships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lead_organization",
                    models.ForeignKey(
                        help_text="Lead organization for this partnership",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="led_partnerships",
                        to="coordination.organization",
                    ),
                ),
                (
                    "organizations",
                    models.ManyToManyField(
                        help_text="Organizations involved in this partnership",
                        related_name="partnerships",
                        to="coordination.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PartnershipSignatory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full name of the signatory", max_length=255
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        help_text="Position/title of the signatory", max_length=150
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Signatory"),
                            ("witness", "Witness"),
                            ("approver", "Approver"),
                            ("notary", "Notary"),
                            ("legal_counsel", "Legal Counsel"),
                        ],
                        default="primary",
                        help_text="Role of this signatory",
                        max_length=15,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Email address", max_length=254
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, help_text="Phone number", max_length=50
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this signatory's signature is required",
                    ),
                ),
                (
                    "signed",
                    models.BooleanField(
                        default=False, help_text="Whether this signatory has signed"
                    ),
                ),
                (
                    "signature_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when signature was provided",
                        null=True,
                    ),
                ),
                (
                    "signature_location",
                    models.CharField(
                        blank=True,
                        help_text="Location where signature was provided",
                        max_length=255,
                    ),
                ),
                (
                    "has_authority",
                    models.BooleanField(
                        default=True,
                        help_text="Whether signatory has authority to sign",
                    ),
                ),
                (
                    "authorization_document",
                    models.CharField(
                        blank=True,
                        help_text="Reference to authorization document",
                        max_length=255,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this signatory"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "contact",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific contact if available in system",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="coordination.organizationcontact",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization the signatory represents",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="coordination.organization",
                    ),
                ),
                (
                    "partnership",
                    models.ForeignKey(
                        help_text="Partnership this signatory belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signatories",
                        to="coordination.partnership",
                    ),
                ),
            ],
            options={
                "ordering": ["organization__name", "name"],
                "indexes": [
                    models.Index(
                        fields=["partnership", "signed"],
                        name="coordinatio_partner_329d87_idx",
                    ),
                    models.Index(
                        fields=["organization", "signed"],
                        name="coordinatio_organiz_338283_idx",
                    ),
                ],
                "unique_together": {("partnership", "organization", "name")},
            },
        ),
        migrations.CreateModel(
            name="PartnershipMilestone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the milestone", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the milestone"),
                ),
                (
                    "milestone_type",
                    models.CharField(
                        choices=[
                            ("deliverable", "Deliverable"),
                            ("payment", "Payment"),
                            ("review", "Review/Evaluation"),
                            ("approval", "Approval"),
                            ("event", "Event/Activity"),
                            ("report", "Report Submission"),
                            ("other", "Other"),
                        ],
                        default="deliverable",
                        help_text="Type of milestone",
                        max_length=15,
                    ),
                ),
                (
                    "planned_start_date",
                    models.DateField(
                        blank=True, help_text="Planned start date", null=True
                    ),
                ),
                ("due_date", models.DateField(help_text="Due date for this milestone")),
                (
                    "actual_completion_date",
                    models.DateField(
                        blank=True, help_text="Actual completion date", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("delayed", "Delayed"),
                            ("on_hold", "On Hold"),
                            ("cancelled", "Cancelled"),
                            ("overdue", "Overdue"),
                        ],
                        default="planned",
                        help_text="Current status",
                        max_length=15,
                    ),
                ),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0,
                        help_text="Progress percentage (0-100)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "responsible_person",
                    models.CharField(
                        blank=True,
                        help_text="Person responsible for this milestone",
                        max_length=255,
                    ),
                ),
                (
                    "deliverable_description",
                    models.TextField(
                        blank=True, help_text="Description of expected deliverable"
                    ),
                ),
                (
                    "acceptance_criteria",
                    models.TextField(
                        blank=True, help_text="Criteria for accepting this milestone"
                    ),
                ),
                (
                    "evidence_provided",
                    models.TextField(
                        blank=True, help_text="Evidence of completion provided"
                    ),
                ),
                (
                    "verification_notes",
                    models.TextField(
                        blank=True, help_text="Notes from verification process"
                    ),
                ),
                (
                    "verification_date",
                    models.DateField(
                        blank=True, help_text="Date of verification", null=True
                    ),
                ),
                (
                    "budget_allocated",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Budget allocated for this milestone",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost incurred",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "issues_encountered",
                    models.TextField(
                        blank=True, help_text="Issues encountered during implementation"
                    ),
                ),
                (
                    "resolution_actions",
                    models.TextField(
                        blank=True, help_text="Actions taken to resolve issues"
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this milestone",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_milestones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Milestones this depends on",
                        related_name="dependent_milestones",
                        to="coordination.partnershipmilestone",
                    ),
                ),
                (
                    "oobc_focal_person",
                    models.ForeignKey(
                        blank=True,
                        help_text="OOBC person monitoring this milestone",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="monitored_milestones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "partnership",
                    models.ForeignKey(
                        help_text="Partnership this milestone belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="milestones",
                        to="coordination.partnership",
                    ),
                ),
                (
                    "responsible_organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization responsible for this milestone",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="responsible_milestones",
                        to="coordination.organization",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who verified completion",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_milestones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["due_date", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["partnership", "status"],
                        name="coordinatio_partner_b6fde9_idx",
                    ),
                    models.Index(
                        fields=["due_date", "status"],
                        name="coordinatio_due_dat_991763_idx",
                    ),
                    models.Index(
                        fields=["responsible_organization", "status"],
                        name="coordinatio_respons_e86aa7_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PartnershipDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("agreement", "Main Agreement"),
                            ("amendment", "Amendment"),
                            ("appendix", "Appendix"),
                            ("addendum", "Addendum"),
                            ("proposal", "Proposal"),
                            ("presentation", "Presentation"),
                            ("report", "Report"),
                            ("correspondence", "Correspondence"),
                            ("legal_opinion", "Legal Opinion"),
                            ("authorization", "Authorization"),
                            ("certificate", "Certificate"),
                            ("other", "Other"),
                        ],
                        help_text="Type of document",
                        max_length=15,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the document", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the document"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", help_text="Document version", max_length=10
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Document file", upload_to="partnerships/%Y/%m/"
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "is_confidential",
                    models.BooleanField(
                        default=False, help_text="Whether this document is confidential"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document can be shared publicly",
                    ),
                ),
                (
                    "access_restrictions",
                    models.TextField(
                        blank=True, help_text="Access restrictions and guidelines"
                    ),
                ),
                (
                    "document_date",
                    models.DateField(
                        blank=True, help_text="Date of the document", null=True
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when document becomes effective",
                        null=True,
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True, help_text="Date when document expires", null=True
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document requires approval",
                    ),
                ),
                (
                    "approved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document has been approved",
                    ),
                ),
                (
                    "approval_date",
                    models.DateField(
                        blank=True, help_text="Date of approval", null=True
                    ),
                ),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this document"
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved this document",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_partnership_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "partnership",
                    models.ForeignKey(
                        help_text="Partnership this document belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="coordination.partnership",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this document",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="uploaded_partnership_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-upload_date"],
                "indexes": [
                    models.Index(
                        fields=["partnership", "document_type"],
                        name="coordinatio_partner_9e3b7d_idx",
                    ),
                    models.Index(
                        fields=["is_confidential", "is_public"],
                        name="coordinatio_is_conf_9c0b5d_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="partnership",
            index=models.Index(
                fields=["partnership_type", "status"],
                name="coordinatio_partner_e77a00_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="partnership",
            index=models.Index(
                fields=["status", "priority"], name="coordinatio_status_caa6e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="partnership",
            index=models.Index(
                fields=["focal_person", "status"], name="coordinatio_focal_p_03b8c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="partnership",
            index=models.Index(
                fields=["start_date", "end_date"], name="coordinatio_start_d_94a09a_idx"
            ),
        ),
    ]
