# Generated by Django 4.2.24 on 2025-10-01 11:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('coordination', '0009_remove_event_recurrence_end_date_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('policy_tracking', '0003_policyimplementationmilestone'),
        ('monitoring', '0011_monitoringentry_approval_history_and_more'),
        ('mana', '0021_add_needvote_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectWorkflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('current_stage', models.CharField(choices=[('need_identification', 'Need Identification'), ('need_validation', 'Need Validation'), ('policy_linkage', 'Policy Linkage'), ('mao_coordination', 'MAO Coordination'), ('budget_planning', 'Budget Planning'), ('approval', 'Approval Process'), ('implementation', 'Implementation'), ('monitoring', 'Monitoring & Evaluation'), ('completion', 'Completion')], db_index=True, default='need_identification', help_text='Current workflow stage', max_length=30)),
                ('stage_history', models.JSONField(default=list, help_text='History of stage transitions with timestamps and users')),
                ('priority_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], default='medium', help_text='Overall project priority', max_length=10)),
                ('initiated_date', models.DateField(default=django.utils.timezone.now, help_text='Date project workflow started')),
                ('target_completion_date', models.DateField(blank=True, help_text='Target date for project completion', null=True)),
                ('actual_completion_date', models.DateField(blank=True, help_text='Actual date project was completed', null=True)),
                ('overall_progress', models.IntegerField(default=0, help_text='Overall project progress percentage (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_on_track', models.BooleanField(default=True, help_text='Whether project is on schedule')),
                ('is_blocked', models.BooleanField(default=False, help_text='Whether project is blocked/stalled')),
                ('blocker_description', models.TextField(blank=True, help_text="Description of what's blocking the project")),
                ('estimated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated budget from need assessment (before PPA creation)', max_digits=12, null=True)),
                ('budget_approved', models.BooleanField(default=False, help_text='Whether budget has been approved (tracked separately from PPA approval)')),
                ('budget_approval_date', models.DateField(blank=True, help_text='Date budget was approved', null=True)),
                ('notes', models.TextField(blank=True, help_text='General notes and observations about this project')),
                ('lessons_learned', models.TextField(blank=True, help_text='Lessons learned during project implementation (filled at completion)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this workflow', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_workflows', to=settings.AUTH_USER_MODEL)),
                ('mao_focal_person', models.ForeignKey(blank=True, help_text='MAO focal person coordinating this project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='coordinated_projects', to='coordination.maofocalperson')),
                ('ppa', models.OneToOneField(blank=True, help_text='PPA implementing this project (created during budget planning stage)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_workflow', to='monitoring.monitoringentry')),
                ('primary_need', models.OneToOneField(help_text='Primary need driving this project', on_delete=django.db.models.deletion.CASCADE, related_name='project_workflow', to='mana.need')),
                ('project_lead', models.ForeignKey(help_text='OOBC staff leading this project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project Workflow',
                'verbose_name_plural': 'Project Workflows',
                'ordering': ['-initiated_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BudgetScenario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name for this scenario', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of scenario assumptions and goals')),
                ('fiscal_year', models.IntegerField(help_text='Fiscal year this scenario applies to')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_baseline', models.BooleanField(default=False, help_text='Whether this is the baseline scenario (reality/status quo)')),
                ('total_budget_envelope', models.DecimalField(decimal_places=2, help_text='Total budget available in this scenario', max_digits=12)),
                ('allocation_by_sector', models.JSONField(default=dict, help_text='Budget allocation breakdown by sector')),
                ('allocation_by_source', models.JSONField(default=dict, help_text='Budget allocation breakdown by funding source')),
                ('allocation_by_region', models.JSONField(default=dict, help_text='Budget allocation breakdown by region')),
                ('key_assumptions', models.JSONField(default=list, help_text='List of key assumptions underlying this scenario')),
                ('expected_outcomes', models.JSONField(default=list, help_text='Expected outcomes if this scenario is implemented')),
                ('strengths', models.TextField(blank=True, help_text='Strengths of this scenario')),
                ('weaknesses', models.TextField(blank=True, help_text='Weaknesses of this scenario')),
                ('opportunities', models.TextField(blank=True, help_text='Opportunities this scenario enables')),
                ('threats', models.TextField(blank=True, help_text='Threats/risks in this scenario')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_scenarios', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scenarios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Budget Scenario',
                'verbose_name_plural': 'Budget Scenarios',
                'ordering': ['-fiscal_year', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BudgetCeiling',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name for this budget ceiling', max_length=200)),
                ('fiscal_year', models.IntegerField(help_text='Fiscal year this ceiling applies to')),
                ('sector', models.CharField(blank=True, choices=[('economic', 'Economic Development'), ('social', 'Social Development'), ('infrastructure', 'Infrastructure'), ('education', 'Education'), ('health', 'Health'), ('environment', 'Environment & Natural Resources'), ('governance', 'Governance & Institutions'), ('peace', 'Peace & Security'), ('cultural', 'Cultural Development')], help_text='Sector this ceiling applies to (null = all sectors)', max_length=20, null=True)),
                ('funding_source', models.CharField(blank=True, choices=[('gaa', 'General Appropriations Act (GAA)'), ('block_grant', 'Block Grant'), ('lgu', 'Local Government Unit'), ('donor', 'Donor Funding'), ('internal', 'Internal Revenue'), ('others', 'Others')], help_text='Funding source this ceiling applies to (null = all sources)', max_length=20, null=True)),
                ('ceiling_amount', models.DecimalField(decimal_places=2, help_text='Maximum budget allocation allowed', max_digits=12)),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total amount currently allocated (auto-calculated)', max_digits=12)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this ceiling is currently enforced')),
                ('enforcement_level', models.CharField(choices=[('soft', 'Soft Limit (Warning)'), ('hard', 'Hard Limit (Rejection)')], default='hard', help_text='Whether to warn or reject allocations exceeding ceiling', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_budget_ceilings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Budget Ceiling',
                'verbose_name_plural': 'Budget Ceilings',
                'ordering': ['-fiscal_year', 'sector', 'funding_source'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('unfunded_needs', 'Unfunded High-Priority Needs'), ('overdue_ppa', 'Overdue PPA'), ('pending_mao_report', 'Pending MAO Quarterly Report'), ('budget_ceiling', 'Budget Ceiling Alert'), ('policy_lagging', 'Policy Implementation Lagging'), ('approval_bottleneck', 'Budget Approval Bottleneck'), ('disbursement_delay', 'Disbursement Delay'), ('underspending', 'Underspending Alert'), ('overspending', 'Overspending Warning'), ('workflow_blocked', 'Workflow Blocked'), ('milestone_missed', 'Milestone Missed')], db_index=True, help_text='Type of alert', max_length=30)),
                ('severity', models.CharField(choices=[('info', 'Information'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], db_index=True, default='medium', help_text='Severity level of this alert', max_length=10)),
                ('title', models.CharField(help_text='Short title describing the alert', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the alert and recommended actions')),
                ('alert_data', models.JSONField(default=dict, help_text='Additional structured data related to this alert')),
                ('action_url', models.CharField(blank=True, help_text='URL to navigate to for addressing this alert', max_length=500)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this alert is still active/relevant')),
                ('is_acknowledged', models.BooleanField(default=False, help_text='Whether this alert has been acknowledged by a user')),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='When this alert was acknowledged', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how this alert was resolved')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this alert should expire (optional)', null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, help_text='User who acknowledged this alert', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('related_mao', models.ForeignKey(blank=True, help_text='Related MAO (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='coordination.organization')),
                ('related_need', models.ForeignKey(blank=True, help_text='Related need (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='mana.need')),
                ('related_policy', models.ForeignKey(blank=True, help_text='Related policy (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='policy_tracking.policyrecommendation')),
                ('related_ppa', models.ForeignKey(blank=True, help_text='Related PPA (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='monitoring.monitoringentry')),
                ('related_workflow', models.ForeignKey(blank=True, help_text='Related project workflow (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='project_central.projectworkflow')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='projectworkflow',
            index=models.Index(fields=['current_stage', 'initiated_date'], name='project_cen_current_b52b2a_idx'),
        ),
        migrations.AddIndex(
            model_name='projectworkflow',
            index=models.Index(fields=['project_lead', 'current_stage'], name='project_cen_project_763c43_idx'),
        ),
        migrations.AddIndex(
            model_name='projectworkflow',
            index=models.Index(fields=['mao_focal_person', 'current_stage'], name='project_cen_mao_foc_fa5efc_idx'),
        ),
        migrations.AddIndex(
            model_name='projectworkflow',
            index=models.Index(fields=['priority_level', 'current_stage'], name='project_cen_priorit_7eebd6_idx'),
        ),
        migrations.AddIndex(
            model_name='projectworkflow',
            index=models.Index(fields=['is_on_track', 'current_stage'], name='project_cen_is_on_t_c979f6_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['fiscal_year', 'status'], name='project_cen_fiscal__cb9325_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['is_baseline', 'fiscal_year'], name='project_cen_is_base_45636a_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetceiling',
            index=models.Index(fields=['fiscal_year', 'is_active'], name='project_cen_fiscal__9fd979_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetceiling',
            index=models.Index(fields=['sector', 'fiscal_year'], name='project_cen_sector_9d5716_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetceiling',
            index=models.Index(fields=['funding_source', 'fiscal_year'], name='project_cen_funding_87a4e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='budgetceiling',
            unique_together={('fiscal_year', 'sector', 'funding_source')},
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['alert_type', 'is_active'], name='project_cen_alert_t_fc50e0_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['severity', 'is_active', '-created_at'], name='project_cen_severit_331544_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['is_active', 'is_acknowledged'], name='project_cen_is_acti_d1b40e_idx'),
        ),
    ]
