# Generated by Django 5.2.7 on 2025-10-08 02:54

from django.db import migrations


def backfill_work_item_isolation_fields(apps, schema_editor):
    """
    Backfill ppa_category and implementing_moa for existing WorkItems.

    For each WorkItem:
    1. Find its PPA source (via related_ppa or parent hierarchy)
    2. Populate ppa_category from PPA.category
    3. Populate implementing_moa from PPA.implementing_moa
    """
    WorkItem = apps.get_model("common", "WorkItem")
    MonitoringEntry = apps.get_model("monitoring", "MonitoringEntry")

    work_items = WorkItem.objects.select_related(
        'related_ppa',
        'parent'
    ).all()

    updated_count = 0
    skipped_count = 0

    for work_item in work_items:
        # Find PPA source by traversing hierarchy
        ppa = None

        # Check direct related_ppa
        if work_item.related_ppa:
            ppa = work_item.related_ppa
        # Check if this is execution_project (reverse OneToOne)
        elif hasattr(work_item, 'ppa_source'):
            ppa = work_item.ppa_source
        # Traverse up parent hierarchy
        elif work_item.parent:
            current = work_item.parent
            while current and not ppa:
                if current.related_ppa:
                    ppa = current.related_ppa
                    break
                elif hasattr(current, 'ppa_source'):
                    ppa = current.ppa_source
                    break
                current = current.parent

        if ppa:
            # Populate isolation fields from PPA
            work_item.ppa_category = ppa.category
            work_item.implementing_moa = ppa.implementing_moa
            work_item.save(update_fields=['ppa_category', 'implementing_moa'])
            updated_count += 1
        else:
            # No PPA source found - skip
            skipped_count += 1

    print(f"âœ… Backfill complete: {updated_count} work items updated, {skipped_count} skipped (no PPA)")


def reverse_backfill(apps, schema_editor):
    """Clear isolation fields if migration is reversed."""
    WorkItem = apps.get_model("common", "WorkItem")
    WorkItem.objects.all().update(ppa_category=None, implementing_moa=None)


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0029_add_work_item_isolation_fields"),
        ("monitoring", "0001_initial"),  # Ensure MonitoringEntry exists
    ]

    operations = [
        migrations.RunPython(backfill_work_item_isolation_fields, reverse_backfill),
    ]
