# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField(help_text='ID of object being audited')),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete')], db_index=True, help_text='Type of action performed', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When the action was performed')),
                ('changes', models.JSONField(default=dict, help_text='Old and new values for update operations')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the requester', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client user agent string')),
                ('notes', models.TextField(blank=True, help_text='Additional context or reason for change')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'common_audit_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Barangay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Official barangay code', max_length=64, unique=True)),
                ('name', models.CharField(help_text='Official barangay name', max_length=255)),
                ('is_urban', models.BooleanField(default=False, help_text='Whether this barangay is classified as urban')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this barangay is active in the system')),
                ('population_total', models.PositiveIntegerField(blank=True, help_text='Total population based on latest PSA census', null=True)),
                ('boundary_geojson', models.JSONField(blank=True, help_text='GeoJSON polygon defining the barangay boundary', null=True)),
                ('center_coordinates', models.JSONField(blank=True, help_text='Geographic center point [longitude, latitude]', null=True)),
                ('bounding_box', models.JSONField(blank=True, help_text='Bounding box [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Barangay',
                'verbose_name_plural': 'Barangays',
                'db_table': 'common_barangay',
                'ordering': ['municipality__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CalendarNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(blank=True, null=True)),
                ('notification_type', models.CharField(choices=[('invitation', 'Event Invitation'), ('reminder', 'Reminder'), ('update', 'Event Updated'), ('cancellation', 'Event Cancelled'), ('rsvp_request', 'RSVP Request')], max_length=20)),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App')], max_length=20)),
                ('scheduled_for', models.DateTimeField(help_text='When to send notification')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Calendar Notification',
                'verbose_name_plural': 'Calendar Notifications',
                'db_table': 'common_calendar_notification',
            },
        ),
        migrations.CreateModel(
            name='CalendarResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('vehicle', 'Vehicle'), ('equipment', 'Equipment'), ('room', 'Meeting Room'), ('facilitator', 'Facilitator/Trainer')], help_text='Type of resource', max_length=20)),
                ('name', models.CharField(help_text='Resource name', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Max people (for rooms) or units available', null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('is_available', models.BooleanField(default=True, help_text='Whether resource is currently available for booking')),
                ('booking_requires_approval', models.BooleanField(default=False, help_text='Whether bookings require approval')),
                ('cost_per_use', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per use (optional)', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Calendar Resource',
                'verbose_name_plural': 'Calendar Resources',
                'db_table': 'common_calendar_resource',
                'ordering': ['resource_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CalendarResourceBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(blank=True, null=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Calendar Resource Booking',
                'verbose_name_plural': 'Calendar Resource Bookings',
                'db_table': 'common_calendar_resource_booking',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_message', models.TextField(help_text="User's natural language question")),
                ('assistant_response', models.TextField(help_text="Assistant's response")),
                ('intent', models.CharField(help_text='Classified intent (data_query, analysis, help, etc.)', max_length=50)),
                ('confidence', models.FloatField(default=0.0, help_text='Intent classification confidence (0.0-1.0)')),
                ('topic', models.CharField(blank=True, help_text='Topic of conversation (communities, mana, policies, etc.)', max_length=100)),
                ('entities', models.JSONField(blank=True, default=list, help_text='Detected entities in the message')),
                ('session_id', models.CharField(blank=True, help_text='Session ID for grouping conversations', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Chat Message',
                'verbose_name_plural': 'Chat Messages',
                'db_table': 'common_chat_message',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExternalCalendarSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('google', 'Google Calendar'), ('microsoft', 'Microsoft Outlook'), ('apple', 'Apple iCloud')], max_length=20)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField()),
                ('token_expires_at', models.DateTimeField()),
                ('sync_direction', models.CharField(choices=[('export_only', 'Export to external calendar only'), ('import_only', 'Import from external calendar only'), ('two_way', 'Two-way sync')], default='export_only', max_length=20)),
                ('sync_modules', models.JSONField(blank=True, default=list, help_text="List of module keys: ['coordination', 'staff', 'mana']")),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('sync_status', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'External Calendar Sync',
                'verbose_name_plural': 'External Calendar Syncs',
                'db_table': 'common_external_calendar_sync',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feature_key', models.CharField(db_index=True, help_text="Unique identifier (e.g., 'communities.barangay_obc')", max_length=100, unique=True)),
                ('name', models.CharField(help_text='Human-readable feature name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this feature does')),
                ('module', models.CharField(db_index=True, help_text="Module this feature belongs to (e.g., 'communities', 'mana', 'coordination')", max_length=50)),
                ('category', models.CharField(blank=True, help_text="Feature category for grouping (e.g., 'navigation', 'data_management', 'reporting')", max_length=50)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this feature is currently active')),
                ('icon', models.CharField(blank=True, help_text="Icon class for UI display (e.g., 'fa-users')", max_length=50)),
                ('url_pattern', models.CharField(blank=True, help_text="URL pattern for this feature (e.g., '/communities/barangay/')", max_length=255)),
                ('sort_order', models.IntegerField(default=0, help_text='Display order within parent/module')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Feature',
                'verbose_name_plural': 'Features',
                'db_table': 'rbac_feature',
                'ordering': ['module', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Official municipality/city code', max_length=64, unique=True)),
                ('name', models.CharField(help_text='Official municipality/city name', max_length=255)),
                ('municipality_type', models.CharField(choices=[('municipality', 'Municipality'), ('city', 'City'), ('component_city', 'Component City'), ('independent_city', 'Independent City')], default='municipality', help_text='Type of local government unit', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this municipality is active in the system')),
                ('population_total', models.PositiveIntegerField(blank=True, help_text='Total population based on latest PSA census', null=True)),
                ('boundary_geojson', models.JSONField(blank=True, help_text='GeoJSON polygon defining the municipality boundary', null=True)),
                ('center_coordinates', models.JSONField(blank=True, help_text='Geographic center point [longitude, latitude]', null=True)),
                ('bounding_box', models.JSONField(blank=True, help_text='Bounding box [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Municipality',
                'verbose_name_plural': 'Municipalities',
                'db_table': 'common_municipality',
                'ordering': ['province__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', models.CharField(choices=[('staff', 'Staff'), ('team', 'Team')], max_length=10)),
                ('metric_name', models.CharField(max_length=150)),
                ('performance_standard', models.CharField(blank=True, max_length=255)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('actual_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('unit', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('on_track', 'On Track'), ('at_risk', 'At Risk'), ('off_track', 'Off Track')], default='on_track', max_length=12)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-period_end', 'metric_name'],
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('codename', models.CharField(db_index=True, help_text="Permission identifier (e.g., 'view', 'create', 'approve')", max_length=100)),
                ('name', models.CharField(help_text='Human-readable permission name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this permission allows')),
                ('permission_type', models.CharField(choices=[('view', 'View/Read'), ('create', 'Create/Add'), ('edit', 'Edit/Update'), ('delete', 'Delete/Remove'), ('approve', 'Approve/Authorize'), ('export', 'Export Data'), ('custom', 'Custom Action')], db_index=True, default='view', help_text='Type of permission', max_length=20)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this permission is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'db_table': 'rbac_permission',
                'ordering': ['feature', 'permission_type', 'codename'],
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Official province code', max_length=64, unique=True)),
                ('name', models.CharField(help_text='Official province name', max_length=255)),
                ('capital', models.CharField(blank=True, help_text='Provincial capital city', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this province is active in the system')),
                ('population_total', models.PositiveIntegerField(blank=True, help_text='Total population based on latest PSA census', null=True)),
                ('boundary_geojson', models.JSONField(blank=True, help_text='GeoJSON polygon defining the province boundary', null=True)),
                ('center_coordinates', models.JSONField(blank=True, help_text='Geographic center point [longitude, latitude]', null=True)),
                ('bounding_box', models.JSONField(blank=True, help_text='Bounding box [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'db_table': 'common_province',
                'ordering': ['region__code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RecurringEventPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recurrence_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='Type of recurrence pattern', max_length=20)),
                ('interval', models.PositiveIntegerField(default=1, help_text='Repeat every N days/weeks/months (e.g., 2 = every 2 weeks)')),
                ('by_weekday', models.JSONField(blank=True, default=list, help_text='List of weekdays: [1,3,5] = Mon, Wed, Fri')),
                ('by_monthday', models.PositiveIntegerField(blank=True, help_text='Day of month (1-31)', null=True)),
                ('by_setpos', models.JSONField(blank=True, default=list, help_text="Relative position: [1, 'monday'] = first Monday")),
                ('count', models.PositiveIntegerField(blank=True, help_text='End after N occurrences', null=True)),
                ('until_date', models.DateField(blank=True, help_text='End by this date', null=True)),
                ('exception_dates', models.JSONField(blank=True, default=list, help_text='List of ISO dates to exclude from recurrence')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Recurring Event Pattern',
                'verbose_name_plural': 'Recurring Event Patterns',
                'db_table': 'common_recurring_event_pattern',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Official region code (e.g., IX, XII)', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Official region name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Additional region description or notes')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this region is active in the system')),
                ('boundary_geojson', models.JSONField(blank=True, help_text='GeoJSON polygon defining the region boundary', null=True)),
                ('center_coordinates', models.JSONField(blank=True, help_text='Geographic center point [longitude, latitude]', null=True)),
                ('bounding_box', models.JSONField(blank=True, help_text='Bounding box [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'db_table': 'common_region',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Role name (e.g., 'OOBC Admin', 'MOA Manager')", max_length=100)),
                ('slug', models.SlugField(help_text='URL-friendly role identifier', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of role responsibilities')),
                ('scope', models.CharField(choices=[('system', 'System-wide'), ('organization', 'Organization-specific'), ('module', 'Module-specific')], db_index=True, default='organization', help_text='Scope of this role', max_length=20)),
                ('level', models.IntegerField(choices=[(1, 'Viewer'), (2, 'Staff'), (3, 'Manager'), (4, 'Admin'), (5, 'Super Admin')], db_index=True, default=2, help_text='Role hierarchy level')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this role is currently active')),
                ('is_system_role', models.BooleanField(default=False, help_text='Whether this is a system-defined role (cannot be deleted)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'rbac_role',
                'ordering': ['-level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_granted', models.BooleanField(default=True, help_text='True = grant permission, False = explicitly deny')),
                ('conditions', models.JSONField(blank=True, default=dict, help_text="Conditions for permission (e.g., {'own_data_only': true})")),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this permission assignment is active')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission assignment expires', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Role Permission',
                'verbose_name_plural': 'Role Permissions',
                'db_table': 'rbac_role_permission',
                'ordering': ['role', 'permission'],
            },
        ),
        migrations.CreateModel(
            name='SharedCalendarLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('max_views', models.PositiveIntegerField(blank=True, help_text='Maximum number of views allowed (optional)', null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('filter_modules', models.JSONField(blank=True, default=list, help_text='Modules to include in shared view')),
                ('filter_date_from', models.DateField(blank=True, null=True)),
                ('filter_date_to', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Shared Calendar Link',
                'verbose_name_plural': 'Shared Calendar Links',
                'db_table': 'common_shared_calendar_link',
            },
        ),
        migrations.CreateModel(
            name='StaffDevelopmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('competency_focus', models.CharField(blank=True, max_length=150)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='planned', max_length=20)),
                ('support_needed', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['target_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='StaffLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(choices=[('vacation', 'Vacation Leave'), ('sick', 'Sick Leave'), ('emergency', 'Emergency Leave'), ('official', 'Official Business')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Staff Leave',
                'verbose_name_plural': 'Staff Leaves',
                'db_table': 'common_staff_leave',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('employment_type', models.CharField(blank=True, choices=[('regular', 'Regular'), ('contractual', 'Contractual'), ('consultant', 'Consultant'), ('volunteer', 'Volunteer')], max_length=20)),
                ('position_classification', models.CharField(blank=True, max_length=150)),
                ('plantilla_item_number', models.CharField(blank=True, max_length=100)),
                ('salary_grade', models.CharField(blank=True, max_length=50)),
                ('salary_step', models.CharField(blank=True, max_length=20)),
                ('reports_to', models.CharField(blank=True, max_length=255)),
                ('date_joined_organization', models.DateField(blank=True, null=True)),
                ('primary_location', models.CharField(blank=True, max_length=255)),
                ('job_purpose', models.TextField(blank=True)),
                ('key_result_areas', models.JSONField(blank=True, default=list)),
                ('major_functions', models.JSONField(blank=True, default=list)),
                ('deliverables', models.JSONField(blank=True, default=list)),
                ('supervision_lines', models.JSONField(blank=True, default=list)),
                ('cross_functional_partners', models.JSONField(blank=True, default=list)),
                ('core_competencies', models.JSONField(blank=True, default=list)),
                ('leadership_competencies', models.JSONField(blank=True, default=list)),
                ('functional_competencies', models.JSONField(blank=True, default=list)),
                ('qualification_education', models.CharField(blank=True, max_length=255)),
                ('qualification_training', models.CharField(blank=True, max_length=255)),
                ('qualification_experience', models.CharField(blank=True, max_length=255)),
                ('qualification_eligibility', models.CharField(blank=True, max_length=255)),
                ('qualification_competency', models.TextField(blank=True)),
                ('job_documents_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='StaffTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=160, unique=True)),
                ('description', models.TextField(blank=True)),
                ('mission', models.TextField(blank=True)),
                ('focus_areas', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StaffTeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('lead', 'Team Lead'), ('coordinator', 'Coordinator'), ('member', 'Member')], default='member', max_length=20)),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['team__name', 'user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='TrainingEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('scheduled_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('evidence_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-scheduled_date', 'program__title'],
            },
        ),
        migrations.CreateModel(
            name='TrainingProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('category', models.CharField(blank=True, max_length=150)),
                ('description', models.TextField(blank=True)),
                ('delivery_mode', models.CharField(choices=[('in_person', 'In Person'), ('virtual', 'Virtual'), ('hybrid', 'Hybrid')], default='in_person', max_length=20)),
                ('competency_focus', models.JSONField(blank=True, default=list)),
                ('duration_days', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='UserCalendarPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_reminder_times', models.JSONField(blank=True, default=list, help_text='List of minutes: [1440, 60] = 1 day, 1 hour before')),
                ('email_enabled', models.BooleanField(default=True)),
                ('sms_enabled', models.BooleanField(default=False)),
                ('push_enabled', models.BooleanField(default=True)),
                ('daily_digest', models.BooleanField(default=False)),
                ('weekly_digest', models.BooleanField(default=True)),
                ('quiet_hours_start', models.TimeField(blank=True, help_text="Don't send notifications after this time", null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='Resume notifications after this time', null=True)),
                ('timezone', models.CharField(default='Asia/Manila', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Calendar Preferences',
                'verbose_name_plural': 'User Calendar Preferences',
                'db_table': 'common_user_calendar_preferences',
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_granted', models.BooleanField(default=True, help_text='True = grant permission, False = explicitly deny (overrides role)')),
                ('conditions', models.JSONField(blank=True, default=dict, help_text="Conditions for permission (e.g., {'own_data_only': true})")),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this permission assignment is active')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission expires', null=True)),
                ('reason', models.TextField(blank=True, help_text='Reason for granting this permission')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Permission',
                'verbose_name_plural': 'User Permissions',
                'db_table': 'rbac_user_permission',
                'ordering': ['user', 'permission'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this role assignment is active')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this role assignment expires', null=True)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'rbac_user_role',
                'ordering': ['user', 'role'],
            },
        ),
        migrations.CreateModel(
            name='WorkItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('work_type', models.CharField(choices=[('project', 'Project'), ('sub_project', 'Sub-Project'), ('activity', 'Activity'), ('sub_activity', 'Sub-Activity'), ('task', 'Task'), ('subtask', 'Subtask')], db_index=True, help_text='Type of work item', max_length=20)),
                ('title', models.CharField(help_text='Title of work item', max_length=500)),
                ('description', models.TextField(blank=True, help_text='Detailed description')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('at_risk', 'At Risk'), ('blocked', 'Blocked'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], db_index=True, default='not_started', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent'), ('critical', 'Critical')], db_index=True, default='medium', max_length=10)),
                ('activity_category', models.CharField(blank=True, choices=[('coordination', 'Coordination Activity'), ('ppa', 'PPA Activity'), ('office', 'Office Activity')], db_index=True, help_text='Category for activity work items (coordination, PPA, office).', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_calendar_visible', models.BooleanField(default=True, help_text='Show in calendar view')),
                ('calendar_color', models.CharField(default='#3B82F6', help_text='Hex color code for calendar display', max_length=7)),
                ('progress', models.PositiveSmallIntegerField(default=0, help_text='Progress percentage (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('auto_calculate_progress', models.BooleanField(default=True, help_text='Auto-calculate progress from children')),
                ('is_recurring', models.BooleanField(default=False)),
                ('project_data', models.JSONField(blank=True, default=dict, help_text='Project-specific fields (workflow_stage, budget, etc.)')),
                ('activity_data', models.JSONField(blank=True, default=dict, help_text='Activity-specific fields (event_type, location, etc.)')),
                ('task_data', models.JSONField(blank=True, default=dict, help_text='Task-specific fields (domain, deliverable_type, etc.)')),
                ('object_id', models.UUIDField(blank=True, null=True)),
                ('ppa_category', models.CharField(blank=True, db_index=True, help_text='Category from related PPA (denormalized for performance). Choices: moa_ppa, oobc_ppa, obc_request. Auto-populated from PPA.', max_length=20, null=True)),
                ('allocated_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocated to this work item (PHP)', max_digits=14, null=True)),
                ('actual_expenditure', models.DecimalField(blank=True, decimal_places=2, help_text='Actual expenditure recorded (PHP)', max_digits=14, null=True)),
                ('budget_notes', models.TextField(blank=True, help_text='Budget-related notes and explanations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Work Item',
                'verbose_name_plural': 'Work Items',
                'db_table': 'common_work_item',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('admin', 'Administrator'), ('oobc_executive', 'OOBC Executive'), ('oobc_staff', 'OOBC Staff'), ('cm_office', 'Chief Minister Office'), ('bmoa', 'BARMM Ministry/Agency/Office'), ('lgu', 'Local Government Unit'), ('nga', 'National Government Agency'), ('community_leader', 'Community Leader'), ('researcher', 'Assessment Coordinator/Researcher')], help_text='Type of user based on organization role', max_length=20)),
                ('organization', models.CharField(blank=True, help_text='Name of the organization or agency', max_length=255)),
                ('position', models.CharField(blank=True, help_text='Position or title within the organization', max_length=255)),
                ('contact_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the user account has been approved for access')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the account was approved', null=True)),
                ('moa_first_level_approved', models.BooleanField(default=False, help_text='Whether the user has been endorsed by their MOA/NGA/LGU focal person')),
                ('moa_first_level_approved_at', models.DateTimeField(blank=True, help_text='Timestamp of focal person endorsement', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin user who approved this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('moa_first_level_approved_by', models.ForeignKey(blank=True, help_text='Focal person who provided the first-level endorsement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moa_first_level_approvals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
