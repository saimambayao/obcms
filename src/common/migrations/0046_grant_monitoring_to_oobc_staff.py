# Generated by Claude Code on 2025-10-13

from django.db import migrations


def grant_monitoring_to_staff(apps, schema_editor):
    """
    Grant monitoring_access to OOBC Staff.

    CORRECTION: M&E is operational monitoring that Staff need for their work.
    This was incorrectly restricted in migration 0045 by following the pattern
    from migration 0040, which was only for strategic/sensitive modules (MANA,
    Recommendations, Planning & Budgeting, Project Management, User Approvals).

    RATIONALE FOR GRANTING ACCESS:

    1. OOBC Staff Job Functions Include M&E:
       - Field Coordinators: Monitor program implementation, track outcomes
       - M&E Officers: Collect monitoring data, document field observations
       - Program Officers: Track budget utilization, milestone progress
       - Data Entry Staff: Input accomplishments, challenges, follow-up actions

    2. Industry Best Practices:
       - Government M&E systems provide field staff with operational monitoring
       - Restricting to executives-only eliminates operational functionality
       - Real-time data access enables program adjustments during implementation

    3. Documentation Evidence:
       - docs/rbac/implementation/OOBC_STAFF_RBAC_IMPLEMENTATION_SUMMARY.md:282
         explicitly states "Verify other modules (Communities, Coordination, M&E)
         ARE accessible" for OOBC Staff

    4. System Design Intent:
       - OOBC Initiatives Dashboard: Built for staff to track their projects
       - Operational fields (accomplishments, challenges, support_required)
         require staff input during field implementation

    5. Distinction from Restricted Modules:
       - MANA: Strategic needs assessment (executive decision-making)
       - M&E: Operational monitoring (field implementation tracking)
       - Different purposes, different access requirements

    WHAT OOBC STAFF CAN NOW DO:
    - View OOBC Initiatives Dashboard (their own unit's projects)
    - Track PPA progress for programs they implement
    - Record field accomplishments and challenges
    - Monitor budget utilization for their programs
    - View work item execution hierarchy
    - Track OBC requests pipeline

    WHAT OOBC STAFF STILL CANNOT DO:
    - MANA strategic assessments (requires mana_access)
    - Policy recommendations (requires recommendations_access)
    - Planning & budgeting (requires planning_budgeting_access)
    - Project management (requires project_management_access)
    - User approvals (requires user_approvals_access)
    """
    Role = apps.get_model('common', 'Role')
    Permission = apps.get_model('common', 'Permission')
    RolePermission = apps.get_model('common', 'RolePermission')
    Feature = apps.get_model('common', 'Feature')

    try:
        # Get the monitoring_access feature and permission
        monitoring_feature = Feature.objects.get(feature_key='monitoring_access')
        view_permission = Permission.objects.get(
            feature=monitoring_feature,
            codename='view_monitoring'
        )

        # Get OOBC Staff role
        staff_role = Role.objects.get(slug='oobc-staff')

        # Grant permission to OOBC Staff
        role_perm, created = RolePermission.objects.get_or_create(
            role=staff_role,
            permission=view_permission,
            defaults={
                'is_granted': True,
                'is_active': True,
            }
        )

        if created:
            print("\n" + "="*70)
            print("✅ GRANTED monitoring_access to OOBC Staff (correction applied)")
            print("="*70)
            print("\nOOBC Staff can now access M&E module for operational monitoring:")
            print("  • OOBC Initiatives Dashboard")
            print("  • MOA PPAs Dashboard (read-only)")
            print("  • OBC Requests Dashboard")
            print("  • Work Item Tracking")
            print("  • Budget Monitoring")
            print("\nThis corrects the overly restrictive access from migration 0045.")
            print("M&E is an operational tool, not a strategic planning module.")
            print("="*70 + "\n")
        else:
            print("ℹ️  OOBC Staff already has monitoring_access (permission exists)")

        # Verify the grant was successful
        verification = RolePermission.objects.filter(
            role=staff_role,
            permission=view_permission,
            is_granted=True,
            is_active=True
        ).exists()

        if verification:
            print("✓ Verified: OOBC Staff now has monitoring_access")
        else:
            print("⚠️  WARNING: Permission grant verification failed!")

    except Feature.DoesNotExist:
        print("⚠️  ERROR: monitoring_access feature not found!")
        print("    Make sure migration 0045 has been applied first.")
    except Permission.DoesNotExist:
        print("⚠️  ERROR: view_monitoring permission not found!")
        print("    Make sure migration 0045 has been applied first.")
    except Role.DoesNotExist:
        print("⚠️  ERROR: oobc-staff role not found!")
        print("    Make sure migration 0040 has been applied first.")
    except Exception as e:
        print(f"⚠️  ERROR granting monitoring_access: {e}")
        raise


def remove_monitoring_from_staff(apps, schema_editor):
    """
    Rollback: Remove monitoring_access from OOBC Staff.

    NOTE: This rollback restores the restrictive state from migration 0045.
    Only use this if you need to revert to executive-only M&E access.
    """
    Role = apps.get_model('common', 'Role')
    Permission = apps.get_model('common', 'Permission')
    RolePermission = apps.get_model('common', 'RolePermission')
    Feature = apps.get_model('common', 'Feature')

    try:
        monitoring_feature = Feature.objects.get(feature_key='monitoring_access')
        view_permission = Permission.objects.get(
            feature=monitoring_feature,
            codename='view_monitoring'
        )
        staff_role = Role.objects.get(slug='oobc-staff')

        deleted_count, _ = RolePermission.objects.filter(
            role=staff_role,
            permission=view_permission
        ).delete()

        if deleted_count > 0:
            print("\n" + "="*70)
            print("↩️  REMOVED monitoring_access from OOBC Staff (rollback)")
            print("="*70)
            print("\nOOBC Staff can NO LONGER access M&E module.")
            print("Only Executive Director and Deputy Executive Director have access.")
            print("="*70 + "\n")
        else:
            print("ℹ️  No monitoring_access to remove (already absent)")

    except Exception as e:
        print(f"⚠️  ERROR removing monitoring_access: {e}")
        # Don't raise on rollback - allow migration to proceed


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0045_add_monitoring_access_feature'),
    ]

    operations = [
        migrations.RunPython(
            grant_monitoring_to_staff,
            remove_monitoring_from_staff
        ),
    ]
