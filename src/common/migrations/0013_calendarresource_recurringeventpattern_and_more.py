# Generated by Django 4.2.24 on 2025-10-01 10:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('common', '0012_add_multiple_teams_to_stafftask'),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('vehicle', 'Vehicle'), ('equipment', 'Equipment'), ('room', 'Meeting Room'), ('facilitator', 'Facilitator/Trainer')], help_text='Type of resource', max_length=20)),
                ('name', models.CharField(help_text='Resource name', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Max people (for rooms) or units available', null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('is_available', models.BooleanField(default=True, help_text='Whether resource is currently available for booking')),
                ('booking_requires_approval', models.BooleanField(default=False, help_text='Whether bookings require approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Calendar Resource',
                'verbose_name_plural': 'Calendar Resources',
                'db_table': 'common_calendar_resource',
            },
        ),
        migrations.CreateModel(
            name='RecurringEventPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recurrence_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='Type of recurrence pattern', max_length=20)),
                ('interval', models.PositiveIntegerField(default=1, help_text='Repeat every N days/weeks/months (e.g., 2 = every 2 weeks)')),
                ('by_weekday', models.JSONField(blank=True, default=list, help_text='List of weekdays: [1,3,5] = Mon, Wed, Fri')),
                ('by_monthday', models.PositiveIntegerField(blank=True, help_text='Day of month (1-31)', null=True)),
                ('by_setpos', models.JSONField(blank=True, default=list, help_text="Relative position: [1, 'monday'] = first Monday")),
                ('count', models.PositiveIntegerField(blank=True, help_text='End after N occurrences', null=True)),
                ('until_date', models.DateField(blank=True, help_text='End by this date', null=True)),
                ('exception_dates', models.JSONField(blank=True, default=list, help_text='List of ISO dates to exclude from recurrence')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Recurring Event Pattern',
                'verbose_name_plural': 'Recurring Event Patterns',
                'db_table': 'common_recurring_event_pattern',
            },
        ),
        migrations.AddField(
            model_name='stafftask',
            name='is_recurrence_exception',
            field=models.BooleanField(default=False, help_text='True if this instance was edited separately from the recurrence pattern'),
        ),
        migrations.AddField(
            model_name='stafftask',
            name='is_recurring',
            field=models.BooleanField(default=False, help_text='Whether this is a recurring task'),
        ),
        migrations.AddField(
            model_name='stafftask',
            name='recurrence_parent',
            field=models.ForeignKey(blank=True, help_text='Parent task if this is a recurrence instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_instances', to='common.StaffTask'),
        ),
        migrations.CreateModel(
            name='UserCalendarPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_reminder_times', models.JSONField(blank=True, default=list, help_text='List of minutes: [1440, 60] = 1 day, 1 hour before')),
                ('email_enabled', models.BooleanField(default=True)),
                ('sms_enabled', models.BooleanField(default=False)),
                ('push_enabled', models.BooleanField(default=True)),
                ('daily_digest', models.BooleanField(default=False)),
                ('weekly_digest', models.BooleanField(default=True)),
                ('quiet_hours_start', models.TimeField(blank=True, help_text="Don't send notifications after this time", null=True)),
                ('quiet_hours_end', models.TimeField(blank=True, help_text='Resume notifications after this time', null=True)),
                ('timezone', models.CharField(default='Asia/Manila', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Calendar Preferences',
                'verbose_name_plural': 'User Calendar Preferences',
                'db_table': 'common_user_calendar_preferences',
            },
        ),
        migrations.CreateModel(
            name='StaffLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leave_type', models.CharField(choices=[('vacation', 'Vacation Leave'), ('sick', 'Sick Leave'), ('emergency', 'Emergency Leave'), ('official', 'Official Business')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('reason', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_leaves', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leave_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Leave',
                'verbose_name_plural': 'Staff Leaves',
                'db_table': 'common_staff_leave',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='SharedCalendarLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('max_views', models.PositiveIntegerField(blank=True, help_text='Maximum number of views allowed (optional)', null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('filter_modules', models.JSONField(blank=True, default=list, help_text='Modules to include in shared view')),
                ('filter_date_from', models.DateField(blank=True, null=True)),
                ('filter_date_to', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared_calendar_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shared Calendar Link',
                'verbose_name_plural': 'Shared Calendar Links',
                'db_table': 'common_shared_calendar_link',
            },
        ),
        migrations.CreateModel(
            name='ExternalCalendarSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('google', 'Google Calendar'), ('microsoft', 'Microsoft Outlook'), ('apple', 'Apple iCloud')], max_length=20)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField()),
                ('token_expires_at', models.DateTimeField()),
                ('sync_direction', models.CharField(choices=[('export_only', 'Export to external calendar only'), ('import_only', 'Import from external calendar only'), ('two_way', 'Two-way sync')], default='export_only', max_length=20)),
                ('sync_modules', models.JSONField(blank=True, default=list, help_text="List of module keys: ['coordination', 'staff', 'mana']")),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('sync_status', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_calendar_syncs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'External Calendar Sync',
                'verbose_name_plural': 'External Calendar Syncs',
                'db_table': 'common_external_calendar_sync',
            },
        ),
        migrations.AddField(
            model_name='stafftask',
            name='recurrence_pattern',
            field=models.ForeignKey(blank=True, help_text='Recurrence pattern configuration (RFC 5545 compatible)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_tasks', to='common.recurringeventpattern'),
        ),
        migrations.CreateModel(
            name='CalendarResourceBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_resource_bookings', to=settings.AUTH_USER_MODEL)),
                ('booked_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resource_bookings', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='common.calendarresource')),
            ],
            options={
                'verbose_name': 'Calendar Resource Booking',
                'verbose_name_plural': 'Calendar Resource Bookings',
                'db_table': 'common_calendar_resource_booking',
                'indexes': [models.Index(fields=['start_datetime', 'end_datetime'], name='common_cale_start_d_a29e4d_idx'), models.Index(fields=['resource', 'status'], name='common_cale_resourc_518ef6_idx')],
            },
        ),
        migrations.CreateModel(
            name='CalendarNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('notification_type', models.CharField(choices=[('invitation', 'Event Invitation'), ('reminder', 'Reminder'), ('update', 'Event Updated'), ('cancellation', 'Event Cancelled'), ('rsvp_request', 'RSVP Request')], max_length=20)),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification'), ('in_app', 'In-App')], max_length=20)),
                ('scheduled_for', models.DateTimeField(help_text='When to send notification')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Calendar Notification',
                'verbose_name_plural': 'Calendar Notifications',
                'db_table': 'common_calendar_notification',
                'indexes': [models.Index(fields=['scheduled_for', 'status'], name='common_cale_schedul_574b6a_idx'), models.Index(fields=['recipient', 'scheduled_for'], name='common_cale_recipie_0d23b5_idx')],
            },
        ),
    ]
