# Generated by Django 5.2.7 on 2025-10-13 02:21

from django.db import migrations


def migrate_organization_to_moa_organization(apps, schema_editor):
    """
    Migrate legacy organization CharField to moa_organization ForeignKey.

    This migration:
    1. Ensures OOBC organization exists in coordination.Organization
    2. Maps common organization text patterns to Organization records
    3. Updates moa_organization FK for all users with organization text
    4. Handles OOBC staff (oobc_staff, oobc_executive) and MOA staff (bmoa, lgu, nga)
    """
    User = apps.get_model('common', 'User')
    Organization = apps.get_model('coordination', 'Organization')

    # Step 1: Ensure OOBC organization exists
    oobc_org, created = Organization.objects.get_or_create(
        acronym='OOBC',
        defaults={
            'name': 'Office for Other Bangsamoro Communities',
            'organization_type': 'bmoa',
            'description': 'The Office for Other Bangsamoro Communities serves Bangsamoro communities outside BARMM territory.',
            'is_active': True,
        }
    )

    if created:
        print(f"Created OOBC organization: {oobc_org}")
    else:
        print(f"Found existing OOBC organization: {oobc_org}")

    # Step 2: Define organization mapping patterns
    # Maps legacy organization text patterns to Organization lookups
    organization_patterns = [
        # OOBC patterns (various formats found in legacy data)
        {
            'patterns': [
                'Office for Other Bangsamoro Communities',
                'Office for Other Bangsamoro Communities, Office of the Chief Minister',
                'Office for Other Bangsamoro Communities, Office of the Chief Minister (Bangsamoro Autonomous Region in Muslim Mindanao)',
                'OOBC',
            ],
            'lookup': {'acronym': 'OOBC'}
        },
        # OCM pattern
        {
            'patterns': ['Office of the Chief Minister', 'OCM'],
            'lookup': {'acronym': 'OCM'}
        },
        # Add more patterns as needed for other ministries/agencies
        # Pattern format: {'patterns': ['text1', 'text2'], 'lookup': {'field': 'value'}}
    ]

    # Step 3: Process all users with organization text
    users_with_org = User.objects.filter(
        organization__isnull=False
    ).exclude(
        organization=''
    ).exclude(
        moa_organization__isnull=False  # Skip users already migrated
    )

    migrated_count = 0
    not_found_count = 0
    not_found_orgs = set()

    for user in users_with_org:
        org_text = user.organization.strip()
        matched_org = None

        # Try to match against known patterns
        for pattern_group in organization_patterns:
            if org_text in pattern_group['patterns']:
                try:
                    matched_org = Organization.objects.get(**pattern_group['lookup'])
                    break
                except Organization.DoesNotExist:
                    print(f"Warning: Organization lookup failed for pattern {pattern_group['lookup']}")
                except Organization.MultipleObjectsReturned:
                    print(f"Warning: Multiple organizations found for pattern {pattern_group['lookup']}")

        # If no pattern match, try direct name match (case-insensitive)
        if not matched_org:
            try:
                matched_org = Organization.objects.get(name__iexact=org_text)
            except Organization.DoesNotExist:
                # Try acronym match
                try:
                    matched_org = Organization.objects.get(acronym__iexact=org_text)
                except Organization.DoesNotExist:
                    not_found_orgs.add(org_text)
                    not_found_count += 1
                    continue
                except Organization.MultipleObjectsReturned:
                    print(f"Warning: Multiple organizations found for acronym {org_text}")
                    not_found_orgs.add(org_text)
                    not_found_count += 1
                    continue
            except Organization.MultipleObjectsReturned:
                print(f"Warning: Multiple organizations found for name {org_text}")
                not_found_orgs.add(org_text)
                not_found_count += 1
                continue

        # Update user with matched organization
        if matched_org:
            user.moa_organization = matched_org
            user.save(update_fields=['moa_organization'])
            migrated_count += 1

    # Step 4: Report results
    print(f"\n=== Migration Results ===")
    print(f"Successfully migrated: {migrated_count} users")
    print(f"Could not find organization for: {not_found_count} users")

    if not_found_orgs:
        print(f"\nOrganizations not found in database:")
        for org_text in sorted(not_found_orgs):
            print(f"  - {org_text}")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration: Clear moa_organization FK (keep organization CharField intact).
    """
    User = apps.get_model('common', 'User')

    # Clear moa_organization for all users (but keep organization text)
    User.objects.all().update(moa_organization=None)
    print("Cleared moa_organization FK for all users (organization CharField preserved)")


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0041_add_rbac_management_permissions"),
        ("coordination", "0013_add_model_validation_constraints"),  # Ensure Organization model exists
    ]

    operations = [
        migrations.RunPython(
            migrate_organization_to_moa_organization,
            reverse_migration
        ),
    ]
