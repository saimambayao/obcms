# Generated by Django 5.2.7 on 2025-10-12 20:52

from django.db import migrations
import uuid


def create_oobc_rbac_structure(apps, schema_editor):
    """
    Create RBAC structure for OOBC Staff access restrictions.

    Implements:
    - 5 Features for restricted modules
    - 3 Roles (OOBC Staff, OOBC Executive, OOBC Deputy Executive)
    - Permissions linking features to roles

    OOBC Staff role EXCLUDES access to:
    - MANA Module
    - Recommendations Module
    - Planning & Budgeting
    - Project Management
    - User Approvals

    Executive and Deputy Executive roles have FULL access.
    """
    Feature = apps.get_model('common', 'Feature')
    Permission = apps.get_model('common', 'Permission')
    Role = apps.get_model('common', 'Role')
    RolePermission = apps.get_model('common', 'RolePermission')

    # ========== Step 1: Create Features ==========

    # MANA Module
    mana_feature, _ = Feature.objects.get_or_create(
        feature_key='mana_access',
        defaults={
            'id': uuid.uuid4(),
            'name': 'MANA Module Access',
            'description': 'Access to Mapping and Needs Assessment (MANA) module',
            'module': 'mana',
            'category': 'module_access',
            'icon': 'fa-map-marked-alt',
            'url_pattern': '/mana/',
            'sort_order': 10,
            'is_active': True
        }
    )

    # Recommendations Module
    recommendations_feature, _ = Feature.objects.get_or_create(
        feature_key='recommendations_access',
        defaults={
            'id': uuid.uuid4(),
            'name': 'Recommendations Module Access',
            'description': 'Access to Policy, Program, and Service Recommendations module',
            'module': 'recommendations',
            'category': 'module_access',
            'icon': 'fa-gavel',
            'url_pattern': '/recommendations/',
            'sort_order': 20,
            'is_active': True
        }
    )

    # Planning & Budgeting
    planning_budgeting_feature, _ = Feature.objects.get_or_create(
        feature_key='planning_budgeting_access',
        defaults={
            'id': uuid.uuid4(),
            'name': 'Planning & Budgeting Access',
            'description': 'Access to Planning & Budgeting functionality',
            'module': 'common',
            'category': 'management',
            'icon': 'fa-file-signature',
            'url_pattern': '/oobc-management/planning-budgeting/',
            'sort_order': 30,
            'is_active': True
        }
    )

    # Project Management
    project_management_feature, _ = Feature.objects.get_or_create(
        feature_key='project_management_access',
        defaults={
            'id': uuid.uuid4(),
            'name': 'Project Management Access',
            'description': 'Access to Project Management Portal',
            'module': 'project_central',
            'category': 'management',
            'icon': 'fa-project-diagram',
            'url_pattern': '/project-management/',
            'sort_order': 40,
            'is_active': True
        }
    )

    # User Approvals
    user_approvals_feature, _ = Feature.objects.get_or_create(
        feature_key='user_approvals_access',
        defaults={
            'id': uuid.uuid4(),
            'name': 'User Approvals Access',
            'description': 'Access to User Approval functionality',
            'module': 'common',
            'category': 'admin',
            'icon': 'fa-user-check',
            'url_pattern': '/oobc-management/user-approvals/',
            'sort_order': 50,
            'is_active': True
        }
    )

    # ========== Step 2: Create Permissions for each Feature ==========

    # View permission for each feature
    features_list = [
        (mana_feature, 'view_mana', 'View MANA Module'),
        (recommendations_feature, 'view_recommendations', 'View Recommendations Module'),
        (planning_budgeting_feature, 'view_planning_budgeting', 'View Planning & Budgeting'),
        (project_management_feature, 'view_project_management', 'View Project Management'),
        (user_approvals_feature, 'view_user_approvals', 'View User Approvals'),
    ]

    permissions_dict = {}

    for feature, codename, name in features_list:
        perm, _ = Permission.objects.get_or_create(
            feature=feature,
            codename=codename,
            defaults={
                'id': uuid.uuid4(),
                'name': name,
                'description': f'{name} permission',
                'permission_type': 'view',
                'is_active': True
            }
        )
        permissions_dict[feature.feature_key] = perm

    # ========== Step 3: Create Roles ==========

    # OOBC Staff Role (RESTRICTED - no access to the 5 modules)
    oobc_staff_role, _ = Role.objects.get_or_create(
        slug='oobc-staff',
        organization=None,  # Global role
        defaults={
            'id': uuid.uuid4(),
            'name': 'OOBC Staff',
            'description': 'Regular OOBC staff members with restricted access to sensitive modules',
            'scope': 'system',
            'level': 2,  # Staff level
            'is_active': True,
            'is_system_role': True
        }
    )

    # OOBC Executive Role (FULL ACCESS)
    oobc_executive_role, _ = Role.objects.get_or_create(
        slug='oobc-executive-director',
        organization=None,  # Global role
        defaults={
            'id': uuid.uuid4(),
            'name': 'OOBC Executive Director',
            'description': 'OOBC Executive Director with full system access',
            'scope': 'system',
            'level': 5,  # Super Admin level
            'is_active': True,
            'is_system_role': True
        }
    )

    # OOBC Deputy Executive Role (FULL ACCESS)
    oobc_deputy_role, _ = Role.objects.get_or_create(
        slug='oobc-deputy-executive-director',
        organization=None,  # Global role
        defaults={
            'id': uuid.uuid4(),
            'name': 'OOBC Deputy Executive Director',
            'description': 'OOBC Deputy Executive Director with full system access',
            'scope': 'system',
            'level': 5,  # Super Admin level
            'is_active': True,
            'is_system_role': True
        }
    )

    # ========== Step 4: Assign Permissions to Roles ==========

    # OOBC Staff Role: NO permissions (restricted from all 5 modules)
    # We explicitly do NOT create RolePermissions for OOBC Staff

    # Executive Role: FULL ACCESS to all modules
    for feature_key, permission in permissions_dict.items():
        RolePermission.objects.get_or_create(
            role=oobc_executive_role,
            permission=permission,
            defaults={
                'id': uuid.uuid4(),
                'is_granted': True,
                'is_active': True
            }
        )

    # Deputy Executive Role: FULL ACCESS to all modules
    for feature_key, permission in permissions_dict.items():
        RolePermission.objects.get_or_create(
            role=oobc_deputy_role,
            permission=permission,
            defaults={
                'id': uuid.uuid4(),
                'is_granted': True,
                'is_active': True
            }
        )

    print("âœ… RBAC structure created successfully:")
    print(f"   - Created {len(features_list)} features")
    print(f"   - Created {len(permissions_dict)} permissions")
    print(f"   - Created 3 roles (Staff, Executive, Deputy Executive)")
    print(f"   - OOBC Staff role: NO access to restricted modules")
    print(f"   - Executive/Deputy roles: FULL access to all modules")


def reverse_oobc_rbac_structure(apps, schema_editor):
    """Reverse the RBAC structure creation."""
    Feature = apps.get_model('common', 'Feature')
    Permission = apps.get_model('common', 'Permission')
    Role = apps.get_model('common', 'Role')
    RolePermission = apps.get_model('common', 'RolePermission')

    # Delete roles
    Role.objects.filter(slug__in=[
        'oobc-staff',
        'oobc-executive-director',
        'oobc-deputy-executive-director'
    ]).delete()

    # Delete features (cascades to permissions and role permissions)
    Feature.objects.filter(feature_key__in=[
        'mana_access',
        'recommendations_access',
        'planning_budgeting_access',
        'project_management_access',
        'user_approvals_access'
    ]).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0039_feature_permission_role_rolepermission_and_more"),
    ]

    operations = [
        migrations.RunPython(
            create_oobc_rbac_structure,
            reverse_oobc_rbac_structure
        ),
    ]
