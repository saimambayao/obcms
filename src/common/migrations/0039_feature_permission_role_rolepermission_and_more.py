# Generated by Django 5.2.7 on 2025-10-12 20:08

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0038_add_audit_log_model"),
        (
            "coordination",
            "0015_organization_barangay_organization_municipality_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Feature",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "feature_key",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier (e.g., 'communities.barangay_obc')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable feature name", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this feature does"
                    ),
                ),
                (
                    "module",
                    models.CharField(
                        db_index=True,
                        help_text="Module this feature belongs to (e.g., 'communities', 'mana', 'coordination')",
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Feature category for grouping (e.g., 'navigation', 'data_management', 'reporting')",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this feature is currently active",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon class for UI display (e.g., 'fa-users')",
                        max_length=50,
                    ),
                ),
                (
                    "url_pattern",
                    models.CharField(
                        blank=True,
                        help_text="URL pattern for this feature (e.g., '/communities/barangay/')",
                        max_length=255,
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(
                        default=0, help_text="Display order within parent/module"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization this feature is scoped to (null = global feature)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_features",
                        to="coordination.organization",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent feature for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="common.feature",
                    ),
                ),
            ],
            options={
                "verbose_name": "Feature",
                "verbose_name_plural": "Features",
                "db_table": "rbac_feature",
                "ordering": ["module", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "codename",
                    models.CharField(
                        db_index=True,
                        help_text="Permission identifier (e.g., 'view', 'create', 'approve')",
                        max_length=100,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable permission name", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this permission allows",
                    ),
                ),
                (
                    "permission_type",
                    models.CharField(
                        choices=[
                            ("view", "View/Read"),
                            ("create", "Create/Add"),
                            ("edit", "Edit/Update"),
                            ("delete", "Delete/Remove"),
                            ("approve", "Approve/Authorize"),
                            ("export", "Export Data"),
                            ("custom", "Custom Action"),
                        ],
                        db_index=True,
                        default="view",
                        help_text="Type of permission",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this permission is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "feature",
                    models.ForeignKey(
                        help_text="Feature this permission applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="common.feature",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission",
                "verbose_name_plural": "Permissions",
                "db_table": "rbac_permission",
                "ordering": ["feature", "permission_type", "codename"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Role name (e.g., 'OOBC Admin', 'MOA Manager')",
                        max_length=100,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly role identifier", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of role responsibilities"
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("system", "System-wide"),
                            ("organization", "Organization-specific"),
                            ("module", "Module-specific"),
                        ],
                        db_index=True,
                        default="organization",
                        help_text="Scope of this role",
                        max_length=20,
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        choices=[
                            (1, "Viewer"),
                            (2, "Staff"),
                            (3, "Manager"),
                            (4, "Admin"),
                            (5, "Super Admin"),
                        ],
                        db_index=True,
                        default=2,
                        help_text="Role hierarchy level",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this role is currently active",
                    ),
                ),
                (
                    "is_system_role",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system-defined role (cannot be deleted)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this role",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization this role belongs to (null = global role)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="coordination.organization",
                    ),
                ),
                (
                    "parent_role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent role for permission inheritance",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_roles",
                        to="common.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "rbac_role",
                "ordering": ["-level", "name"],
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_granted",
                    models.BooleanField(
                        default=True,
                        help_text="True = grant permission, False = explicitly deny",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Conditions for permission (e.g., {'own_data_only': true})",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this permission assignment is active",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this permission assignment expires",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who granted this permission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_role_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        help_text="Permission being granted",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_assignments",
                        to="common.permission",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        help_text="Role being granted permission",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_permissions",
                        to="common.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role Permission",
                "verbose_name_plural": "Role Permissions",
                "db_table": "rbac_role_permission",
                "ordering": ["role", "permission"],
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_granted",
                    models.BooleanField(
                        default=True,
                        help_text="True = grant permission, False = explicitly deny (overrides role)",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Conditions for permission (e.g., {'own_data_only': true})",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this permission assignment is active",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When this permission expires", null=True
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        blank=True, help_text="Reason for granting this permission"
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who granted this permission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_user_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization context for this permission",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_permission_assignments",
                        to="coordination.organization",
                    ),
                ),
                (
                    "permission",
                    models.ForeignKey(
                        help_text="Permission being granted",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_user_assignments",
                        to="common.permission",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User being granted permission",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Permission",
                "verbose_name_plural": "User Permissions",
                "db_table": "rbac_user_permission",
                "ordering": ["user", "permission"],
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this role assignment is active",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this role assignment expires",
                        null=True,
                    ),
                ),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who assigned this role",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_user_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organization context for this role assignment",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_role_assignments",
                        to="coordination.organization",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        help_text="Role being assigned",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="common.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User being assigned role",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Role",
                "verbose_name_plural": "User Roles",
                "db_table": "rbac_user_role",
                "ordering": ["user", "role"],
            },
        ),
        migrations.AddIndex(
            model_name="feature",
            index=models.Index(
                fields=["module", "is_active"], name="rbac_featur_module_15e9aa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="feature",
            index=models.Index(
                fields=["parent", "sort_order"], name="rbac_featur_parent__868c85_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="feature",
            index=models.Index(
                fields=["organization", "is_active"],
                name="rbac_featur_organiz_5375f7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["feature", "permission_type", "is_active"],
                name="rbac_permis_feature_613c4e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="permission",
            index=models.Index(
                fields=["codename", "is_active"], name="rbac_permis_codenam_8e56fc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="permission",
            unique_together={("feature", "codename")},
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["scope", "is_active"], name="rbac_role_scope_acbe2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["organization", "is_active"],
                name="rbac_role_organiz_195702_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="role",
            index=models.Index(
                fields=["level", "is_active"], name="rbac_role_level_be9816_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="role",
            unique_together={("slug", "organization")},
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["role", "is_active"], name="rbac_role_p_role_id_4d693d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["permission", "is_active"],
                name="rbac_role_p_permiss_5aad35_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="rolepermission",
            index=models.Index(
                fields=["expires_at"], name="rbac_role_p_expires_5448f8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rolepermission",
            unique_together={("role", "permission")},
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["user", "is_active"], name="rbac_user_p_user_id_3f18cf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["permission", "is_active"],
                name="rbac_user_p_permiss_f78df2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["organization", "is_active"],
                name="rbac_user_p_organiz_72d95d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userpermission",
            index=models.Index(
                fields=["expires_at"], name="rbac_user_p_expires_fca1b2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userpermission",
            unique_together={("user", "permission", "organization")},
        ),
        migrations.AddIndex(
            model_name="userrole",
            index=models.Index(
                fields=["user", "is_active"], name="rbac_user_r_user_id_1427b8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userrole",
            index=models.Index(
                fields=["role", "is_active"], name="rbac_user_r_role_id_b8faa6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userrole",
            index=models.Index(
                fields=["organization", "is_active"],
                name="rbac_user_r_organiz_2e9407_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userrole",
            index=models.Index(
                fields=["expires_at"], name="rbac_user_r_expires_a9e6ba_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userrole",
            unique_together={("user", "role", "organization")},
        ),
    ]
