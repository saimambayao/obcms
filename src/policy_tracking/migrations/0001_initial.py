# Generated by Django 4.2.21 on 2025-05-22 13:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("communities", "0002_stakeholder_stakeholderengagement"),
        ("mana", "0004_baselinestudy_baselinestudyteammember_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="PolicyRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the policy recommendation", max_length=255
                    ),
                ),
                (
                    "reference_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique reference number for tracking",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("education", "Education"),
                            ("economic_development", "Economic Development"),
                            ("social_development", "Social Development"),
                            ("cultural_development", "Cultural Development"),
                            ("infrastructure", "Infrastructure"),
                            ("governance", "Governance"),
                            ("healthcare", "Healthcare"),
                            ("environment", "Environment"),
                            ("human_rights", "Human Rights"),
                            ("legal_framework", "Legal Framework"),
                            ("administrative", "Administrative"),
                            ("financial", "Financial"),
                            ("other", "Other"),
                        ],
                        help_text="Policy category",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the policy recommendation"
                    ),
                ),
                (
                    "rationale",
                    models.TextField(
                        help_text="Rationale and justification for the policy"
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("national", "National Level"),
                            ("regional", "Regional Level (BARMM)"),
                            ("provincial", "Provincial Level"),
                            ("municipal", "Municipal/City Level"),
                            ("barangay", "Barangay Level"),
                            ("community", "Community Level"),
                        ],
                        help_text="Scope and level of the policy",
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("under_review", "Under Review"),
                            ("needs_revision", "Needs Revision"),
                            ("submitted", "Submitted to Chief Minister"),
                            ("under_consideration", "Under Consideration"),
                            ("approved", "Approved"),
                            ("in_implementation", "In Implementation"),
                            ("implemented", "Implemented"),
                            ("rejected", "Rejected"),
                            ("withdrawn", "Withdrawn"),
                            ("on_hold", "On Hold"),
                            ("expired", "Expired"),
                        ],
                        default="draft",
                        help_text="Current status of the policy recommendation",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        help_text="Priority level",
                        max_length=10,
                    ),
                ),
                (
                    "submission_date",
                    models.DateField(
                        blank=True,
                        help_text="Date submitted to higher authority",
                        null=True,
                    ),
                ),
                (
                    "review_deadline",
                    models.DateField(
                        blank=True,
                        help_text="Deadline for review completion",
                        null=True,
                    ),
                ),
                (
                    "approval_date",
                    models.DateField(
                        blank=True, help_text="Date when policy was approved", null=True
                    ),
                ),
                (
                    "implementation_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Expected/actual implementation start date",
                        null=True,
                    ),
                ),
                (
                    "implementation_deadline",
                    models.DateField(
                        blank=True,
                        help_text="Expected implementation completion date",
                        null=True,
                    ),
                ),
                (
                    "problem_statement",
                    models.TextField(
                        help_text="Clear statement of the problem being addressed"
                    ),
                ),
                (
                    "policy_objectives",
                    models.TextField(
                        help_text="Specific objectives the policy aims to achieve"
                    ),
                ),
                (
                    "proposed_solution",
                    models.TextField(help_text="Detailed proposed solution"),
                ),
                (
                    "implementation_strategy",
                    models.TextField(
                        blank=True, help_text="Strategy for implementing the policy"
                    ),
                ),
                (
                    "success_metrics",
                    models.TextField(
                        blank=True, help_text="Metrics for measuring policy success"
                    ),
                ),
                (
                    "expected_outcomes",
                    models.TextField(help_text="Expected outcomes and benefits"),
                ),
                (
                    "potential_risks",
                    models.TextField(
                        blank=True, help_text="Potential risks and challenges"
                    ),
                ),
                (
                    "mitigation_strategies",
                    models.TextField(
                        blank=True, help_text="Strategies to mitigate identified risks"
                    ),
                ),
                (
                    "stakeholder_impact",
                    models.TextField(
                        blank=True, help_text="Impact on various stakeholders"
                    ),
                ),
                (
                    "budget_implications",
                    models.TextField(
                        blank=True,
                        help_text="Budget requirements and financial implications",
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated implementation cost (in PHP)",
                        max_digits=15,
                        null=True,
                    ),
                ),
                (
                    "funding_source",
                    models.CharField(
                        blank=True,
                        help_text="Proposed funding source(s)",
                        max_length=255,
                    ),
                ),
                (
                    "human_resources_required",
                    models.TextField(
                        blank=True,
                        help_text="Human resources and staffing requirements",
                    ),
                ),
                (
                    "technical_requirements",
                    models.TextField(
                        blank=True,
                        help_text="Technical requirements and infrastructure needs",
                    ),
                ),
                (
                    "legal_implications",
                    models.TextField(
                        blank=True,
                        help_text="Legal implications and regulatory considerations",
                    ),
                ),
                (
                    "regulatory_changes_needed",
                    models.TextField(
                        blank=True, help_text="Required regulatory or legal changes"
                    ),
                ),
                (
                    "compliance_requirements",
                    models.TextField(
                        blank=True, help_text="Compliance requirements and standards"
                    ),
                ),
                (
                    "implementation_phases",
                    models.TextField(
                        blank=True, help_text="Implementation phases and timeline"
                    ),
                ),
                (
                    "responsible_agencies",
                    models.TextField(
                        blank=True, help_text="Agencies responsible for implementation"
                    ),
                ),
                (
                    "monitoring_framework",
                    models.TextField(
                        blank=True, help_text="Framework for monitoring implementation"
                    ),
                ),
                (
                    "reporting_requirements",
                    models.TextField(
                        blank=True, help_text="Reporting requirements and schedule"
                    ),
                ),
                (
                    "review_comments",
                    models.TextField(blank=True, help_text="Comments from reviewers"),
                ),
                (
                    "revision_history",
                    models.JSONField(
                        blank=True,
                        help_text="History of revisions and changes",
                        null=True,
                    ),
                ),
                (
                    "feedback_summary",
                    models.TextField(
                        blank=True, help_text="Summary of stakeholder feedback"
                    ),
                ),
                (
                    "actual_outcomes",
                    models.TextField(
                        blank=True,
                        help_text="Actual outcomes achieved (post-implementation)",
                    ),
                ),
                (
                    "lessons_learned",
                    models.TextField(
                        blank=True, help_text="Lessons learned during implementation"
                    ),
                ),
                (
                    "recommendations_for_improvement",
                    models.TextField(
                        blank=True, help_text="Recommendations for future improvements"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes and observations"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_reviewer",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to review this policy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="policies_to_review",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "contributing_authors",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Additional authors and contributors",
                        related_name="co_authored_policies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lead_author",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary author/coordinator for this policy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authored_policies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "proposed_by",
                    models.ForeignKey(
                        help_text="User who proposed this policy",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="proposed_policies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_assessments",
                    models.ManyToManyField(
                        blank=True,
                        help_text="MANA assessments that support this recommendation",
                        related_name="policy_recommendations",
                        to="mana.assessment",
                    ),
                ),
                (
                    "related_needs",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific assessed needs addressed by this policy",
                        related_name="policy_recommendations",
                        to="mana.need",
                    ),
                ),
                (
                    "target_communities",
                    models.ManyToManyField(
                        blank=True,
                        help_text="OBC communities that would be affected by this policy",
                        related_name="policy_recommendations",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PolicyImpact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "impact_type",
                    models.CharField(
                        choices=[
                            ("economic", "Economic Impact"),
                            ("social", "Social Impact"),
                            ("educational", "Educational Impact"),
                            ("cultural", "Cultural Impact"),
                            ("infrastructure", "Infrastructure Impact"),
                            ("healthcare", "Healthcare Impact"),
                            ("environmental", "Environmental Impact"),
                            ("governance", "Governance Impact"),
                            ("human_rights", "Human Rights Impact"),
                            ("legal", "Legal Impact"),
                            ("administrative", "Administrative Impact"),
                            ("other", "Other Impact"),
                        ],
                        help_text="Type of impact",
                        max_length=15,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the impact indicator", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the impact"),
                ),
                (
                    "measurement_type",
                    models.CharField(
                        choices=[
                            ("quantitative", "Quantitative"),
                            ("qualitative", "Qualitative"),
                            ("mixed", "Mixed Methods"),
                        ],
                        default="quantitative",
                        help_text="Type of measurement approach",
                        max_length=15,
                    ),
                ),
                (
                    "measurement_method",
                    models.TextField(help_text="Method for measuring this impact"),
                ),
                (
                    "unit_of_measurement",
                    models.CharField(
                        blank=True,
                        help_text="Unit of measurement (e.g., percentage, number, PHP)",
                        max_length=100,
                    ),
                ),
                (
                    "baseline_value",
                    models.CharField(
                        blank=True,
                        help_text="Baseline value before policy implementation",
                        max_length=200,
                    ),
                ),
                (
                    "baseline_date",
                    models.DateField(
                        blank=True, help_text="Date of baseline measurement", null=True
                    ),
                ),
                (
                    "target_value",
                    models.CharField(
                        blank=True,
                        help_text="Target value to be achieved",
                        max_length=200,
                    ),
                ),
                (
                    "target_date",
                    models.DateField(
                        blank=True,
                        help_text="Target date for achieving the value",
                        null=True,
                    ),
                ),
                (
                    "current_value",
                    models.CharField(
                        blank=True, help_text="Current measured value", max_length=200
                    ),
                ),
                (
                    "last_measurement_date",
                    models.DateField(
                        blank=True, help_text="Date of last measurement", null=True
                    ),
                ),
                (
                    "final_value",
                    models.CharField(
                        blank=True,
                        help_text="Final achieved value (post-implementation)",
                        max_length=200,
                    ),
                ),
                (
                    "final_assessment_date",
                    models.DateField(
                        blank=True,
                        help_text="Date of final impact assessment",
                        null=True,
                    ),
                ),
                (
                    "analysis_notes",
                    models.TextField(
                        blank=True, help_text="Analysis of impact results"
                    ),
                ),
                (
                    "variance_explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation for variance between target and actual",
                    ),
                ),
                (
                    "contributing_factors",
                    models.TextField(
                        blank=True, help_text="Factors that contributed to the impact"
                    ),
                ),
                (
                    "data_quality",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        help_text="Quality of impact data",
                        max_length=10,
                    ),
                ),
                (
                    "confidence_level",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        help_text="Confidence level in the impact measurement",
                        max_length=10,
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "measured_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who conducted the impact measurement",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="measured_impacts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        help_text="Policy this impact relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="impacts",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
            ],
            options={
                "ordering": ["impact_type", "title"],
            },
        ),
        migrations.CreateModel(
            name="PolicyEvidence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the evidence", max_length=255),
                ),
                (
                    "evidence_type",
                    models.CharField(
                        choices=[
                            ("quantitative_data", "Quantitative Data"),
                            ("qualitative_data", "Qualitative Data"),
                            ("research_study", "Research Study"),
                            ("needs_assessment", "Needs Assessment"),
                            ("stakeholder_consultation", "Stakeholder Consultation"),
                            ("case_study", "Case Study"),
                            ("best_practice", "Best Practice"),
                            ("legal_precedent", "Legal Precedent"),
                            ("expert_opinion", "Expert Opinion"),
                            ("field_observation", "Field Observation"),
                            ("document_analysis", "Document Analysis"),
                            ("comparative_analysis", "Comparative Analysis"),
                            ("other", "Other"),
                        ],
                        help_text="Type of evidence",
                        max_length=25,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed description of the evidence"),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True, help_text="Source of the evidence", max_length=255
                    ),
                ),
                (
                    "methodology",
                    models.TextField(
                        blank=True,
                        help_text="Methodology used to collect this evidence",
                    ),
                ),
                (
                    "reliability_level",
                    models.CharField(
                        choices=[
                            ("high", "High Reliability"),
                            ("medium", "Medium Reliability"),
                            ("low", "Low Reliability"),
                            ("unverified", "Unverified"),
                        ],
                        default="medium",
                        help_text="Assessed reliability of this evidence",
                        max_length=15,
                    ),
                ),
                (
                    "quality_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes on evidence quality and limitations",
                    ),
                ),
                (
                    "key_findings",
                    models.TextField(
                        blank=True, help_text="Key findings from this evidence"
                    ),
                ),
                (
                    "relevance_explanation",
                    models.TextField(
                        help_text="Explanation of how this evidence supports the policy"
                    ),
                ),
                (
                    "statistical_data",
                    models.JSONField(
                        blank=True,
                        help_text="Statistical data in JSON format",
                        null=True,
                    ),
                ),
                (
                    "document",
                    models.FileField(
                        blank=True,
                        help_text="Supporting document file",
                        null=True,
                        upload_to="policy_evidence/%Y/%m/",
                    ),
                ),
                ("url", models.URLField(blank=True, help_text="URL to online source")),
                (
                    "reference_citation",
                    models.TextField(
                        blank=True,
                        help_text="Full citation for academic/formal references",
                    ),
                ),
                (
                    "date_collected",
                    models.DateField(
                        blank=True,
                        help_text="Date when evidence was collected",
                        null=True,
                    ),
                ),
                (
                    "date_added",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date when evidence was added to policy",
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this evidence has been verified",
                    ),
                ),
                (
                    "verification_date",
                    models.DateField(
                        blank=True, help_text="Date of verification", null=True
                    ),
                ),
                (
                    "verification_notes",
                    models.TextField(
                        blank=True, help_text="Verification notes and comments"
                    ),
                ),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "added_by",
                    models.ForeignKey(
                        help_text="User who added this evidence",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="added_evidence",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        help_text="Policy recommendation this evidence supports",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="evidence",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
                (
                    "verified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who verified this evidence",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="verified_evidence",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_added"],
            },
        ),
        migrations.CreateModel(
            name="PolicyDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("policy_draft", "Policy Draft"),
                            ("supporting_doc", "Supporting Document"),
                            ("evidence", "Evidence Document"),
                            ("consultation_report", "Consultation Report"),
                            ("impact_assessment", "Impact Assessment"),
                            ("implementation_plan", "Implementation Plan"),
                            ("monitoring_report", "Monitoring Report"),
                            ("evaluation_report", "Evaluation Report"),
                            ("correspondence", "Correspondence"),
                            ("presentation", "Presentation"),
                            ("legal_opinion", "Legal Opinion"),
                            ("other", "Other"),
                        ],
                        help_text="Type of document",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the document", max_length=255),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the document"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0", help_text="Document version", max_length=10
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Document file", upload_to="policy_documents/%Y/%m/"
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "is_confidential",
                    models.BooleanField(
                        default=False, help_text="Whether this document is confidential"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this document can be shared publicly",
                    ),
                ),
                (
                    "document_date",
                    models.DateField(
                        blank=True, help_text="Date of the document", null=True
                    ),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True, help_text="Document author", max_length=255
                    ),
                ),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True, help_text="Additional notes")),
                (
                    "policy",
                    models.ForeignKey(
                        help_text="Policy this document belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this document",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="uploaded_policy_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-upload_date"],
            },
        ),
        migrations.AddIndex(
            model_name="policyrecommendation",
            index=models.Index(
                fields=["status", "priority"], name="policy_trac_status_7603ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="policyrecommendation",
            index=models.Index(
                fields=["category", "status"], name="policy_trac_categor_a8a125_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="policyrecommendation",
            index=models.Index(
                fields=["proposed_by", "status"], name="policy_trac_propose_716771_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="policyrecommendation",
            index=models.Index(
                fields=["submission_date", "priority"],
                name="policy_trac_submiss_a5f2a9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="policyimpact",
            index=models.Index(
                fields=["policy", "impact_type"], name="policy_trac_policy__0cb63b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="policyimpact",
            index=models.Index(
                fields=["target_date", "policy"], name="policy_trac_target__d3d0df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="policyevidence",
            index=models.Index(
                fields=["policy", "evidence_type"],
                name="policy_trac_policy__108406_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="policyevidence",
            index=models.Index(
                fields=["reliability_level", "verified"],
                name="policy_trac_reliabi_a525d5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="policydocument",
            index=models.Index(
                fields=["policy", "document_type"],
                name="policy_trac_policy__e1e4d4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="policydocument",
            index=models.Index(
                fields=["is_confidential", "is_public"],
                name="policy_trac_is_conf_146307_idx",
            ),
        ),
    ]
