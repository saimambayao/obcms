"""
Locust load testing configuration for Budget Preparation Module

Tests system performance under load with 500+ concurrent users.

Usage:
    # Run with 500 concurrent users
    locust -f locustfile.py --host=http://localhost:8000 --users=500 --spawn-rate=10

    # Run with web interface
    locust -f locustfile.py --host=http://localhost:8000

    # Headless mode with report
    locust -f locustfile.py --host=http://localhost:8000 --users=500 --spawn-rate=10 \
           --run-time=10m --headless --html=load_test_report.html

Target:
- 500+ concurrent users
- Budget operations < 50ms query time
- No degradation under load
- Success rate > 99%
"""

import random
import time
from decimal import Decimal

from locust import HttpUser, task, between, events
from locust.exception import StopUser


class BudgetPreparationUser(HttpUser):
    """Simulates a budget officer using the budget preparation system."""

    wait_time = between(1, 3)  # Wait 1-3 seconds between tasks

    def on_start(self):
        """Called when a user starts - perform login."""
        self.login()
        self.proposal_id = None
        self.program_id = None

    def login(self):
        """Authenticate the user."""
        response = self.client.post("/login/", data={
            "username": f"loadtest_user_{random.randint(1, 100)}",
            "password": "LoadTest123!",
        }, name="/login/")

        if response.status_code != 200:
            # If login fails, create a new user (for testing purposes)
            self.client.post("/api/auth/register/", json={
                "username": f"loadtest_user_{random.randint(1, 100)}",
                "password": "LoadTest123!",
                "email": f"loadtest{random.randint(1, 1000)}@example.com",
            })

    @task(5)
    def view_budget_list(self):
        """View list of budget proposals (most common operation)."""
        self.client.get(
            "/budget/preparation/",
            name="/budget/preparation/ [LIST]"
        )

    @task(3)
    def view_budget_detail(self):
        """View details of a specific budget proposal."""
        # Simulate viewing different proposals
        proposal_id = random.randint(1, 100)
        self.client.get(
            f"/budget/preparation/proposal/{proposal_id}/",
            name="/budget/preparation/proposal/[id]/ [DETAIL]"
        )

    @task(2)
    def create_budget_proposal(self):
        """Create a new budget proposal."""
        fiscal_year = random.choice([2024, 2025, 2026])
        unique_id = int(time.time() * 1000) + random.randint(1, 1000)

        response = self.client.post(
            "/api/budget/preparation/proposals/",
            json={
                "fiscal_year": fiscal_year,
                "title": f"Load Test Budget Proposal {unique_id}",
                "description": "Generated by load testing",
                "total_requested_budget": str(random.randint(50, 200) * 1000000),
                "status": "draft"
            },
            name="/api/budget/preparation/proposals/ [CREATE]"
        )

        if response.status_code == 201:
            data = response.json()
            self.proposal_id = data.get('id')

    @task(2)
    def add_program_budget(self):
        """Add a program budget to a proposal."""
        if not self.proposal_id:
            self.proposal_id = random.randint(1, 50)

        response = self.client.post(
            f"/api/budget/preparation/proposals/{self.proposal_id}/programs/",
            json={
                "monitoring_entry_id": random.randint(1, 20),
                "requested_amount": str(random.randint(10, 50) * 1000000),
                "priority_rank": random.randint(1, 10)
            },
            name="/api/budget/preparation/proposals/[id]/programs/ [CREATE]"
        )

        if response.status_code == 201:
            data = response.json()
            self.program_id = data.get('id')

    @task(1)
    def add_line_item(self):
        """Add a line item to a program budget."""
        if not self.program_id:
            self.program_id = random.randint(1, 100)

        category = random.choice(['personnel', 'operating', 'capital'])
        unit_cost = random.randint(10000, 10000000)
        quantity = random.randint(1, 100)

        self.client.post(
            f"/api/budget/preparation/programs/{self.program_id}/line-items/",
            json={
                "category": category,
                "description": f"Load test {category} line item",
                "unit_cost": str(unit_cost),
                "quantity": quantity,
                "total_cost": str(unit_cost * quantity)
            },
            name="/api/budget/preparation/programs/[id]/line-items/ [CREATE]"
        )

    @task(3)
    def view_budget_summary(self):
        """View budget summary/dashboard."""
        self.client.get(
            "/budget/preparation/dashboard/",
            name="/budget/preparation/dashboard/ [SUMMARY]"
        )

    @task(2)
    def search_budgets(self):
        """Search for budget proposals."""
        search_params = {
            "fiscal_year": random.choice([2024, 2025, 2026]),
            "status": random.choice(['draft', 'submitted', 'approved'])
        }

        self.client.get(
            "/api/budget/preparation/proposals/",
            params=search_params,
            name="/api/budget/preparation/proposals/ [SEARCH]"
        )

    @task(1)
    def update_budget_proposal(self):
        """Update an existing budget proposal."""
        if not self.proposal_id:
            self.proposal_id = random.randint(1, 50)

        self.client.patch(
            f"/api/budget/preparation/proposals/{self.proposal_id}/",
            json={
                "description": f"Updated by load test at {time.time()}",
                "total_requested_budget": str(random.randint(50, 200) * 1000000)
            },
            name="/api/budget/preparation/proposals/[id]/ [UPDATE]"
        )

    @task(1)
    def submit_budget_proposal(self):
        """Submit a draft budget proposal."""
        if not self.proposal_id:
            self.proposal_id = random.randint(1, 50)

        self.client.post(
            f"/api/budget/preparation/proposals/{self.proposal_id}/submit/",
            name="/api/budget/preparation/proposals/[id]/submit/ [WORKFLOW]"
        )

    @task(1)
    def get_budget_report(self):
        """Generate budget report."""
        self.client.get(
            "/api/budget/preparation/reports/variance/",
            name="/api/budget/preparation/reports/variance/ [REPORT]"
        )

    @task(1)
    def export_budget_pdf(self):
        """Export budget as PDF."""
        if not self.proposal_id:
            self.proposal_id = random.randint(1, 50)

        self.client.get(
            f"/api/budget/preparation/proposals/{self.proposal_id}/export/pdf/",
            name="/api/budget/preparation/proposals/[id]/export/pdf/ [EXPORT]"
        )


class BudgetExecutionUser(HttpUser):
    """Simulates a budget execution officer."""

    wait_time = between(1, 3)

    def on_start(self):
        """Login and initialize."""
        self.login()
        self.allotment_id = None
        self.obligation_id = None

    def login(self):
        """Authenticate the user."""
        response = self.client.post("/login/", data={
            "username": f"exec_user_{random.randint(1, 100)}",
            "password": "LoadTest123!",
        })

    @task(5)
    def view_execution_dashboard(self):
        """View execution dashboard (most common)."""
        self.client.get(
            "/budget/execution/dashboard/",
            name="/budget/execution/dashboard/ [DASHBOARD]"
        )

    @task(3)
    def view_allotments(self):
        """View allotments list."""
        self.client.get(
            "/api/budget/execution/allotments/",
            name="/api/budget/execution/allotments/ [LIST]"
        )

    @task(2)
    def release_allotment(self):
        """Release a new allotment."""
        program_budget_id = random.randint(1, 50)

        response = self.client.post(
            "/api/budget/execution/allotments/",
            json={
                "program_budget_id": program_budget_id,
                "quarter": random.choice(['Q1', 'Q2', 'Q3', 'Q4']),
                "amount": str(random.randint(5, 15) * 1000000),
                "release_notes": "Load test allotment"
            },
            name="/api/budget/execution/allotments/ [CREATE]"
        )

        if response.status_code == 201:
            data = response.json()
            self.allotment_id = data.get('id')

    @task(2)
    def create_obligation(self):
        """Create an obligation."""
        if not self.allotment_id:
            self.allotment_id = random.randint(1, 100)

        response = self.client.post(
            "/api/budget/execution/obligations/",
            json={
                "allotment_id": self.allotment_id,
                "work_item_id": random.randint(1, 50),
                "amount": str(random.randint(1, 5) * 1000000),
                "payee": f"Load Test Contractor {random.randint(1, 100)}",
                "description": "Load test obligation"
            },
            name="/api/budget/execution/obligations/ [CREATE]"
        )

        if response.status_code == 201:
            data = response.json()
            self.obligation_id = data.get('id')

    @task(1)
    def record_disbursement(self):
        """Record a disbursement."""
        if not self.obligation_id:
            self.obligation_id = random.randint(1, 100)

        self.client.post(
            "/api/budget/execution/disbursements/",
            json={
                "obligation_id": self.obligation_id,
                "amount": str(random.randint(500000, 2000000)),
                "payment_method": random.choice(['check', 'bank_transfer']),
                "notes": "Load test disbursement"
            },
            name="/api/budget/execution/disbursements/ [CREATE]"
        )

    @task(2)
    def view_execution_report(self):
        """View execution reports."""
        self.client.get(
            "/api/budget/execution/reports/quarterly/",
            params={"quarter": random.choice(['Q1', 'Q2', 'Q3', 'Q4'])},
            name="/api/budget/execution/reports/quarterly/ [REPORT]"
        )

    @task(1)
    def get_balance_summary(self):
        """Get balance summary."""
        self.client.get(
            "/api/budget/execution/balance-summary/",
            name="/api/budget/execution/balance-summary/ [SUMMARY]"
        )


class AdminUser(HttpUser):
    """Simulates an admin user performing oversight tasks."""

    wait_time = between(2, 5)  # Admins work slower

    def on_start(self):
        """Login as admin."""
        self.client.post("/login/", data={
            "username": "admin",
            "password": "Admin123!",
        })

    @task(3)
    def view_system_reports(self):
        """View system-wide reports."""
        self.client.get(
            "/api/budget/reports/system-wide/",
            name="/api/budget/reports/system-wide/ [ADMIN]"
        )

    @task(2)
    def approve_budget(self):
        """Approve a submitted budget."""
        proposal_id = random.randint(1, 50)

        self.client.post(
            f"/api/budget/preparation/proposals/{proposal_id}/approve/",
            json={
                "total_approved_budget": str(random.randint(45, 90) * 1000000),
                "approval_notes": "Approved during load test"
            },
            name="/api/budget/preparation/proposals/[id]/approve/ [ADMIN]"
        )

    @task(1)
    def audit_log_view(self):
        """View audit logs."""
        self.client.get(
            "/api/admin/audit-logs/",
            name="/api/admin/audit-logs/ [ADMIN]"
        )


@events.test_start.add_listener
def on_test_start(environment, **kwargs):
    """Called when load test starts."""
    print("=" * 80)
    print("OBCMS Budget System Load Test Starting")
    print("=" * 80)
    print(f"Target: {environment.runner.target_user_count if hasattr(environment.runner, 'target_user_count') else 'N/A'} concurrent users")
    print("Performance targets:")
    print("  - Query time: < 50ms")
    print("  - Success rate: > 99%")
    print("  - No degradation under load")
    print("=" * 80)


@events.test_stop.add_listener
def on_test_stop(environment, **kwargs):
    """Called when load test stops - print summary."""
    stats = environment.stats
    print("\n" + "=" * 80)
    print("OBCMS Budget System Load Test Complete")
    print("=" * 80)
    print(f"Total requests: {stats.total.num_requests}")
    print(f"Failed requests: {stats.total.num_failures}")
    print(f"Success rate: {(1 - stats.total.fail_ratio) * 100:.2f}%")
    print(f"Average response time: {stats.total.avg_response_time:.2f}ms")
    print(f"95th percentile: {stats.total.get_response_time_percentile(0.95):.2f}ms")
    print(f"99th percentile: {stats.total.get_response_time_percentile(0.99):.2f}ms")
    print(f"Max response time: {stats.total.max_response_time:.2f}ms")
    print(f"RPS: {stats.total.total_rps:.2f}")
    print("=" * 80)

    # Check if performance targets met
    avg_response = stats.total.avg_response_time
    success_rate = (1 - stats.total.fail_ratio) * 100

    if avg_response > 50:
        print(f"⚠️  WARNING: Average response time ({avg_response:.2f}ms) exceeds target (50ms)")

    if success_rate < 99:
        print(f"⚠️  WARNING: Success rate ({success_rate:.2f}%) below target (99%)")

    if avg_response <= 50 and success_rate >= 99:
        print("✅ All performance targets met!")
    print("=" * 80)
