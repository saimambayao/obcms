# Generated by Django 4.2.24 on 2025-10-01 04:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('coordination', '0007_event_fiscal_year_event_is_quarterly_coordination_and_more'),
        ('communities', '0025_add_provincial_submission_tracking'),
        ('monitoring', '0007_monitoringentry_implementing_policies_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceOffering',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Service/Program name', max_length=255)),
                ('service_type', models.CharField(choices=[('financial', 'Financial Assistance'), ('training', 'Training & Capacity Building'), ('livelihood', 'Livelihood Program'), ('education', 'Educational Support'), ('health', 'Health Services'), ('infrastructure', 'Infrastructure Support'), ('legal', 'Legal Assistance'), ('social', 'Social Services'), ('technical', 'Technical Assistance'), ('other', 'Other Services')], help_text='Type of service', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of the service')),
                ('objectives', models.TextField(blank=True, help_text='Objectives and expected outcomes')),
                ('eligibility_level', models.CharField(choices=[('individual', 'Individual Beneficiaries'), ('household', 'Household Level'), ('community', 'Community/Barangay Level'), ('organization', 'Organization/Cooperative'), ('lgu', 'LGU Partnership')], help_text='Who can apply for this service', max_length=15)),
                ('eligibility_criteria', models.TextField(help_text='Detailed eligibility requirements')),
                ('required_documents', models.TextField(blank=True, help_text='List of required documents for application')),
                ('budget_allocated', models.DecimalField(blank=True, decimal_places=2, help_text='Total budget allocated for this service', max_digits=14, null=True)),
                ('budget_utilized', models.DecimalField(decimal_places=2, default=0, help_text='Amount already utilized', max_digits=14)),
                ('total_slots', models.PositiveIntegerField(blank=True, help_text='Total number of beneficiary slots (if applicable)', null=True)),
                ('slots_filled', models.PositiveIntegerField(default=0, help_text='Number of slots already filled')),
                ('application_start_date', models.DateField(blank=True, help_text='When applications open', null=True)),
                ('application_deadline', models.DateField(blank=True, help_text='Application deadline', null=True)),
                ('service_start_date', models.DateField(blank=True, help_text='When service delivery begins', null=True)),
                ('service_end_date', models.DateField(blank=True, help_text='Expected service completion date', null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active - Accepting Applications'), ('paused', 'Paused - Temporarily Closed'), ('closed', 'Closed - No Longer Available'), ('archived', 'Archived')], default='draft', help_text='Current status of this service offering', max_length=10)),
                ('application_process', models.TextField(blank=True, help_text='Step-by-step application process')),
                ('contact_information', models.TextField(blank=True, help_text='How to contact for inquiries')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(help_text='User who created this service offering', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_services', to=settings.AUTH_USER_MODEL)),
                ('focal_person', models.ForeignKey(blank=True, help_text='MAO focal person managing this service', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_services', to='coordination.maofocalperson')),
                ('linked_ppas', models.ManyToManyField(blank=True, help_text='PPAs funding this service', related_name='service_offerings', to='monitoring.monitoringentry')),
                ('offering_mao', models.ForeignKey(help_text='MAO offering this service', limit_choices_to={'organization_type': 'bmoa'}, on_delete=django.db.models.deletion.CASCADE, related_name='service_offerings', to='coordination.organization')),
            ],
            options={
                'verbose_name': 'Service Offering',
                'verbose_name_plural': 'Service Offerings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('applicant_name', models.CharField(blank=True, help_text='Applicant name (for individual/household applications)', max_length=255)),
                ('applicant_contact', models.CharField(blank=True, help_text='Contact information', max_length=100)),
                ('application_details', models.TextField(help_text='Detailed application narrative/justification')),
                ('requested_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount requested (if applicable)', max_digits=12, null=True)),
                ('beneficiary_count', models.PositiveIntegerField(blank=True, help_text='Number of beneficiaries (if applicable)', null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('additional_info_required', 'Additional Information Required'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('waitlisted', 'Waitlisted'), ('in_progress', 'Service Being Delivered'), ('completed', 'Service Completed'), ('cancelled', 'Cancelled')], default='draft', help_text='Current application status', max_length=30)),
                ('submission_date', models.DateTimeField(blank=True, help_text='When application was submitted', null=True)),
                ('review_date', models.DateTimeField(blank=True, help_text='When application was reviewed', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Review comments and notes')),
                ('approval_date', models.DateTimeField(blank=True, help_text='When application was approved', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection (if applicable)')),
                ('service_start_date', models.DateField(blank=True, help_text='When service delivery started', null=True)),
                ('service_completion_date', models.DateField(blank=True, help_text='When service was completed', null=True)),
                ('actual_amount_received', models.DecimalField(blank=True, decimal_places=2, help_text='Actual amount received/disbursed', max_digits=12, null=True)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, help_text='Satisfaction rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('feedback', models.TextField(blank=True, help_text='Applicant feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicant_community', models.ForeignKey(blank=True, help_text='OBC community applying (for community-level services)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_applications', to='communities.obccommunity')),
                ('applicant_user', models.ForeignKey(help_text='User who submitted the application', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_service_applications', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='MAO staff who reviewed', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(help_text='Service being applied for', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='services.serviceoffering')),
            ],
            options={
                'verbose_name': 'Service Application',
                'verbose_name_plural': 'Service Applications',
                'ordering': ['-submission_date', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='serviceoffering',
            index=models.Index(fields=['offering_mao', 'status'], name='services_se_offerin_4899ed_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceoffering',
            index=models.Index(fields=['service_type', 'status'], name='services_se_service_89718b_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceoffering',
            index=models.Index(fields=['application_deadline'], name='services_se_applica_76fddf_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceapplication',
            index=models.Index(fields=['service', 'status'], name='services_se_service_3df4cf_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceapplication',
            index=models.Index(fields=['applicant_community', 'status'], name='services_se_applica_be6c9c_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceapplication',
            index=models.Index(fields=['applicant_user', 'status'], name='services_se_applica_330b8a_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceapplication',
            index=models.Index(fields=['submission_date'], name='services_se_submiss_2f42b9_idx'),
        ),
    ]
