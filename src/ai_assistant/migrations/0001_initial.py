# Generated by Django 4.2.21 on 2025-05-29 18:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("policy_tracking", "0002_alter_policyrecommendation_category"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AIConversation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "conversation_type",
                    models.CharField(
                        choices=[
                            ("policy_chat", "Policy Chat"),
                            ("document_generation", "Document Generation"),
                            ("analysis", "Policy Analysis"),
                            ("evidence_review", "Evidence Review"),
                            ("cultural_guidance", "Cultural Guidance"),
                        ],
                        default="policy_chat",
                        help_text="Type of AI conversation",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Conversation title (auto-generated or user-defined)",
                        max_length=255,
                    ),
                ),
                (
                    "messages",
                    models.JSONField(
                        default=list,
                        help_text="Array of conversation messages with roles and content",
                    ),
                ),
                (
                    "context_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional context data for the conversation",
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        default="gemini-2.5-flash",
                        help_text="AI model used for this conversation",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this conversation is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "related_policy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Policy recommendation this conversation relates to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ai_conversations",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who initiated the conversation",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_conversations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="AIUsageMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.now)),
                ("conversations_started", models.PositiveIntegerField(default=0)),
                ("messages_sent", models.PositiveIntegerField(default=0)),
                ("insights_generated", models.PositiveIntegerField(default=0)),
                ("documents_created", models.PositiveIntegerField(default=0)),
                ("policy_analysis_used", models.PositiveIntegerField(default=0)),
                ("document_generation_used", models.PositiveIntegerField(default=0)),
                ("cultural_guidance_used", models.PositiveIntegerField(default=0)),
                ("evidence_review_used", models.PositiveIntegerField(default=0)),
                ("average_response_time", models.FloatField(blank=True, null=True)),
                ("total_tokens_used", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_usage_metrics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "indexes": [
                    models.Index(
                        fields=["date", "user"], name="ai_assistan_date_a8dea0_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="ai_assistan_created_79785d_idx"
                    ),
                ],
                "unique_together": {("user", "date")},
            },
        ),
        migrations.CreateModel(
            name="AIInsight",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the insight", max_length=255),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("policy_analysis", "Policy Analysis"),
                            ("impact_prediction", "Impact Prediction"),
                            ("stakeholder_analysis", "Stakeholder Analysis"),
                            ("cultural_considerations", "Cultural Considerations"),
                            ("implementation_guidance", "Implementation Guidance"),
                            ("evidence_synthesis", "Evidence Synthesis"),
                            ("risk_assessment", "Risk Assessment"),
                            (
                                "opportunity_identification",
                                "Opportunity Identification",
                            ),
                        ],
                        help_text="Type of insight generated",
                        max_length=30,
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Detailed content of the AI insight"),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Brief summary of the insight"
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        default="gemini-2.5-flash",
                        help_text="AI model used to generate this insight",
                        max_length=50,
                    ),
                ),
                (
                    "confidence_level",
                    models.CharField(
                        choices=[
                            ("high", "High Confidence"),
                            ("medium", "Medium Confidence"),
                            ("low", "Low Confidence"),
                            ("experimental", "Experimental"),
                        ],
                        default="medium",
                        help_text="Confidence level of the AI insight",
                        max_length=15,
                    ),
                ),
                (
                    "key_points",
                    models.JSONField(
                        default=list, help_text="Key points extracted from the insight"
                    ),
                ),
                (
                    "recommendations",
                    models.JSONField(
                        default=list,
                        help_text="Specific recommendations from the insight",
                    ),
                ),
                (
                    "cultural_considerations",
                    models.JSONField(
                        default=list,
                        help_text="Cultural considerations for Bangsamoro communities",
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this insight has been validated by human experts",
                    ),
                ),
                (
                    "validation_notes",
                    models.TextField(
                        blank=True, help_text="Notes from human validation"
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this insight has been viewed",
                    ),
                ),
                (
                    "usefulness_score",
                    models.FloatField(
                        blank=True,
                        help_text="User-rated usefulness score (0-5)",
                        null=True,
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        default=list,
                        help_text="Tags for categorizing and searching insights",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Conversation that generated this insight",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insights",
                        to="ai_assistant.aiconversation",
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        help_text="User who generated this insight",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="generated_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_policy",
                    models.ForeignKey(
                        help_text="Policy recommendation this insight relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_insights",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who validated this insight",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["related_policy", "insight_type"],
                        name="ai_assistan_related_52a921_idx",
                    ),
                    models.Index(
                        fields=["is_validated", "confidence_level"],
                        name="ai_assistan_is_vali_18559f_idx",
                    ),
                    models.Index(
                        fields=["created_at", "insight_type"],
                        name="ai_assistan_created_25584c_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AIGeneratedDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the generated document", max_length=255
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("policy_brief", "Policy Brief"),
                            ("executive_summary", "Executive Summary"),
                            ("implementation_plan", "Implementation Plan"),
                            ("impact_assessment", "Impact Assessment"),
                            ("stakeholder_report", "Stakeholder Report"),
                            ("cultural_analysis", "Cultural Analysis"),
                            ("evidence_report", "Evidence Report"),
                            ("recommendation_memo", "Recommendation Memo"),
                        ],
                        help_text="Type of document generated",
                        max_length=20,
                    ),
                ),
                ("content", models.TextField(help_text="Generated document content")),
                (
                    "prompt_used",
                    models.TextField(help_text="Prompt used to generate this document"),
                ),
                (
                    "model_used",
                    models.CharField(
                        default="gemini-2.5-flash",
                        help_text="AI model used to generate this document",
                        max_length=50,
                    ),
                ),
                (
                    "generation_parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Parameters used for document generation",
                    ),
                ),
                (
                    "sections",
                    models.JSONField(
                        default=list,
                        help_text="Document sections with titles and content",
                    ),
                ),
                (
                    "key_points",
                    models.JSONField(
                        default=list, help_text="Key points extracted from the document"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("review", "Under Review"),
                            ("approved", "Approved"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        help_text="Document status",
                        max_length=10,
                    ),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Review comments and feedback"
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF version",
                        null=True,
                        upload_to="ai_documents/pdf/%Y/%m/",
                    ),
                ),
                (
                    "word_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated Word document version",
                        null=True,
                        upload_to="ai_documents/word/%Y/%m/",
                    ),
                ),
                (
                    "download_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this document has been downloaded",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Conversation that generated this document",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_documents",
                        to="ai_assistant.aiconversation",
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        help_text="User who generated this document",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="generated_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_policy",
                    models.ForeignKey(
                        help_text="Policy recommendation this document relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_generated_documents",
                        to="policy_tracking.policyrecommendation",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who reviewed this document",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_ai_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["related_policy", "document_type"],
                        name="ai_assistan_related_ec4597_idx",
                    ),
                    models.Index(
                        fields=["status", "document_type"],
                        name="ai_assistan_status_d7ddd0_idx",
                    ),
                    models.Index(
                        fields=["created_at", "generated_by"],
                        name="ai_assistan_created_a4e6a1_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="aiconversation",
            index=models.Index(
                fields=["user", "conversation_type"],
                name="ai_assistan_user_id_b7e329_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiconversation",
            index=models.Index(
                fields=["related_policy", "is_active"],
                name="ai_assistan_related_a3dd24_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiconversation",
            index=models.Index(
                fields=["created_at", "user"], name="ai_assistan_created_db2bb4_idx"
            ),
        ),
    ]
