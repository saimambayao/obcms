# Generated by Django 5.2.7 on 2025-10-24 14:18

import common.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('conversation_type', models.CharField(choices=[('policy_chat', 'Policy Chat'), ('document_generation', 'Document Generation'), ('analysis', 'Policy Analysis'), ('evidence_review', 'Evidence Review'), ('cultural_guidance', 'Cultural Guidance')], default='policy_chat', help_text='Type of AI conversation', max_length=20)),
                ('title', models.CharField(blank=True, help_text='Conversation title (auto-generated or user-defined)', max_length=255)),
                ('messages', models.JSONField(default=list, help_text='Array of conversation messages with roles and content')),
                ('context_data', models.JSONField(default=dict, help_text='Additional context data for the conversation')),
                ('model_used', models.CharField(default='gemini-2.5-flash', help_text='AI model used for this conversation', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this conversation is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='AIGeneratedDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the generated document', max_length=255)),
                ('document_type', models.CharField(choices=[('policy_brief', 'Policy Brief'), ('executive_summary', 'Executive Summary'), ('implementation_plan', 'Implementation Plan'), ('impact_assessment', 'Impact Assessment'), ('stakeholder_report', 'Stakeholder Report'), ('cultural_analysis', 'Cultural Analysis'), ('evidence_report', 'Evidence Report'), ('recommendation_memo', 'Recommendation Memo')], help_text='Type of document generated', max_length=20)),
                ('content', models.TextField(help_text='Generated document content')),
                ('prompt_used', models.TextField(help_text='Prompt used to generate this document')),
                ('model_used', models.CharField(default='gemini-2.5-flash', help_text='AI model used to generate this document', max_length=50)),
                ('generation_parameters', models.JSONField(default=dict, help_text='Parameters used for document generation')),
                ('sections', models.JSONField(default=list, help_text='Document sections with titles and content')),
                ('key_points', models.JSONField(default=list, help_text='Key points extracted from the document')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('approved', 'Approved'), ('published', 'Published'), ('archived', 'Archived')], default='draft', help_text='Document status', max_length=10)),
                ('review_notes', models.TextField(blank=True, help_text='Review comments and feedback')),
                ('pdf_file', models.FileField(blank=True, help_text='Generated PDF version (max 10MB)', null=True, upload_to='ai_documents/pdf/%Y/%m/', validators=[common.validators.validate_document_file])),
                ('word_file', models.FileField(blank=True, help_text='Generated Word document version (max 10MB)', null=True, upload_to='ai_documents/word/%Y/%m/', validators=[common.validators.validate_document_file])),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Number of times this document has been downloaded')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the insight', max_length=255)),
                ('insight_type', models.CharField(choices=[('policy_analysis', 'Policy Analysis'), ('impact_prediction', 'Impact Prediction'), ('stakeholder_analysis', 'Stakeholder Analysis'), ('cultural_considerations', 'Cultural Considerations'), ('implementation_guidance', 'Implementation Guidance'), ('evidence_synthesis', 'Evidence Synthesis'), ('risk_assessment', 'Risk Assessment'), ('opportunity_identification', 'Opportunity Identification')], help_text='Type of insight generated', max_length=30)),
                ('content', models.TextField(help_text='Detailed content of the AI insight')),
                ('summary', models.TextField(blank=True, help_text='Brief summary of the insight')),
                ('model_used', models.CharField(default='gemini-2.5-flash', help_text='AI model used to generate this insight', max_length=50)),
                ('confidence_level', models.CharField(choices=[('high', 'High Confidence'), ('medium', 'Medium Confidence'), ('low', 'Low Confidence'), ('experimental', 'Experimental')], default='medium', help_text='Confidence level of the AI insight', max_length=15)),
                ('key_points', models.JSONField(default=list, help_text='Key points extracted from the insight')),
                ('recommendations', models.JSONField(default=list, help_text='Specific recommendations from the insight')),
                ('cultural_considerations', models.JSONField(default=list, help_text='Cultural considerations for Bangsamoro communities')),
                ('is_validated', models.BooleanField(default=False, help_text='Whether this insight has been validated by human experts')),
                ('validation_notes', models.TextField(blank=True, help_text='Notes from human validation')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times this insight has been viewed')),
                ('usefulness_score', models.FloatField(blank=True, help_text='User-rated usefulness score (0-5)', null=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for categorizing and searching insights')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIOperation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('operation_type', models.CharField(choices=[('chat', 'Chat/Conversation'), ('analysis', 'Policy Analysis'), ('document_generation', 'Document Generation'), ('evidence_review', 'Evidence Review'), ('cultural_guidance', 'Cultural Guidance'), ('needs_classification', 'Needs Classification'), ('other', 'Other')], help_text='Type of AI operation', max_length=50)),
                ('module', models.CharField(choices=[('general', 'General'), ('mana', 'Mapping & Needs Assessment'), ('coordination', 'Coordination'), ('communities', 'Communities'), ('policies', 'Policy Tracking'), ('project_central', 'Project Central')], default='general', help_text='OBCMS module where operation was performed', max_length=50)),
                ('prompt_hash', models.CharField(db_index=True, help_text='SHA256 hash of prompt (for cache key tracking)', max_length=64)),
                ('model_used', models.CharField(default='gemini-1.5-pro', help_text='AI model used for this operation', max_length=50)),
                ('tokens_used', models.IntegerField(default=0, help_text='Total tokens used (input + output)')),
                ('response_time', models.FloatField(help_text='Response time in seconds')),
                ('cost', models.DecimalField(decimal_places=6, help_text='Cost of operation in USD', max_digits=10)),
                ('success', models.BooleanField(default=True, help_text='Whether operation succeeded')),
                ('error', models.TextField(blank=True, help_text='Error message if operation failed')),
                ('error_category', models.CharField(blank=True, help_text='Error category (rate_limit, timeout, etc.)', max_length=50)),
                ('cached', models.BooleanField(default=False, help_text='Whether response was served from cache')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIUsageMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('conversations_started', models.PositiveIntegerField(default=0)),
                ('messages_sent', models.PositiveIntegerField(default=0)),
                ('insights_generated', models.PositiveIntegerField(default=0)),
                ('documents_created', models.PositiveIntegerField(default=0)),
                ('policy_analysis_used', models.PositiveIntegerField(default=0)),
                ('document_generation_used', models.PositiveIntegerField(default=0)),
                ('cultural_guidance_used', models.PositiveIntegerField(default=0)),
                ('evidence_review_used', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(blank=True, null=True)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DocumentEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(help_text='ID of the embedded object')),
                ('embedding_hash', models.CharField(help_text='MD5 hash of content (used to detect changes)', max_length=64)),
                ('model_used', models.CharField(default='sentence-transformers/all-MiniLM-L6-v2', help_text='Embedding model used', max_length=100)),
                ('dimension', models.PositiveIntegerField(default=384, help_text='Embedding vector dimension')),
                ('index_name', models.CharField(help_text="Name of the vector store index (e.g., 'communities', 'assessments')", max_length=50)),
                ('index_position', models.PositiveIntegerField(blank=True, help_text='Position in the FAISS index', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
    ]
