# Generated by Django 4.2.16 on 2025-09-27 15:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0008_staff_profile_and_development'),
        ('coordination', '0004_partnership_partnershipsignatory_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('monitoring', '0003_alter_monitoringentry_implementing_moa'),
    ]

    operations = [
        migrations.AddField(
            model_name='monitoringentry',
            name='appropriation_class',
            field=models.CharField(blank=True, choices=[('ps', 'Personnel Services'), ('mooe', 'Maintenance and Other Operating Expenses'), ('co', 'Capital Outlay')], help_text='Appropriation class (PS/MOOE/CO)', max_length=8),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='benefits_indigenous_peoples',
            field=models.BooleanField(default=False, help_text='Flag if initiative primarily benefits Indigenous Peoples communities'),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='budget_ceiling',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Ceiling allocated for budgeting scenarios', max_digits=14, null=True),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='compliance_ccet',
            field=models.BooleanField(default=False, help_text='Flag if expenditure is tagged under Climate Change Expenditure'),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='compliance_gad',
            field=models.BooleanField(default=False, help_text='Flag if expenditure is tagged under GAD'),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='fiscal_year',
            field=models.PositiveIntegerField(blank=True, help_text='Fiscal year the budget is intended for', null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='funding_source',
            field=models.CharField(blank=True, choices=[('gaa', 'General Appropriations Act'), ('block_grant', 'BARMM Block Grant'), ('lgu_counterpart', 'LGU Counterpart'), ('donor', 'Donor / Development Partner'), ('internal', 'OOBC / BARMM Internal'), ('others', 'Others')], help_text='Primary funding source', max_length=32),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='funding_source_other',
            field=models.CharField(blank=True, help_text='Specify funding source when tagged as Others', max_length=255),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='goal_alignment',
            field=models.JSONField(blank=True, default=list, help_text='List of strategic alignment tags (e.g., PDP, SDG, Moral Governance)'),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='moral_governance_pillar',
            field=models.CharField(blank=True, help_text='Key Moral Governance pillar supported', max_length=100),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='plan_reference',
            field=models.CharField(blank=True, help_text='Reference to PDP/PIP/AIP or local investment plan', max_length=255),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='plan_year',
            field=models.PositiveIntegerField(blank=True, help_text='Planning reference year (e.g., AIP year)', null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)]),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='program_code',
            field=models.CharField(blank=True, help_text='DBM/BARMM program or objective code', max_length=100),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='sector',
            field=models.CharField(blank=True, choices=[('economic', 'Economic Development'), ('social', 'Social Development'), ('infrastructure', 'Infrastructure'), ('environment', 'Environment & DRRM'), ('governance', 'Governance & Institution Building'), ('peace_security', 'Peace, Security & Reconciliation')], help_text='Primary sector alignment for the PPA', max_length=32),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='supports_peace_agenda',
            field=models.BooleanField(default=False, help_text='Flag if initiative supports peacebuilding or security agenda'),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='supports_sdg',
            field=models.BooleanField(default=False, help_text='Flag if initiative contributes to SDG tracking'),
        ),
        migrations.CreateModel(
            name='MonitoringEntryFunding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tranche_type', models.CharField(choices=[('allocation', 'Allocation'), ('obligation', 'Obligation'), ('disbursement', 'Disbursement'), ('adjustment', 'Adjustment')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14)),
                ('funding_source', models.CharField(blank=True, choices=[('gaa', 'General Appropriations Act'), ('block_grant', 'BARMM Block Grant'), ('lgu_counterpart', 'LGU Counterpart'), ('donor', 'Donor / Development Partner'), ('internal', 'OOBC / BARMM Internal'), ('others', 'Others')], help_text='Override funding source for this tranche', max_length=32)),
                ('funding_source_other', models.CharField(blank=True, help_text='Specify the funding source when using Others', max_length=255)),
                ('scheduled_date', models.DateField(blank=True, help_text='When the tranche is scheduled or recorded', null=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_funding_flows', to=settings.AUTH_USER_MODEL)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding_flows', to='monitoring.monitoringentry')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_funding_flows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Funding Flow',
                'verbose_name_plural': 'Funding Flows',
                'ordering': ['-scheduled_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringEntryWorkflowStage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stage', models.CharField(choices=[('budget_call', 'Budget Call'), ('formulation', 'Formulation'), ('technical_hearing', 'Technical Budget Hearing'), ('legislation', 'Budget Legislation'), ('execution', 'Program Execution'), ('accountability', 'Accountability')], max_length=40)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('blocked', 'Blocked')], default='not_started', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('completed_at', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_stages', to='monitoring.monitoringentry')),
                ('last_updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_budget_workflow_stages', to=settings.AUTH_USER_MODEL)),
                ('owner_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_workflow_stages', to='coordination.organization')),
                ('owner_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_workflow_stages', to='common.staffteam')),
            ],
            options={
                'verbose_name': 'Budget Workflow Stage',
                'verbose_name_plural': 'Budget Workflow Stages',
                'ordering': ['entry', 'stage'],
                'unique_together': {('entry', 'stage')},
            },
        ),
    ]
