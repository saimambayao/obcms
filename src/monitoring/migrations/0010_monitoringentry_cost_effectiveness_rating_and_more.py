# Generated by Django 4.2.24 on 2025-10-01 06:05

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('monitoring', '0009_add_scenario_planning_models'),
    ]

    operations = [
        migrations.AddField(
            model_name='monitoringentry',
            name='cost_effectiveness_rating',
            field=models.CharField(blank=True, choices=[('very_high', 'Very High'), ('high', 'High'), ('moderate', 'Moderate'), ('low', 'Low')], help_text='Qualitative cost-effectiveness rating', max_length=12),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='cost_per_beneficiary',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Computed or reported cost per beneficiary', max_digits=14, null=True),
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='outcome_framework',
            field=models.JSONField(blank=True, default=dict, help_text='Structured outcome framework including outputs, outcomes, and impacts'),
        ),
        migrations.AlterField(
            model_name='monitoringentry',
            name='outcome_indicators',
            field=models.TextField(blank=True, help_text='Legacy narrative field for outcome indicators (to be migrated to outcome framework)'),
        ),
        migrations.CreateModel(
            name='OutcomeIndicator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('education', 'Education'), ('health', 'Health'), ('livelihood', 'Livelihood'), ('governance', 'Governance'), ('infrastructure', 'Infrastructure'), ('social_protection', 'Social Protection'), ('environment', 'Environment'), ('peace_security', 'Peace & Security'), ('other', 'Other')], help_text='Domain classification for the indicator', max_length=64)),
                ('indicator_name', models.CharField(help_text='Name of the indicator', max_length=255)),
                ('definition', models.TextField(help_text='How the indicator is defined and interpreted')),
                ('measurement_method', models.TextField(blank=True, help_text='Methodology for measuring the indicator')),
                ('data_source', models.CharField(blank=True, help_text='Primary data source (e.g., survey, administrative records)', max_length=255)),
                ('frequency', models.CharField(blank=True, help_text='Collection frequency (e.g., quarterly, annual)', max_length=100)),
                ('unit_of_measure', models.CharField(blank=True, help_text='Unit of measure (e.g., percent, households)', max_length=50)),
                ('related_sdg', models.CharField(blank=True, help_text='Optional SDG reference', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the indicator is available for selection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'indicator_name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='monitoring__categor_0719a6_idx'), models.Index(fields=['indicator_name'], name='monitoring__indicat_41c3d1_idx')],
            },
        ),
        migrations.CreateModel(
            name='CeilingManagement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year for the ceiling', validators=[django.core.validators.MinValueValidator(2000)])),
                ('funding_source', models.CharField(help_text='Funding source (e.g., BARMM Block Grant, GAA)', max_length=50)),
                ('sector', models.CharField(blank=True, help_text='Optional sector breakdown', max_length=50)),
                ('ceiling_amount', models.DecimalField(decimal_places=2, help_text='Ceiling amount for the funding source', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total allocated amount against the ceiling', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('remaining_ceiling', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remaining amount available under the ceiling', max_digits=15)),
                ('threshold_warning', models.DecimalField(decimal_places=2, default=Decimal('0.90'), help_text='Trigger warning when allocation reaches this proportion of the ceiling', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.10'))])),
                ('is_exceeded', models.BooleanField(default=False, help_text='Flag when allocations exceed the ceiling')),
                ('notes', models.TextField(blank=True, help_text='Additional context or actions required')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ceiling Management Record',
                'verbose_name_plural': 'Ceiling Management Records',
                'ordering': ['-fiscal_year', 'funding_source', 'sector'],
                'indexes': [models.Index(fields=['fiscal_year', 'funding_source'], name='monitoring__fiscal__c73ca2_idx'), models.Index(fields=['funding_source', 'sector'], name='monitoring__funding_ae2f09_idx')],
            },
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='standard_outcome_indicators',
            field=models.ManyToManyField(blank=True, help_text='Standard outcome indicators referenced by this entry', related_name='monitoring_entries', to='monitoring.outcomeindicator'),
        ),
    ]
