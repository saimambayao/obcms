# Generated by Django 4.2.24 on 2025-10-01 05:22

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('mana', '0021_add_needvote_model'),
        ('coordination', '0007_event_fiscal_year_event_is_quarterly_coordination_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('policy_tracking', '0003_policyimplementationmilestone'),
        ('monitoring', '0007_monitoringentry_implementing_policies_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='StrategicGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text="Strategic goal title (e.g., 'Achieve 100% access to quality education for Bangsamoro communities')", max_length=500)),
                ('description', models.TextField(help_text='Detailed description of the strategic goal and its importance')),
                ('goal_statement', models.TextField(blank=True, help_text='SMART goal statement (Specific, Measurable, Achievable, Relevant, Time-bound)')),
                ('sector', models.CharField(choices=[('education', 'Education'), ('health', 'Health'), ('livelihood', 'Livelihood & Economic Development'), ('infrastructure', 'Infrastructure'), ('governance', 'Governance & Institutional Development'), ('social_protection', 'Social Protection'), ('cultural', 'Cultural Development'), ('peace', 'Peace & Security'), ('environment', 'Environment & Natural Resources')], help_text='Primary sector this goal addresses', max_length=100)),
                ('priority_level', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Priority level of this strategic goal', max_length=20)),
                ('aligns_with_rdp', models.BooleanField(default=False, help_text='Check if this goal aligns with the Regional Development Plan', verbose_name='Aligns with Regional Development Plan')),
                ('rdp_reference', models.CharField(blank=True, help_text="Reference to specific RDP section/chapter (e.g., 'Chapter 3.2: Education')", max_length=200, verbose_name='RDP Reference')),
                ('aligns_with_national_framework', models.BooleanField(default=False, help_text='Check if aligned with national development framework (e.g., Philippine Development Plan)')),
                ('start_year', models.PositiveIntegerField(help_text='Year this goal period starts', validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('target_year', models.PositiveIntegerField(help_text='Year this goal should be achieved', validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('target_outcome', models.TextField(blank=True, help_text='Specific, measurable outcome expected by target year')),
                ('baseline_value', models.DecimalField(blank=True, decimal_places=2, help_text='Baseline value/indicator at start (e.g., current enrollment rate: 65%)', max_digits=15, null=True)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value/indicator at completion (e.g., target enrollment rate: 100%)', max_digits=15, null=True)),
                ('unit_of_measure', models.CharField(blank=True, help_text="Unit of measurement (e.g., '% of population', 'number of beneficiaries')", max_length=100)),
                ('estimated_total_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated total budget needed to achieve this goal', max_digits=15, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('approved', 'Approved'), ('active', 'Active'), ('achieved', 'Achieved'), ('revised', 'Revised'), ('discontinued', 'Discontinued')], default='draft', help_text='Current status of the strategic goal', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Overall progress towards achieving this goal (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_strategic_goals', to=settings.AUTH_USER_MODEL)),
                ('lead_agency', models.ForeignKey(blank=True, help_text='Lead agency responsible for this strategic goal', limit_choices_to={'organization_type__in': ['oobc', 'bmoa']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_strategic_goals', to='coordination.organization')),
                ('linked_policies', models.ManyToManyField(blank=True, help_text='Policy recommendations that support this goal', related_name='supporting_strategic_goals', to='policy_tracking.policyrecommendation')),
                ('linked_ppas', models.ManyToManyField(blank=True, help_text='PPAs that contribute to achieving this goal', related_name='contributing_strategic_goals', to='monitoring.monitoringentry')),
                ('supporting_agencies', models.ManyToManyField(blank=True, help_text='Supporting agencies/partners', related_name='supported_strategic_goals', to='coordination.organization')),
            ],
            options={
                'verbose_name': 'Strategic Goal',
                'verbose_name_plural': 'Strategic Goals',
                'ordering': ['-priority_level', 'target_year', 'title'],
            },
        ),
        migrations.CreateModel(
            name='AnnualPlanningCycle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year for this planning cycle (e.g., 2026)', unique=True, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('cycle_name', models.CharField(help_text="Name of the planning cycle (e.g., 'FY 2026 Annual Investment Plan')", max_length=200)),
                ('planning_start_date', models.DateField(help_text='Date when planning activities begin')),
                ('planning_end_date', models.DateField(help_text='Deadline for completing planning')),
                ('budget_submission_date', models.DateField(help_text='Date when budget proposals are due')),
                ('budget_approval_date', models.DateField(blank=True, help_text='Date when budget was approved', null=True)),
                ('execution_start_date', models.DateField(help_text='Date when execution/implementation begins (usually Jan 1)')),
                ('execution_end_date', models.DateField(help_text='Date when fiscal year ends (usually Dec 31)')),
                ('total_budget_envelope', models.DecimalField(blank=True, decimal_places=2, help_text='Total budget available for this fiscal year', max_digits=15, null=True)),
                ('allocated_budget', models.DecimalField(decimal_places=2, default=0, help_text='Total budget allocated to PPAs', max_digits=15)),
                ('status', models.CharField(choices=[('planning', 'Planning Phase'), ('budget_preparation', 'Budget Preparation'), ('budget_approval', 'Budget Approval'), ('execution', 'Execution'), ('monitoring', 'Monitoring & Evaluation'), ('completed', 'Completed'), ('archived', 'Archived')], default='planning', help_text='Current phase of the planning cycle', max_length=30)),
                ('plan_document_url', models.URLField(blank=True, help_text='Link to the annual plan document')),
                ('budget_document_url', models.URLField(blank=True, help_text='Link to the approved budget document')),
                ('notes', models.TextField(blank=True, help_text='Additional notes, decisions, or context for this planning cycle')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_planning_cycles', to=settings.AUTH_USER_MODEL)),
                ('monitoring_entries', models.ManyToManyField(blank=True, help_text='PPAs included in this annual cycle', related_name='planning_cycles', to='monitoring.monitoringentry')),
                ('needs_addressed', models.ManyToManyField(blank=True, help_text='Community needs addressed in this cycle', related_name='planning_cycles', to='mana.Need')),
                ('strategic_goals', models.ManyToManyField(blank=True, help_text='Strategic goals addressed in this annual cycle', related_name='annual_cycles', to='monitoring.strategicgoal')),
            ],
            options={
                'verbose_name': 'Annual Planning Cycle',
                'verbose_name_plural': 'Annual Planning Cycles',
                'ordering': ['-fiscal_year'],
            },
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['sector', 'status'], name='monitoring__sector_593df4_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['target_year', 'status'], name='monitoring__target__c91f37_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['priority_level', 'status'], name='monitoring__priorit_1f85ee_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['start_year', 'target_year'], name='monitoring__start_y_3c6aef_idx'),
        ),
        migrations.AddIndex(
            model_name='annualplanningcycle',
            index=models.Index(fields=['-fiscal_year'], name='monitoring__fiscal__fe768a_idx'),
        ),
        migrations.AddIndex(
            model_name='annualplanningcycle',
            index=models.Index(fields=['status'], name='monitoring__status_afe816_idx'),
        ),
    ]
