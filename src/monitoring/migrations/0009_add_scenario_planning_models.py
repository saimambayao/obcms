# Generated by Django 4.2.24 on 2025-10-01 05:30

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('monitoring', '0008_add_strategic_planning_models'),
    ]

    operations = [
        migrations.CreateModel(
            name='BudgetScenario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Scenario name (e.g., 'FY 2026 Baseline', 'Increased Education Focus')", max_length=300)),
                ('description', models.TextField(blank=True, help_text="Description of this scenario's priorities and assumptions")),
                ('scenario_type', models.CharField(choices=[('baseline', 'Baseline (Current Budget)'), ('optimistic', 'Optimistic (Increased Budget)'), ('conservative', 'Conservative (Reduced Budget)'), ('needs_based', 'Needs-Based Allocation'), ('equity_focused', 'Equity-Focused'), ('custom', 'Custom Scenario')], default='custom', help_text='Type of scenario', max_length=30)),
                ('total_budget', models.DecimalField(decimal_places=2, help_text='Total budget available in this scenario', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('allocated_budget', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount allocated to PPAs (auto-calculated)', max_digits=15)),
                ('is_baseline', models.BooleanField(default=False, help_text='Mark as baseline scenario (only one baseline per fiscal year)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('implemented', 'Implemented'), ('archived', 'Archived')], default='draft', help_text='Current status of the scenario', max_length=20)),
                ('weight_needs_coverage', models.DecimalField(decimal_places=2, default=Decimal('0.40'), help_text='Weight for maximizing needs coverage (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_equity', models.DecimalField(decimal_places=2, default=Decimal('0.30'), help_text='Weight for geographic/demographic equity (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_strategic_alignment', models.DecimalField(decimal_places=2, default=Decimal('0.30'), help_text='Weight for strategic goal alignment (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('optimization_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall optimization score (higher is better)', max_digits=8, null=True)),
                ('estimated_beneficiaries', models.PositiveIntegerField(default=0, help_text='Estimated number of beneficiaries under this scenario')),
                ('estimated_needs_addressed', models.PositiveIntegerField(default=0, help_text='Number of community needs addressed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes, assumptions, or context')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scenarios', to=settings.AUTH_USER_MODEL)),
                ('planning_cycle', models.ForeignKey(blank=True, help_text='Associated annual planning cycle', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='monitoring.annualplanningcycle')),
            ],
            options={
                'verbose_name': 'Budget Scenario',
                'verbose_name_plural': 'Budget Scenarios',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScenarioAllocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('allocated_amount', models.DecimalField(decimal_places=2, help_text='Amount allocated to this PPA in this scenario', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('priority_rank', models.PositiveIntegerField(blank=True, help_text='Priority ranking within scenario (1=highest)', null=True)),
                ('status', models.CharField(choices=[('proposed', 'Proposed'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('pending_review', 'Pending Review')], default='proposed', help_text='Allocation status', max_length=20)),
                ('allocation_rationale', models.TextField(blank=True, help_text='Justification for this allocation amount')),
                ('cost_per_beneficiary', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per beneficiary (auto-calculated)', max_digits=15, null=True)),
                ('needs_coverage_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on number of needs addressed', max_digits=8, null=True)),
                ('equity_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on equity considerations', max_digits=8, null=True)),
                ('strategic_alignment_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on strategic goal alignment', max_digits=8, null=True)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, help_text='Weighted overall score', max_digits=8, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ppa', models.ForeignKey(help_text='PPA (Program/Project/Activity) to fund', on_delete=django.db.models.deletion.CASCADE, related_name='scenario_allocations', to='monitoring.monitoringentry')),
                ('scenario', models.ForeignKey(help_text='Budget scenario', on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='monitoring.budgetscenario')),
            ],
            options={
                'verbose_name': 'Scenario Allocation',
                'verbose_name_plural': 'Scenario Allocations',
                'ordering': ['scenario', 'priority_rank', '-allocated_amount'],
                'indexes': [models.Index(fields=['scenario', 'status'], name='monitoring__scenari_3c223a_idx'), models.Index(fields=['priority_rank'], name='monitoring__priorit_9c770b_idx'), models.Index(fields=['-overall_score'], name='monitoring__overall_9e27a5_idx')],
                'unique_together': {('scenario', 'ppa')},
            },
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['planning_cycle', 'status'], name='monitoring__plannin_b2372a_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['scenario_type'], name='monitoring__scenari_a16e8d_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['is_baseline'], name='monitoring__is_base_f1b0d1_idx'),
        ),
    ]
