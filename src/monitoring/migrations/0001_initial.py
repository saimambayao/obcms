# Generated by Django 5.2.7 on 2025-10-24 14:18

import common.validators
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0002_initial'),
        ('communities', '0002_initial'),
        ('coordination', '0002_initial'),
        ('mana', '0001_initial'),
        ('policy_tracking', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnualPlanningCycle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year for this planning cycle (e.g., 2026)', unique=True, validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('cycle_name', models.CharField(help_text="Name of the planning cycle (e.g., 'FY 2026 Annual Investment Plan')", max_length=200)),
                ('planning_start_date', models.DateField(help_text='Date when planning activities begin')),
                ('planning_end_date', models.DateField(help_text='Deadline for completing planning')),
                ('budget_submission_date', models.DateField(help_text='Date when budget proposals are due')),
                ('budget_approval_date', models.DateField(blank=True, help_text='Date when budget was approved', null=True)),
                ('execution_start_date', models.DateField(help_text='Date when execution/implementation begins (usually Jan 1)')),
                ('execution_end_date', models.DateField(help_text='Date when fiscal year ends (usually Dec 31)')),
                ('total_budget_envelope', models.DecimalField(blank=True, decimal_places=2, help_text='Total budget available for this fiscal year', max_digits=15, null=True)),
                ('allocated_budget', models.DecimalField(decimal_places=2, default=0, help_text='Total budget allocated to PPAs', max_digits=15)),
                ('status', models.CharField(choices=[('planning', 'Planning Phase'), ('budget_preparation', 'Budget Preparation'), ('budget_approval', 'Budget Approval'), ('execution', 'Execution'), ('monitoring', 'Monitoring & Evaluation'), ('completed', 'Completed'), ('archived', 'Archived')], default='planning', help_text='Current phase of the planning cycle', max_length=30)),
                ('plan_document_url', models.URLField(blank=True, help_text='Link to the annual plan document')),
                ('budget_document_url', models.URLField(blank=True, help_text='Link to the approved budget document')),
                ('notes', models.TextField(blank=True, help_text='Additional notes, decisions, or context for this planning cycle')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_planning_cycles', to=settings.AUTH_USER_MODEL)),
                ('needs_addressed', models.ManyToManyField(blank=True, help_text='Community needs addressed in this cycle', related_name='planning_cycles', to='mana.need')),
            ],
            options={
                'verbose_name': 'Annual Planning Cycle',
                'verbose_name_plural': 'Annual Planning Cycles',
                'ordering': ['-fiscal_year'],
            },
        ),
        migrations.CreateModel(
            name='BudgetScenario',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Scenario name (e.g., 'FY 2026 Baseline', 'Increased Education Focus')", max_length=300)),
                ('description', models.TextField(blank=True, help_text="Description of this scenario's priorities and assumptions")),
                ('scenario_type', models.CharField(choices=[('baseline', 'Baseline (Current Budget)'), ('optimistic', 'Optimistic (Increased Budget)'), ('conservative', 'Conservative (Reduced Budget)'), ('needs_based', 'Needs-Based Allocation'), ('equity_focused', 'Equity-Focused'), ('custom', 'Custom Scenario')], default='custom', help_text='Type of scenario', max_length=30)),
                ('total_budget', models.DecimalField(decimal_places=2, help_text='Total budget available in this scenario', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('allocated_budget', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount allocated to PPAs (auto-calculated)', max_digits=15)),
                ('is_baseline', models.BooleanField(default=False, help_text='Mark as baseline scenario (only one baseline per fiscal year)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('implemented', 'Implemented'), ('archived', 'Archived')], default='draft', help_text='Current status of the scenario', max_length=20)),
                ('weight_needs_coverage', models.DecimalField(decimal_places=2, default=Decimal('0.40'), help_text='Weight for maximizing needs coverage (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_equity', models.DecimalField(decimal_places=2, default=Decimal('0.30'), help_text='Weight for geographic/demographic equity (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('weight_strategic_alignment', models.DecimalField(decimal_places=2, default=Decimal('0.30'), help_text='Weight for strategic goal alignment (0.00-1.00)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('optimization_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall optimization score (higher is better)', max_digits=8, null=True)),
                ('estimated_beneficiaries', models.PositiveIntegerField(default=0, help_text='Estimated number of beneficiaries under this scenario')),
                ('estimated_needs_addressed', models.PositiveIntegerField(default=0, help_text='Number of community needs addressed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes, assumptions, or context')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scenarios', to=settings.AUTH_USER_MODEL)),
                ('planning_cycle', models.ForeignKey(blank=True, help_text='Associated annual planning cycle', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='monitoring.annualplanningcycle')),
            ],
            options={
                'verbose_name': 'Budget Scenario',
                'verbose_name_plural': 'Budget Scenarios',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CeilingManagement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fiscal_year', models.PositiveIntegerField(help_text='Fiscal year for the ceiling', validators=[django.core.validators.MinValueValidator(2000)])),
                ('funding_source', models.CharField(help_text='Funding source (e.g., BARMM Block Grant, GAA)', max_length=50)),
                ('sector', models.CharField(blank=True, help_text='Optional sector breakdown', max_length=50)),
                ('ceiling_amount', models.DecimalField(decimal_places=2, help_text='Ceiling amount for the funding source', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total allocated amount against the ceiling', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('remaining_ceiling', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remaining amount available under the ceiling', max_digits=15)),
                ('threshold_warning', models.DecimalField(decimal_places=2, default=Decimal('0.90'), help_text='Trigger warning when allocation reaches this proportion of the ceiling', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.10'))])),
                ('is_exceeded', models.BooleanField(default=False, help_text='Flag when allocations exceed the ceiling')),
                ('notes', models.TextField(blank=True, help_text='Additional context or actions required')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ceiling Management Record',
                'verbose_name_plural': 'Ceiling Management Records',
                'ordering': ['-fiscal_year', 'funding_source', 'sector'],
                'indexes': [models.Index(fields=['fiscal_year', 'funding_source'], name='monitoring__fiscal__c73ca2_idx'), models.Index(fields=['funding_source', 'sector'], name='monitoring__funding_ae2f09_idx')],
            },
        ),
        migrations.CreateModel(
            name='MonitoringEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Name of the project, activity, or request', max_length=255)),
                ('category', models.CharField(choices=[('moa_ppa', 'MOA Project / Program / Activity'), ('oobc_ppa', 'OOBC Project / Program / Activity'), ('obc_request', 'OBC Request or Proposal')], max_length=20)),
                ('summary', models.TextField(blank=True, help_text='Overview of objectives, beneficiaries, and scope')),
                ('request_objectives', models.JSONField(blank=True, default=list, help_text='List of objectives or purposes for the request/proposal')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='planning', help_text='Implementation status for PPAs', max_length=20)),
                ('request_status', models.CharField(blank=True, choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('clarification', 'For Clarification'), ('endorsed', 'Endorsed'), ('approved', 'Approved'), ('in_progress', 'In Implementation'), ('completed', 'Completed'), ('deferred', 'Deferred'), ('declined', 'Declined')], help_text='Lifecycle state applicable to community requests', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level for follow-ups and support', max_length=10)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Overall completion percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('request_source', models.CharField(blank=True, choices=[('community_user', 'Verified OBC User'), ('oobc_staff', 'OOBC Staff'), ('moa_focal', 'MOA Focal Person'), ('lgu_focal', 'LGU Focal Person'), ('nga_focal', 'NGA Focal Person')], help_text='Channel that lodged this request (community portal, OOBC staff, MOA/LGU/NGA focal)', max_length=32)),
                ('requester_name', models.CharField(blank=True, help_text='Full name of the requester or proponent', max_length=255)),
                ('requester_position', models.CharField(blank=True, help_text='Designation or role of the requester', max_length=255)),
                ('requester_affiliation', models.CharField(blank=True, help_text='Affiliated organization or community of the requester', max_length=255)),
                ('requester_contact_number', models.CharField(blank=True, help_text='Primary contact number for coordination', max_length=32)),
                ('requester_alternate_contact_number', models.CharField(blank=True, help_text='Alternate contact number distinct from the primary number', max_length=32)),
                ('requester_email', models.EmailField(blank=True, help_text='Email address of the requester', max_length=254)),
                ('oobc_unit', models.CharField(blank=True, help_text='OOBC unit or team responsible for follow-through', max_length=255)),
                ('plan_year', models.PositiveIntegerField(blank=True, help_text='Planning reference year (e.g., AIP year)', null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)])),
                ('fiscal_year', models.PositiveIntegerField(blank=True, help_text='Fiscal year the budget is intended for', null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2100)])),
                ('sector', models.CharField(blank=True, choices=[('economic', 'Economic Development'), ('social', 'Social Development'), ('infrastructure', 'Infrastructure'), ('environment', 'Environment & DRRM'), ('governance', 'Governance & Institution Building'), ('peace_security', 'Peace, Security & Reconciliation')], help_text='Primary sector alignment for the PPA', max_length=32)),
                ('appropriation_class', models.CharField(blank=True, choices=[('ps', 'Personnel Services'), ('mooe', 'Maintenance and Other Operating Expenses'), ('co', 'Capital Outlay')], help_text='Appropriation class (PS/MOOE/CO)', max_length=8)),
                ('funding_source', models.CharField(blank=True, choices=[('gaab_2025', 'General Appropriations Act of the Bangsamoro (GAAB) 2025'), ('supplemental_budget', 'Supplemental Budget (SB)'), ('sdf', 'Special Development Fund (SDF)'), ('tdif', 'Transitional Development Impact Fund (TDIF)'), ('allocation_for_mp', 'Allocation for MP'), ('national_program', 'National Program (from the National Government)'), ('local_program', 'Local Program (from the Local Government)'), ('oda', 'Official Development Assistance (ODA)'), ('other_sources', 'Other Funding Sources')], help_text='Primary funding source', max_length=32)),
                ('funding_source_other', models.CharField(blank=True, help_text='Specify funding source when tagged as Other Funding Sources', max_length=255)),
                ('program_code', models.CharField(blank=True, help_text='DBM/BARMM program or objective code', max_length=100)),
                ('plan_reference', models.CharField(blank=True, help_text='Reference to PDP/PIP/AIP or local investment plan', max_length=255)),
                ('goal_alignment', models.JSONField(blank=True, default=list, help_text='List of strategic alignment tags (e.g., PDP, SDG, Moral Governance)')),
                ('moral_governance_pillar', models.CharField(blank=True, help_text='Key Moral Governance pillar supported', max_length=100)),
                ('compliance_gad', models.BooleanField(default=False, help_text='Flag if expenditure is tagged under GAD')),
                ('compliance_ccet', models.BooleanField(default=False, help_text='Flag if expenditure is tagged under Climate Change Expenditure')),
                ('benefits_indigenous_peoples', models.BooleanField(default=False, help_text='Flag if initiative primarily benefits Indigenous Peoples communities')),
                ('supports_peace_agenda', models.BooleanField(default=False, help_text='Flag if initiative supports peacebuilding or security agenda')),
                ('supports_sdg', models.BooleanField(default=False, help_text='Flag if initiative contributes to SDG tracking')),
                ('budget_ceiling', models.DecimalField(blank=True, decimal_places=2, help_text='Ceiling allocated for budgeting scenarios', max_digits=14, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('target_end_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('next_milestone_date', models.DateField(blank=True, null=True)),
                ('milestone_dates', models.JSONField(blank=True, default=list, help_text='Structured milestone entries: [{date: 2025-10-15, title: Technical hearing, status: upcoming}]')),
                ('budget_allocation', models.DecimalField(blank=True, decimal_places=2, help_text='Budget allocation supporting the activity', max_digits=14, null=True)),
                ('budget_currency', models.CharField(default='PHP', help_text='Currency of the recorded budget', max_length=10)),
                ('budget_obc_allocation', models.DecimalField(blank=True, decimal_places=2, help_text='Portion of the budget allocated specifically for OBCs', max_digits=14, null=True)),
                ('total_slots', models.PositiveIntegerField(blank=True, help_text='Total number of beneficiary slots', null=True)),
                ('obc_slots', models.PositiveIntegerField(blank=True, help_text='Number of slots reserved for OBCs', null=True)),
                ('cost_per_beneficiary', models.DecimalField(blank=True, decimal_places=2, help_text='Computed or reported cost per beneficiary', max_digits=14, null=True)),
                ('cost_effectiveness_rating', models.CharField(blank=True, choices=[('very_high', 'Very High'), ('high', 'High'), ('moderate', 'Moderate'), ('low', 'Low')], help_text='Qualitative cost-effectiveness rating', max_length=12)),
                ('outcome_framework', models.JSONField(blank=True, default=dict, help_text='Structured outcome framework including outputs, outcomes, and impacts')),
                ('outcome_indicators', models.TextField(blank=True, help_text='Legacy narrative field for outcome indicators (to be migrated to outcome framework)')),
                ('accomplishments', models.TextField(blank=True, help_text='Documented accomplishments and outputs')),
                ('challenges', models.TextField(blank=True, help_text='Challenges, risks, and mitigation notes')),
                ('support_required', models.TextField(blank=True, help_text='Support requested from OOBC or partners')),
                ('follow_up_actions', models.TextField(blank=True, help_text='Immediate next steps and focal assignments')),
                ('beneficiary_organizations_total', models.PositiveIntegerField(blank=True, help_text='Total number of organizational beneficiaries', null=True)),
                ('beneficiary_individuals_total', models.PositiveIntegerField(blank=True, help_text='Total number of individual beneficiaries', null=True)),
                ('beneficiary_description', models.TextField(blank=True, help_text='Narrative description of the intended beneficiaries')),
                ('beneficiary_demographics', models.JSONField(blank=True, default=dict, help_text='Structured demographic disaggregation for beneficiaries')),
                ('obcs_benefited', models.TextField(blank=True, help_text='Narrative describing OBC groups that have benefited')),
                ('is_disaster_related', models.BooleanField(default=False, help_text='Flag if the request is tied to a disaster or emergency')),
                ('estimated_total_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated total amount required for the request or proposal', max_digits=14, null=True)),
                ('request_notes', models.TextField(blank=True, help_text='Additional notes or validation remarks for the request')),
                ('last_status_update', models.DateField(blank=True, help_text='Date of the most recent status update', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approval_status', models.CharField(choices=[('draft', 'Draft'), ('technical_review', 'Technical Review'), ('budget_review', 'Budget Review'), ('stakeholder_consultation', 'Stakeholder Consultation'), ('executive_approval', 'Executive Approval'), ('approved', 'Approved'), ('enacted', 'Enacted'), ('rejected', 'Rejected')], db_index=True, default='draft', help_text='Current status in the budget approval workflow', max_length=30)),
                ('approval_history', models.JSONField(blank=True, default=list, help_text='Complete history of approval stages with timestamps, reviewers, and comments')),
                ('approval_notes', models.TextField(blank=True, help_text='General notes about the approval process')),
                ('rejection_reason', models.TextField(blank=True, help_text="Reason for rejection (if approval_status is 'rejected')")),
                ('enable_workitem_tracking', models.BooleanField(default=False, help_text='Enable WorkItem-based execution tracking for this PPA')),
                ('budget_distribution_policy', models.CharField(blank=True, choices=[('equal', 'Equal'), ('weighted', 'Weighted'), ('manual', 'Manual')], help_text='Policy for distributing budget across child work items', max_length=20)),
                ('auto_sync_progress', models.BooleanField(default=True, help_text='Automatically sync progress from execution project')),
                ('auto_sync_status', models.BooleanField(default=True, help_text='Automatically sync status from execution project')),
                ('budget_approved_by', models.ForeignKey(blank=True, help_text='User who approved the budget allocation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_approved_ppas', to=settings.AUTH_USER_MODEL)),
                ('communities', models.ManyToManyField(blank=True, help_text='Targeted or benefiting OBC communities', related_name='monitoring_entries', to='communities.obccommunity')),
                ('coverage_barangay', models.ForeignKey(blank=True, help_text='Barangay covered by the PPA', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='common.barangay')),
                ('coverage_municipality', models.ForeignKey(blank=True, help_text='Municipality covered by the PPA', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='common.municipality')),
                ('coverage_province', models.ForeignKey(blank=True, help_text='Province covered by the PPA', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='common.province')),
                ('coverage_region', models.ForeignKey(blank=True, help_text='Region covered by the PPA', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='common.region')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_monitoring_entries', to=settings.AUTH_USER_MODEL)),
                ('execution_project', models.OneToOneField(blank=True, help_text='Root WorkItem project for execution tracking', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ppa_source', to='common.workitem')),
                ('executive_approved_by', models.ForeignKey(blank=True, help_text='Executive who gave final approval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='executive_approved_ppas', to=settings.AUTH_USER_MODEL)),
                ('implementing_moa', models.ForeignKey(blank=True, help_text='Primary MOA implementing the project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='implemented_monitoring_entries', to='coordination.organization', verbose_name='Implementing MOA')),
                ('implementing_policies', models.ManyToManyField(blank=True, help_text='Policy recommendations this PPA implements', related_name='implementing_ppas', to='policy_tracking.policyrecommendation')),
                ('lead_organization', models.ForeignKey(blank=True, help_text='Primary implementing or receiving organization', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='coordination.organization')),
                ('needs_addressed', models.ManyToManyField(blank=True, help_text='Community needs this PPA addresses', related_name='implementing_ppas', to='mana.need')),
                ('related_assessment', models.ForeignKey(blank=True, help_text='Linked OBC-MANA assessment, if any', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='mana.assessment')),
                ('related_policy', models.ForeignKey(blank=True, help_text='Policy recommendation informing this entry (DEPRECATED: use implementing_policies instead)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_entries', to='policy_tracking.policyrecommendation')),
                ('related_ppas', models.ManyToManyField(blank=True, help_text='Existing PPAs linked to this community request', limit_choices_to={'category__in': ['moa_ppa', 'oobc_ppa']}, related_name='linked_requests', to='monitoring.monitoringentry')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who completed technical review', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='technically_reviewed_ppas', to=settings.AUTH_USER_MODEL)),
                ('submitted_by_community', models.ForeignKey(blank=True, help_text='Origin OBC community for requests or proposals', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_monitoring_entries', to='communities.obccommunity')),
                ('submitted_to_organization', models.ForeignKey(blank=True, help_text='Receiving MOA or office for requests', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_monitoring_requests', to='coordination.organization')),
                ('supporting_organizations', models.ManyToManyField(blank=True, help_text='Supporting partner organizations', related_name='supporting_monitoring_entries', to='coordination.organization')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_monitoring_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Monitoring Entry',
                'verbose_name_plural': 'Monitoring Entries',
                'ordering': ['-updated_at', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='annualplanningcycle',
            name='monitoring_entries',
            field=models.ManyToManyField(blank=True, help_text='PPAs included in this annual cycle', related_name='planning_cycles', to='monitoring.monitoringentry'),
        ),
        migrations.CreateModel(
            name='MonitoringEntryFunding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tranche_type', models.CharField(choices=[('allocation', 'Allocation'), ('obligation', 'Obligation'), ('disbursement', 'Disbursement'), ('adjustment', 'Adjustment')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14)),
                ('funding_source', models.CharField(blank=True, choices=[('gaab_2025', 'General Appropriations Act of the Bangsamoro (GAAB) 2025'), ('supplemental_budget', 'Supplemental Budget (SB)'), ('sdf', 'Special Development Fund (SDF)'), ('tdif', 'Transitional Development Impact Fund (TDIF)'), ('allocation_for_mp', 'Allocation for MP'), ('national_program', 'National Program (from the National Government)'), ('local_program', 'Local Program (from the Local Government)'), ('oda', 'Official Development Assistance (ODA)'), ('other_sources', 'Other Funding Sources')], help_text='Override funding source for this tranche', max_length=32)),
                ('funding_source_other', models.CharField(blank=True, help_text='Specify the funding source when using Other Funding Sources', max_length=255)),
                ('scheduled_date', models.DateField(blank=True, help_text='When the tranche is scheduled or recorded', null=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_funding_flows', to=settings.AUTH_USER_MODEL)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding_flows', to='monitoring.monitoringentry')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_funding_flows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Funding Flow',
                'verbose_name_plural': 'Funding Flows',
                'ordering': ['-scheduled_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringEntryWorkflowStage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stage', models.CharField(choices=[('budget_call', 'Budget Call'), ('formulation', 'Formulation'), ('technical_hearing', 'Technical Budget Hearing'), ('legislation', 'Budget Legislation'), ('execution', 'Program Execution'), ('accountability', 'Accountability')], max_length=40)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('blocked', 'Blocked')], default='not_started', max_length=20)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('completed_at', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workflow_stages', to='monitoring.monitoringentry')),
                ('last_updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_budget_workflow_stages', to=settings.AUTH_USER_MODEL)),
                ('owner_organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_workflow_stages', to='coordination.organization')),
                ('owner_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='budget_workflow_stages', to='common.staffteam')),
            ],
            options={
                'verbose_name': 'Budget Workflow Stage',
                'verbose_name_plural': 'Budget Workflow Stages',
                'ordering': ['entry', 'stage'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringEntryWorkflowDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Document title or description', max_length=255)),
                ('document_type', models.CharField(choices=[('budget_call', 'Budget Call Memorandum'), ('submission', 'Submission Form'), ('hearing_notes', 'Technical Hearing Notes'), ('approval', 'Approval Letter'), ('aip_form', 'AIP Form / Template'), ('supporting', 'Supporting Document'), ('other', 'Other')], default='supporting', help_text='Type of document for categorization', max_length=32)),
                ('file', models.FileField(help_text='Upload document file (PDF, DOC, DOCX, XLS, XLSX - max 10MB)', upload_to='monitoring/workflow_documents/%Y/%m/', validators=[common.validators.validate_document_file])),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes (auto-populated)', null=True)),
                ('description', models.TextField(blank=True, help_text='Additional notes or context for this document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_workflow_documents', to=settings.AUTH_USER_MODEL)),
                ('workflow_stage', models.ForeignKey(help_text='Parent workflow stage', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='monitoring.monitoringentryworkflowstage')),
            ],
            options={
                'verbose_name': 'Workflow Document',
                'verbose_name_plural': 'Workflow Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringRequestAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('requester_id', 'Requester Identification'), ('request_letter', 'Letter of Request'), ('proposal', 'Written Proposal'), ('photo', 'Supporting Photo'), ('other', 'Other Document')], default='other', help_text='Classification of the supporting document', max_length=32)),
                ('file', models.FileField(help_text='Upload supporting document file (PDF, DOC, DOCX, XLS, XLSX - max 10MB)', upload_to='monitoring/request_documents/%Y/%m/', validators=[common.validators.validate_document_file])),
                ('description', models.CharField(blank=True, help_text='Additional notes for this file', max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('entry', models.ForeignKey(help_text='Parent OBC request entry', on_delete=django.db.models.deletion.CASCADE, related_name='request_attachments', to='monitoring.monitoringentry')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_request_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Request Attachment',
                'verbose_name_plural': 'Request Attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='MonitoringUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update_type', models.CharField(choices=[('status', 'Status Update'), ('progress', 'Progress Update'), ('milestone', 'Milestone'), ('communication', 'Communication'), ('note', 'General Note')], default='note', max_length=20)),
                ('status', models.CharField(blank=True, choices=[('planning', 'Planning'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], help_text='Updated PPA implementation status', max_length=20)),
                ('request_status', models.CharField(blank=True, choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('clarification', 'For Clarification'), ('endorsed', 'Endorsed'), ('approved', 'Approved'), ('in_progress', 'In Implementation'), ('completed', 'Completed'), ('deferred', 'Deferred'), ('declined', 'Declined')], help_text='Updated request lifecycle state', max_length=20)),
                ('progress', models.PositiveIntegerField(blank=True, help_text='New completion percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(help_text='Narrative update or decisions recorded')),
                ('next_steps', models.TextField(blank=True, help_text='Follow-up actions to undertake after this update')),
                ('follow_up_date', models.DateField(blank=True, help_text='Date for the next follow-up or coordination', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='monitoring_updates', to=settings.AUTH_USER_MODEL)),
                ('entry', models.ForeignKey(help_text='Parent monitoring entry', on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='monitoring.monitoringentry')),
            ],
            options={
                'verbose_name': 'Monitoring Update',
                'verbose_name_plural': 'Monitoring Updates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OutcomeIndicator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('education', 'Education'), ('health', 'Health'), ('livelihood', 'Livelihood'), ('governance', 'Governance'), ('infrastructure', 'Infrastructure'), ('social_protection', 'Social Protection'), ('environment', 'Environment'), ('peace_security', 'Peace & Security'), ('other', 'Other')], help_text='Domain classification for the indicator', max_length=64)),
                ('indicator_name', models.CharField(help_text='Name of the indicator', max_length=255)),
                ('definition', models.TextField(help_text='How the indicator is defined and interpreted')),
                ('measurement_method', models.TextField(blank=True, help_text='Methodology for measuring the indicator')),
                ('data_source', models.CharField(blank=True, help_text='Primary data source (e.g., survey, administrative records)', max_length=255)),
                ('frequency', models.CharField(blank=True, help_text='Collection frequency (e.g., quarterly, annual)', max_length=100)),
                ('unit_of_measure', models.CharField(blank=True, help_text='Unit of measure (e.g., percent, households)', max_length=50)),
                ('related_sdg', models.CharField(blank=True, help_text='Optional SDG reference', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the indicator is available for selection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'indicator_name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='monitoring__categor_0719a6_idx'), models.Index(fields=['indicator_name'], name='monitoring__indicat_41c3d1_idx')],
            },
        ),
        migrations.AddField(
            model_name='monitoringentry',
            name='standard_outcome_indicators',
            field=models.ManyToManyField(blank=True, help_text='Standard outcome indicators referenced by this entry', related_name='monitoring_entries', to='monitoring.outcomeindicator'),
        ),
        migrations.CreateModel(
            name='ScenarioAllocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('allocated_amount', models.DecimalField(decimal_places=2, help_text='Amount allocated to this PPA in this scenario', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('priority_rank', models.PositiveIntegerField(blank=True, help_text='Priority ranking within scenario (1=highest)', null=True)),
                ('status', models.CharField(choices=[('proposed', 'Proposed'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('pending_review', 'Pending Review')], default='proposed', help_text='Allocation status', max_length=20)),
                ('allocation_rationale', models.TextField(blank=True, help_text='Justification for this allocation amount')),
                ('cost_per_beneficiary', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per beneficiary (auto-calculated)', max_digits=15, null=True)),
                ('needs_coverage_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on number of needs addressed', max_digits=8, null=True)),
                ('equity_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on equity considerations', max_digits=8, null=True)),
                ('strategic_alignment_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score based on strategic goal alignment', max_digits=8, null=True)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, help_text='Weighted overall score', max_digits=8, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ppa', models.ForeignKey(help_text='PPA (Program/Project/Activity) to fund', on_delete=django.db.models.deletion.CASCADE, related_name='scenario_allocations', to='monitoring.monitoringentry')),
                ('scenario', models.ForeignKey(help_text='Budget scenario', on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='monitoring.budgetscenario')),
            ],
            options={
                'verbose_name': 'Scenario Allocation',
                'verbose_name_plural': 'Scenario Allocations',
                'ordering': ['scenario', 'priority_rank', '-allocated_amount'],
            },
        ),
        migrations.CreateModel(
            name='StrategicGoal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text="Strategic goal title (e.g., 'Achieve 100% access to quality education for Bangsamoro communities')", max_length=500)),
                ('description', models.TextField(help_text='Detailed description of the strategic goal and its importance')),
                ('goal_statement', models.TextField(blank=True, help_text='SMART goal statement (Specific, Measurable, Achievable, Relevant, Time-bound)')),
                ('sector', models.CharField(choices=[('education', 'Education'), ('health', 'Health'), ('livelihood', 'Livelihood & Economic Development'), ('infrastructure', 'Infrastructure'), ('governance', 'Governance & Institutional Development'), ('social_protection', 'Social Protection'), ('cultural', 'Cultural Development'), ('peace', 'Peace & Security'), ('environment', 'Environment & Natural Resources')], help_text='Primary sector this goal addresses', max_length=100)),
                ('priority_level', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Priority level of this strategic goal', max_length=20)),
                ('aligns_with_rdp', models.BooleanField(default=False, help_text='Check if this goal aligns with the Regional Development Plan', verbose_name='Aligns with Regional Development Plan')),
                ('rdp_reference', models.CharField(blank=True, help_text="Reference to specific RDP section/chapter (e.g., 'Chapter 3.2: Education')", max_length=200, verbose_name='RDP Reference')),
                ('aligns_with_national_framework', models.BooleanField(default=False, help_text='Check if aligned with national development framework (e.g., Philippine Development Plan)')),
                ('start_year', models.PositiveIntegerField(help_text='Year this goal period starts', validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('target_year', models.PositiveIntegerField(help_text='Year this goal should be achieved', validators=[django.core.validators.MinValueValidator(2020), django.core.validators.MaxValueValidator(2050)])),
                ('target_outcome', models.TextField(blank=True, help_text='Specific, measurable outcome expected by target year')),
                ('baseline_value', models.DecimalField(blank=True, decimal_places=2, help_text='Baseline value/indicator at start (e.g., current enrollment rate: 65%)', max_digits=15, null=True)),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value/indicator at completion (e.g., target enrollment rate: 100%)', max_digits=15, null=True)),
                ('unit_of_measure', models.CharField(blank=True, help_text="Unit of measurement (e.g., '% of population', 'number of beneficiaries')", max_length=100)),
                ('estimated_total_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated total budget needed to achieve this goal', max_digits=15, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('approved', 'Approved'), ('active', 'Active'), ('achieved', 'Achieved'), ('revised', 'Revised'), ('discontinued', 'Discontinued')], default='draft', help_text='Current status of the strategic goal', max_length=20)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='Overall progress towards achieving this goal (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_strategic_goals', to=settings.AUTH_USER_MODEL)),
                ('lead_agency', models.ForeignKey(blank=True, help_text='Lead agency responsible for this strategic goal', limit_choices_to={'organization_type__in': ['oobc', 'bmoa']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_strategic_goals', to='coordination.organization')),
                ('linked_policies', models.ManyToManyField(blank=True, help_text='Policy recommendations that support this goal', related_name='supporting_strategic_goals', to='policy_tracking.policyrecommendation')),
                ('linked_ppas', models.ManyToManyField(blank=True, help_text='PPAs that contribute to achieving this goal', related_name='contributing_strategic_goals', to='monitoring.monitoringentry')),
                ('supporting_agencies', models.ManyToManyField(blank=True, help_text='Supporting agencies/partners', related_name='supported_strategic_goals', to='coordination.organization')),
            ],
            options={
                'verbose_name': 'Strategic Goal',
                'verbose_name_plural': 'Strategic Goals',
                'ordering': ['-priority_level', 'target_year', 'title'],
            },
        ),
        migrations.AddField(
            model_name='annualplanningcycle',
            name='strategic_goals',
            field=models.ManyToManyField(blank=True, help_text='Strategic goals addressed in this annual cycle', related_name='annual_cycles', to='monitoring.strategicgoal'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['planning_cycle', 'status'], name='monitoring__plannin_b2372a_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['scenario_type'], name='monitoring__scenari_a16e8d_idx'),
        ),
        migrations.AddIndex(
            model_name='budgetscenario',
            index=models.Index(fields=['is_baseline'], name='monitoring__is_base_f1b0d1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='monitoringentryworkflowstage',
            unique_together={('entry', 'stage')},
        ),
        migrations.AddConstraint(
            model_name='monitoringentry',
            constraint=models.CheckConstraint(condition=models.Q(('progress__gte', 0), ('progress__lte', 100)), name='monitoring_entry_valid_progress'),
        ),
        migrations.AddConstraint(
            model_name='monitoringentry',
            constraint=models.CheckConstraint(condition=models.Q(('target_end_date__gte', models.F('start_date')), ('start_date__isnull', True), ('target_end_date__isnull', True), _connector='OR'), name='monitoring_entry_valid_date_range'),
        ),
        migrations.AddConstraint(
            model_name='monitoringentry',
            constraint=models.CheckConstraint(condition=models.Q(('budget_ceiling__isnull', True), ('budget_allocation__isnull', True), ('budget_allocation__lte', models.F('budget_ceiling')), _connector='OR'), name='monitoring_entry_budget_allocation_within_ceiling'),
        ),
        migrations.AddConstraint(
            model_name='monitoringentry',
            constraint=models.CheckConstraint(condition=models.Q(('budget_allocation__isnull', True), ('budget_obc_allocation__isnull', True), ('budget_obc_allocation__lte', models.F('budget_allocation')), _connector='OR'), name='monitoring_entry_obc_allocation_within_total'),
        ),
        migrations.AddConstraint(
            model_name='monitoringentry',
            constraint=models.CheckConstraint(condition=models.Q(('total_slots__isnull', True), ('obc_slots__isnull', True), ('obc_slots__lte', models.F('total_slots')), _connector='OR'), name='monitoring_entry_obc_slots_within_total'),
        ),
        migrations.AddIndex(
            model_name='scenarioallocation',
            index=models.Index(fields=['scenario', 'status'], name='monitoring__scenari_3c223a_idx'),
        ),
        migrations.AddIndex(
            model_name='scenarioallocation',
            index=models.Index(fields=['priority_rank'], name='monitoring__priorit_9c770b_idx'),
        ),
        migrations.AddIndex(
            model_name='scenarioallocation',
            index=models.Index(fields=['-overall_score'], name='monitoring__overall_9e27a5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scenarioallocation',
            unique_together={('scenario', 'ppa')},
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['sector', 'status'], name='monitoring__sector_593df4_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['target_year', 'status'], name='monitoring__target__c91f37_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['priority_level', 'status'], name='monitoring__priorit_1f85ee_idx'),
        ),
        migrations.AddIndex(
            model_name='strategicgoal',
            index=models.Index(fields=['start_year', 'target_year'], name='monitoring__start_y_3c6aef_idx'),
        ),
        migrations.AddIndex(
            model_name='annualplanningcycle',
            index=models.Index(fields=['-fiscal_year'], name='monitoring__fiscal__fe768a_idx'),
        ),
        migrations.AddIndex(
            model_name='annualplanningcycle',
            index=models.Index(fields=['status'], name='monitoring__status_afe816_idx'),
        ),
    ]
