"""Email utility functions for Monitoring & Evaluation automation."""

import logging
from decimal import Decimal
from typing import List, Optional

from django.conf import settings
from django.core.mail import send_mail
from django.template.loader import render_to_string

logger = logging.getLogger(__name__)


def send_budget_variance_alert(ppa, variance_amount: Decimal, variance_pct: float):
    """
    Send email alert for budget variance (actual spending exceeds allocation).

    Args:
        ppa: MonitoringEntry instance with budget variance
        variance_amount: Decimal - Amount over budget
        variance_pct: float - Percentage variance (e.g., 15.5 for 15.5%)

    Returns:
        bool: True if email sent successfully, False otherwise

    Example:
        >>> from monitoring.models import MonitoringEntry
        >>> ppa = MonitoringEntry.objects.get(id='some-uuid')
        >>> send_budget_variance_alert(ppa, Decimal('50000.00'), 12.5)
        True
    """
    # Determine recipients (MOA finance officers)
    recipients = []

    # Primary: MOA contact email
    if ppa.implementing_moa and hasattr(ppa.implementing_moa, 'contact_email'):
        if ppa.implementing_moa.contact_email:
            recipients.append(ppa.implementing_moa.contact_email)

    # Secondary: Lead organization contact
    if ppa.lead_organization and hasattr(ppa.lead_organization, 'contact_email'):
        if ppa.lead_organization.contact_email:
            recipients.append(ppa.lead_organization.contact_email)

    # Fallback: System administrators
    if not recipients:
        recipients = settings.SECURITY_TEAM_EMAILS or ['admin@oobc.gov.ph']

    # Filter unique valid emails
    recipients = list(set(email for email in recipients if email))

    if not recipients:
        logger.warning(
            f"[BUDGET VARIANCE] No recipients for PPA {ppa.id}: {ppa.title}"
        )
        return False

    # Determine severity
    if variance_pct > 20:
        severity = "CRITICAL"
        urgency = "critical"
    elif variance_pct > 10:
        severity = "HIGH"
        urgency = "high"
    else:
        severity = "MEDIUM"
        urgency = "medium"

    subject = f"[{severity}] Budget Variance Alert: {ppa.title}"

    # Construct email message
    email_message = f"""
BUDGET VARIANCE ALERT

Severity: {severity}
PPA: {ppa.title}
Fiscal Year: {ppa.fiscal_year}
MOA: {ppa.implementing_moa.name if ppa.implementing_moa else 'N/A'}

BUDGET DETAILS:
- Allocated Budget: PHP {ppa.budget_allocation:,.2f}
- Total Actual Spending: PHP {ppa.total_actual_disbursed():,.2f}
- Variance Amount: PHP {variance_amount:,.2f}
- Variance Percentage: {variance_pct:.1f}%

STATUS:
- Current Status: {ppa.get_status_display()}
- Progress: {ppa.progress}%
- Approval Status: {ppa.get_approval_status_display()}

RECOMMENDED ACTIONS:
1. Review actual disbursements and reconcile with budget allocation
2. Identify unauthorized or excessive spending
3. Request budget reallocation if justified
4. Update MonitoringEntry with corrected figures
5. Escalate to MFBM if variance exceeds 20%

DETAILS:
View PPA: {settings.ALLOWED_HOSTS[0] if settings.ALLOWED_HOSTS else 'localhost'}/monitoring/{ppa.id}/

This is an automated alert generated by the OOBC Management System.

---
Office for Other Bangsamoro Communities
Planning & Budgeting System
"""

    try:
        send_mail(
            subject=subject,
            message=email_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=recipients,
            fail_silently=False,
        )
        logger.info(
            f"[BUDGET VARIANCE] Alert sent to {', '.join(recipients)}: "
            f"{ppa.title} ({variance_pct:.1f}% over budget)"
        )
        return True
    except Exception as e:
        logger.error(
            f"[BUDGET VARIANCE] Failed to send email for PPA {ppa.id}: {e}",
            exc_info=True
        )
        return False


def send_approval_deadline_reminder(ppa, days_pending: int):
    """
    Send email reminder for PPA pending approval beyond deadline.

    Args:
        ppa: MonitoringEntry instance pending approval
        days_pending: int - Number of days PPA has been pending approval

    Returns:
        bool: True if email sent successfully, False otherwise

    Example:
        >>> from monitoring.models import MonitoringEntry
        >>> ppa = MonitoringEntry.objects.get(id='some-uuid')
        >>> send_approval_deadline_reminder(ppa, 10)
        True
    """
    # Determine recipients (MFBM analysts)
    recipients = []

    # Primary: MFBM analysts email (configure via settings)
    mfbm_emails = getattr(settings, 'MFBM_ANALYST_EMAILS', [])
    recipients.extend(mfbm_emails)

    # Secondary: Submitted to organization contact
    if ppa.submitted_to_organization and hasattr(ppa.submitted_to_organization, 'contact_email'):
        if ppa.submitted_to_organization.contact_email:
            recipients.append(ppa.submitted_to_organization.contact_email)

    # Tertiary: Reviewed by user email
    if ppa.reviewed_by and ppa.reviewed_by.email:
        recipients.append(ppa.reviewed_by.email)

    # Fallback: System administrators
    if not recipients:
        recipients = settings.SECURITY_TEAM_EMAILS or ['admin@oobc.gov.ph']

    # Filter unique valid emails
    recipients = list(set(email for email in recipients if email))

    if not recipients:
        logger.warning(
            f"[APPROVAL REMINDER] No recipients for PPA {ppa.id}: {ppa.title}"
        )
        return False

    # Determine severity
    if days_pending > 14:
        severity = "CRITICAL"
        urgency = "critical"
    elif days_pending > 7:
        severity = "HIGH"
        urgency = "high"
    else:
        severity = "MEDIUM"
        urgency = "medium"

    subject = f"[{severity}] Approval Overdue: {ppa.title}"

    # Construct email message
    email_message = f"""
APPROVAL DEADLINE REMINDER

Severity: {severity}
PPA: {ppa.title}
Days Pending: {days_pending} days
Fiscal Year: {ppa.fiscal_year}
MOA: {ppa.implementing_moa.name if ppa.implementing_moa else 'N/A'}

APPROVAL STATUS:
- Current Status: {ppa.get_approval_status_display()}
- Budget Allocation: PHP {ppa.budget_allocation:,.2f}
- Priority: {ppa.get_priority_display()}
- Sector: {ppa.get_sector_display()}

SUBMITTED BY:
- Community: {ppa.submitted_by_community.name if ppa.submitted_by_community else 'N/A'}
- Organization: {ppa.lead_organization.name if ppa.lead_organization else 'N/A'}

PENDING SINCE: {days_pending} days ago

REQUIRED ACTIONS:
1. Review PPA documentation and budget justification
2. Conduct technical review (if not completed)
3. Forward to Budget Review Committee (if technical review passed)
4. Schedule Executive Approval (if budget review passed)
5. Update approval status in system
6. Notify submitting organization of decision

APPROVAL WORKFLOW STAGES:
- Technical Review: {'✓' if ppa.approval_status in ['budget_review', 'executive_approval', 'approved'] else 'Pending'}
- Budget Review: {'✓' if ppa.approval_status in ['executive_approval', 'approved'] else 'Pending'}
- Executive Approval: {'✓' if ppa.approval_status == 'approved' else 'Pending'}

DETAILS:
View PPA: {settings.ALLOWED_HOSTS[0] if settings.ALLOWED_HOSTS else 'localhost'}/monitoring/{ppa.id}/

This is an automated reminder generated by the OOBC Management System.

---
Office for Other Bangsamoro Communities
Planning & Budgeting System
"""

    try:
        send_mail(
            subject=subject,
            message=email_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=recipients,
            fail_silently=False,
        )
        logger.info(
            f"[APPROVAL REMINDER] Sent to {', '.join(recipients)}: "
            f"{ppa.title} ({days_pending} days pending)"
        )
        return True
    except Exception as e:
        logger.error(
            f"[APPROVAL REMINDER] Failed to send email for PPA {ppa.id}: {e}",
            exc_info=True
        )
        return False


def send_progress_sync_notification(ppa, old_progress: int, new_progress: int):
    """
    Send notification when PPA progress is auto-synced from WorkItem.

    Args:
        ppa: MonitoringEntry instance
        old_progress: int - Previous progress percentage
        new_progress: int - Updated progress percentage

    Returns:
        bool: True if email sent successfully, False otherwise
    """
    # Only send if significant change (>5% difference)
    if abs(new_progress - old_progress) < 5:
        return False

    recipients = []

    # Primary: PPA creator
    if ppa.created_by and ppa.created_by.email:
        recipients.append(ppa.created_by.email)

    # Secondary: MOA contact
    if ppa.implementing_moa and hasattr(ppa.implementing_moa, 'contact_email'):
        if ppa.implementing_moa.contact_email:
            recipients.append(ppa.implementing_moa.contact_email)

    # Filter unique valid emails
    recipients = list(set(email for email in recipients if email))

    if not recipients:
        return False

    subject = f"Progress Updated: {ppa.title}"

    email_message = f"""
AUTOMATED PROGRESS UPDATE

PPA: {ppa.title}
Fiscal Year: {ppa.fiscal_year}

PROGRESS CHANGE:
- Previous Progress: {old_progress}%
- Updated Progress: {new_progress}%
- Change: {'+' if new_progress > old_progress else ''}{new_progress - old_progress}%

This progress update was automatically calculated from completed WorkItem tasks
linked to this PPA. The system synced progress at {ppa.updated_at.strftime('%Y-%m-%d %H:%M:%S')}.

STATUS:
- Current Status: {ppa.get_status_display()}
- Approval Status: {ppa.get_approval_status_display()}

DETAILS:
View PPA: {settings.ALLOWED_HOSTS[0] if settings.ALLOWED_HOSTS else 'localhost'}/monitoring/{ppa.id}/

This is an automated notification generated by the OOBC Management System.

---
Office for Other Bangsamoro Communities
Planning & Budgeting System
"""

    try:
        send_mail(
            subject=subject,
            message=email_message,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=recipients,
            fail_silently=False,
        )
        logger.info(
            f"[PROGRESS SYNC] Notification sent: {ppa.title} "
            f"({old_progress}% → {new_progress}%)"
        )
        return True
    except Exception as e:
        logger.error(
            f"[PROGRESS SYNC] Failed to send notification for PPA {ppa.id}: {e}",
            exc_info=True
        )
        return False
