# Generated by Django 5.2.7 on 2025-10-05 13:15

import django.db.models.deletion
from django.db import connection, migrations, models


def recreate_table_with_nullable_fk(apps, schema_editor):
    """Recreate the table with nullable community_id and ON DELETE SET NULL."""
    if schema_editor.connection.vendor != "sqlite":
        # For non-SQLite databases, use standard AlterField
        return

    with connection.cursor() as cursor:
        cursor.execute("PRAGMA foreign_keys=ON;")

        # Create new table with correct schema
        cursor.execute("""
            CREATE TABLE "municipal_profiles_obccommunityhistory_new" (
                "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
                "snapshot" text NOT NULL CHECK ((JSON_VALID("snapshot") OR "snapshot" IS NULL)),
                "source" varchar(20) NOT NULL,
                "note" varchar(255) NOT NULL,
                "created_at" datetime NOT NULL,
                "updated_at" datetime NOT NULL,
                "changed_by_id" bigint NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED,
                "community_id" bigint NULL REFERENCES "communities_obc_community" ("id") ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED
            )
        """)

        # Copy data
        cursor.execute("""
            INSERT INTO "municipal_profiles_obccommunityhistory_new"
                SELECT id, snapshot, source, note, created_at, updated_at, changed_by_id, community_id
                FROM "municipal_profiles_obccommunityhistory"
        """)

        # Drop old table
        cursor.execute('DROP TABLE "municipal_profiles_obccommunityhistory"')

        # Rename new table
        cursor.execute("""
            ALTER TABLE "municipal_profiles_obccommunityhistory_new"
                RENAME TO "municipal_profiles_obccommunityhistory"
        """)

        # Recreate indexes
        cursor.execute("""
            CREATE INDEX "municipal_profiles_obccommunityhistory_changed_by_id_194107a7"
                ON "municipal_profiles_obccommunityhistory" ("changed_by_id")
        """)

        cursor.execute("""
            CREATE INDEX "municipal_profiles_obccommunityhistory_community_id_dcaebbfc"
                ON "municipal_profiles_obccommunityhistory" ("community_id")
        """)

        cursor.execute("PRAGMA foreign_keys=ON;")


def revert_table(apps, schema_editor):
    """Revert to non-nullable community_id and ON DELETE CASCADE."""
    if schema_editor.connection.vendor != "sqlite":
        return

    with connection.cursor() as cursor:
        cursor.execute("PRAGMA foreign_keys=ON;")

        cursor.execute("""
            CREATE TABLE "municipal_profiles_obccommunityhistory_new" (
                "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
                "snapshot" text NOT NULL CHECK ((JSON_VALID("snapshot") OR "snapshot" IS NULL)),
                "source" varchar(20) NOT NULL,
                "note" varchar(255) NOT NULL,
                "created_at" datetime NOT NULL,
                "updated_at" datetime NOT NULL,
                "changed_by_id" bigint NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED,
                "community_id" bigint NOT NULL REFERENCES "communities_obc_community" ("id") DEFERRABLE INITIALLY DEFERRED
            )
        """)

        cursor.execute("""
            INSERT INTO "municipal_profiles_obccommunityhistory_new"
                SELECT id, snapshot, source, note, created_at, updated_at, changed_by_id, community_id
                FROM "municipal_profiles_obccommunityhistory"
                WHERE community_id IS NOT NULL
        """)

        cursor.execute('DROP TABLE "municipal_profiles_obccommunityhistory"')

        cursor.execute("""
            ALTER TABLE "municipal_profiles_obccommunityhistory_new"
                RENAME TO "municipal_profiles_obccommunityhistory"
        """)

        cursor.execute("""
            CREATE INDEX "municipal_profiles_obccommunityhistory_changed_by_id_194107a7"
                ON "municipal_profiles_obccommunityhistory" ("changed_by_id")
        """)

        cursor.execute("""
            CREATE INDEX "municipal_profiles_obccommunityhistory_community_id_dcaebbfc"
                ON "municipal_profiles_obccommunityhistory" ("community_id")
        """)

        cursor.execute("PRAGMA foreign_keys=ON;")


class Migration(migrations.Migration):

    dependencies = [
        ("communities", "0028_clear_municipal_estimated_population"),
        ("municipal_profiles", "0002_municipalobcprofile_last_reported_by_and_more"),
    ]

    operations = [
        # For SQLite, we need to use SeparateDatabaseAndState to prevent Django
        # from overwriting our ON DELETE SET NULL constraint
        migrations.SeparateDatabaseAndState(
            state_operations=[
                # Update Django's model state to reflect the new schema
                migrations.AlterField(
                    model_name="obccommunityhistory",
                    name="community",
                    field=models.ForeignKey(
                        blank=True,
                        help_text="OBC Community that this history entry references (preserved even if community is deleted).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="history_entries",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            database_operations=[
                # Use RunPython to execute the table recreation with ON DELETE SET NULL
                migrations.RunPython(
                    code=recreate_table_with_nullable_fk,
                    reverse_code=revert_table,
                ),
            ],
        ),
    ]
