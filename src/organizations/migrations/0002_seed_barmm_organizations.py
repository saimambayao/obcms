# Generated by Django for BMMS Phase 1: Seed 45 BARMM MOAs

from django.db import migrations


def seed_organizations(apps, schema_editor):
    """
    Seed all 45 BARMM Ministries, Offices, and Agencies (MOAs).

    Note: OOBC is created first for consistency with legacy systems,
    but ID is not guaranteed to be 1 on non-empty databases.
    """
    Organization = apps.get_model('organizations', 'Organization')

    # Create OOBC first
    oobc, created = Organization.objects.get_or_create(
        code='OOBC',
        defaults={
            'name': 'Office for Other Bangsamoro Communities',
            'org_type': 'office',
            'enable_mana': True,
            'enable_planning': True,
            'enable_budgeting': True,
            'enable_me': True,
            'enable_coordination': True,
            'enable_policies': True,
            'is_active': True,
            'is_pilot': False,  # OOBC is not a pilot, it's the legacy system
        }
    )
    print(f"OOBC {'created' if created else 'already exists'} with ID={oobc.id}")

    # MINISTRIES (16 total)
    ministries = [
        {
            'code': 'MAFAR',
            'name': 'Ministry of Agriculture, Fisheries and Agrarian Reform',
            'is_pilot': True  # Pilot MOA
        },
        {
            'code': 'MBHTE',
            'name': 'Ministry of Basic, Higher and Technical Education',
            'is_pilot': False
        },
        {
            'code': 'MENRE',
            'name': 'Ministry of Environment, Natural Resources and Energy',
            'is_pilot': False
        },
        {
            'code': 'MFBM',
            'name': 'Ministry of Finance, Budget and Management',
            'is_pilot': False
        },
        {
            'code': 'MOH',
            'name': 'Ministry of Health',
            'is_pilot': True  # Pilot MOA
        },
        {
            'code': 'MHSD',
            'name': 'Ministry of Human Settlements and Development',
            'is_pilot': False
        },
        {
            'code': 'MIPA',
            'name': 'Ministry of Indigenous Peoples Affairs',
            'is_pilot': False
        },
        {
            'code': 'MILG',
            'name': 'Ministry of Interior and Local Government',
            'is_pilot': False
        },
        {
            'code': 'MOLE',
            'name': 'Ministry of Labor and Employment',
            'is_pilot': True  # Pilot MOA
        },
        {
            'code': 'MPWH',
            'name': 'Ministry of Public Works and Highways',
            'is_pilot': False
        },
        {
            'code': 'MSSD',
            'name': 'Ministry of Social Services and Development',
            'is_pilot': False
        },
        {
            'code': 'MTI',
            'name': 'Ministry of Trade, Investments and Tourism',
            'is_pilot': False
        },
        {
            'code': 'MTIT',
            'name': 'Ministry of Transportation and Information Technology',
            'is_pilot': False
        },
        {
            'code': 'MWDWA',
            'name': 'Ministry of Women, Development and Welfare Affairs',
            'is_pilot': False
        },
        {
            'code': 'MYNDA',
            'name': 'Ministry of Youth and Nonprofit Development Affairs',
            'is_pilot': False
        },
        {
            'code': 'MPOS',
            'name': 'Ministry of Public Order and Safety',
            'is_pilot': False
        },
    ]

    print(f"Creating {len(ministries)} Ministries...")
    for ministry_data in ministries:
        Organization.objects.create(
            code=ministry_data['code'],
            name=ministry_data['name'],
            org_type='ministry',
            is_pilot=ministry_data['is_pilot'],
            is_active=True,
        )

    # OFFICES (11 total: OOBC + 10 additional offices below)
    offices = [
        {
            'code': 'OCM',
            'name': 'Office of the Chief Minister',
        },
        {
            'code': 'OMP',
            'name': 'Office of the Majority Floor Leader (Parliament)',
        },
        {
            'code': 'OPARL',
            'name': 'Office of the Bangsamoro Parliament',
        },
        {
            'code': 'OPMDA',
            'name': 'Office of the Prime Minister on Disasters and Assistance',
        },
        {
            'code': 'OSM',
            'name': 'Office of the Senior Minister',
        },
        {
            'code': 'OTAF',
            'name': 'Office of Technical Assistance and Facilitation',
        },
        {
            'code': 'OADP',
            'name': 'Office for Ancestral Domain Programs',
        },
        {
            'code': 'OBCE',
            'name': 'Office of Business and Community Empowerment',
        },
        {
            'code': 'OCRE',
            'name': 'Office of Cultural and Religious Endowments',
        },
        {
            'code': 'OMLA',
            'name': 'Office of Muslim Legal Affairs',
        },
    ]

    print(f"Creating {len(offices)} Offices (excluding OOBC)...")
    for office_data in offices:
        Organization.objects.create(
            code=office_data['code'],
            name=office_data['name'],
            org_type='office',
            is_pilot=False,
            is_active=True,
        )

    # AGENCIES (8 total)
    agencies = [
        {
            'code': 'BAI',
            'name': 'Bangsamoro Audit Institution',
        },
        {
            'code': 'BEDC',
            'name': 'Bangsamoro Economic Development Council',
        },
        {
            'code': 'BTA',
            'name': 'Bangsamoro Transition Authority',
        },
        {
            'code': 'BSWM',
            'name': 'Bangsamoro Statistics and Water Management',
        },
        {
            'code': 'CAB',
            'name': 'Commission on Appointments (Bangsamoro)',
        },
        {
            'code': 'CSC-BARMM',
            'name': 'Civil Service Commission',
        },
        {
            'code': 'RLEA',
            'name': 'Regional Law Enforcement Agency',
        },
        {
            'code': 'TESDA-BARMM',
            'name': 'Technical Education and Skills Development Authority',
        },
    ]

    print(f"Creating {len(agencies)} Agencies...")
    for agency_data in agencies:
        Organization.objects.create(
            code=agency_data['code'],
            name=agency_data['name'],
            org_type='agency',
            is_pilot=False,
            is_active=True,
        )

    # SPECIAL BODIES (7 total)
    special_bodies = [
        {
            'code': 'BIDA',
            'name': 'Bangsamoro Investment and Development Authority',
        },
        {
            'code': 'BIAF',
            'name': 'Bangsamoro Islamic Affairs',
        },
        {
            'code': 'BRTA',
            'name': 'Bangsamoro Radio and Television Authority',
        },
        {
            'code': 'BSBC',
            'name': 'Bangsamoro Sustainable Blue Carbon',
        },
        {
            'code': 'BWPB',
            'name': 'Bangsamoro Water and Power Board',
        },
        {
            'code': 'MUWASSCO',
            'name': 'Mindanao Utilities Water and Sanitation Service Company',
        },
        {
            'code': 'SPBI',
            'name': 'Special Program for Bangsamoro Innovation',
        },
    ]

    print(f"Creating {len(special_bodies)} Special Bodies...")
    for special_data in special_bodies:
        Organization.objects.create(
            code=special_data['code'],
            name=special_data['name'],
            org_type='special',
            is_pilot=False,
            is_active=True,
        )

    # COMMISSIONS (3 total)
    commissions = [
        {
            'code': 'BCHRC',
            'name': 'Bangsamoro Commission on Human Rights',
        },
        {
            'code': 'BWCRC',
            'name': 'Bangsamoro Women\'s Commission on Rights and Concerns',
        },
        {
            'code': 'BYDC',
            'name': 'Bangsamoro Youth Development Commission',
        },
    ]

    print(f"Creating {len(commissions)} Commissions...")
    for commission_data in commissions:
        Organization.objects.create(
            code=commission_data['code'],
            name=commission_data['name'],
            org_type='commission',
            is_pilot=False,
            is_active=True,
        )

    # Verify counts
    total_created = Organization.objects.count()
    pilot_count = Organization.objects.filter(is_pilot=True).count()

    print("\n" + "="*70)
    print("BARMM MOA Seeding Complete!")
    print("="*70)
    print(f"Total Organizations in Database: {total_created}")
    print(f"Pilot MOAs: {pilot_count} (expected: 3)")
    print(f"Ministries: {len(ministries)} (expected: 16)")
    print(f"Offices: {len(offices) + 1} (expected: 11, including OOBC)")
    print(f"Agencies: {len(agencies)} (expected: 8)")
    print(f"Special Bodies: {len(special_bodies)} (expected: 7)")
    print(f"Commissions: {len(commissions)} (expected: 3)")
    print("="*70)

    # List pilot MOAs
    pilot_moas = Organization.objects.filter(is_pilot=True).values_list('code', 'name')
    print("\nPilot MOAs:")
    for code, name in pilot_moas:
        print(f"  - {code}: {name}")

    print(f"\n✅ All 45 BARMM MOAs seeded successfully!")
    print(f"✅ OOBC Organization ID: {oobc.id}")


def reverse_seed(apps, schema_editor):
    """Remove only seeded BARMM organizations, not user-created ones."""
    Organization = apps.get_model('organizations', 'Organization')

    # Only delete seeded BARMM organizations by their codes
    seeded_codes = [
        # OOBC (1)
        'OOBC',
        # Ministries (16)
        'MAFAR', 'MBHTE', 'MENRE', 'MFBM', 'MOH', 'MHSD', 'MIPA', 'MILG',
        'MOLE', 'MPWH', 'MSSD', 'MTI', 'MTIT', 'MWDWA', 'MYNDA', 'MPOS',
        # Offices (10 additional, plus OOBC = 11 total)
        'OCM', 'OMP', 'OPARL', 'OPMDA', 'OSM', 'OTAF', 'OADP', 'OBCE', 'OCRE', 'OMLA',
        # Agencies (8)
        'BAI', 'BEDC', 'BTA', 'BSWM', 'CAB', 'CSC-BARMM', 'RLEA', 'TESDA-BARMM',
        # Special Bodies (7)
        'BIDA', 'BIAF', 'BRTA', 'BSBC', 'BWPB', 'MUWASSCO', 'SPBI',
        # Commissions (3)
        'BCHRC', 'BWCRC', 'BYDC',
    ]

    count = Organization.objects.filter(code__in=seeded_codes).count()
    Organization.objects.filter(code__in=seeded_codes).delete()
    print(f"Deleted {count} seeded BARMM organizations (expected: 45)")


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(seed_organizations, reverse_code=reverse_seed),
    ]
