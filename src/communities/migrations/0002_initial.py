# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0002_initial'),
        ('communities', '0001_initial'),
        ('mana', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='geographicdatalayer',
            name='assessment',
            field=models.ForeignKey(blank=True, help_text='Assessment this layer was created for (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='barangay',
            field=models.ForeignKey(blank=True, help_text='Barangay this layer covers or relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='common.barangay'),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this layer', on_delete=django.db.models.deletion.PROTECT, related_name='created_geo_layers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='municipality',
            field=models.ForeignKey(blank=True, help_text='Municipality this layer covers or relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='common.municipality'),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='province',
            field=models.ForeignKey(blank=True, help_text='Province this layer covers or relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='common.province'),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='region',
            field=models.ForeignKey(blank=True, help_text='Region this layer covers or relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='common.region'),
        ),
        migrations.AddField(
            model_name='mapvisualization',
            name='assessment',
            field=models.ForeignKey(blank=True, help_text='Assessment this visualization was created for', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='map_visualizations', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='mapvisualization',
            name='created_by',
            field=models.ForeignKey(help_text='User who created this visualization', on_delete=django.db.models.deletion.PROTECT, related_name='created_visualizations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mapvisualization',
            name='layers',
            field=models.ManyToManyField(help_text='Geographic layers included in this visualization', related_name='visualizations', to='communities.geographicdatalayer'),
        ),
        migrations.AddField(
            model_name='municipalitycoverage',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who recorded this municipality', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='municipality_coverages_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='municipalitycoverage',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User who archived this record for deletion review.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='municipalitycoverage',
            name='municipality',
            field=models.OneToOneField(help_text='LGU where Bangsamoro communities are present', on_delete=django.db.models.deletion.CASCADE, related_name='obc_coverage', to='common.municipality'),
        ),
        migrations.AddField(
            model_name='municipalitycoverage',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='municipality_coverages_updated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='obccommunity',
            name='barangay',
            field=models.ForeignKey(help_text='Barangay where the community is located', on_delete=django.db.models.deletion.CASCADE, related_name='obc_communities', to='common.barangay'),
        ),
        migrations.AddField(
            model_name='obccommunity',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User who archived this record for deletion review.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mapvisualization',
            name='community',
            field=models.ForeignKey(blank=True, help_text='Community this visualization focuses on', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='community_map_visualizations', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='geographicdatalayer',
            name='community',
            field=models.ForeignKey(blank=True, help_text='Community this layer relates to (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geographic_layers', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='communitylivelihood',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='livelihoods', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='communityinfrastructure',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infrastructure', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='communityevent',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_events', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='provincecoverage',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who recorded this province', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='province_coverages_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='provincecoverage',
            name='deleted_by',
            field=models.ForeignKey(blank=True, help_text='User who archived this record for deletion review.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='provincecoverage',
            name='province',
            field=models.OneToOneField(help_text='Province covering multiple municipal OBC records', on_delete=django.db.models.deletion.CASCADE, related_name='obc_coverage', to='common.province'),
        ),
        migrations.AddField(
            model_name='provincecoverage',
            name='submitted_by',
            field=models.ForeignKey(blank=True, help_text='User who submitted this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='province_coverages_submitted', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='provincecoverage',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='province_coverages_updated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='spatialdatapoint',
            name='assessment',
            field=models.ForeignKey(blank=True, help_text='Assessment that identified this point', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spatial_points', to='mana.assessment'),
        ),
        migrations.AddField(
            model_name='spatialdatapoint',
            name='collected_by',
            field=models.ForeignKey(help_text='User who collected this point', on_delete=django.db.models.deletion.PROTECT, related_name='collected_points', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='spatialdatapoint',
            name='community',
            field=models.ForeignKey(help_text='Community this point belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='spatial_points', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='spatialdatapoint',
            name='data_layer',
            field=models.ForeignKey(help_text='Geographic layer this point belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='data_points', to='communities.geographicdatalayer'),
        ),
        migrations.AddField(
            model_name='spatialdatapoint',
            name='verified_by',
            field=models.ForeignKey(blank=True, help_text='User who verified this point', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_points', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stakeholder',
            name='community',
            field=models.ForeignKey(help_text='OBC community where this stakeholder is active', on_delete=django.db.models.deletion.CASCADE, related_name='stakeholders', to='communities.obccommunity'),
        ),
        migrations.AddField(
            model_name='stakeholderengagement',
            name='stakeholder',
            field=models.ForeignKey(help_text='Stakeholder involved in this engagement', on_delete=django.db.models.deletion.CASCADE, related_name='engagements', to='communities.stakeholder'),
        ),
        migrations.AddConstraint(
            model_name='obccommunity',
            constraint=models.UniqueConstraint(fields=('barangay',), name='unique_obccommunity_per_barangay'),
        ),
        migrations.AddIndex(
            model_name='geographicdatalayer',
            index=models.Index(fields=['community', 'layer_type'], name='communities_communi_1ad86e_idx'),
        ),
        migrations.AddIndex(
            model_name='geographicdatalayer',
            index=models.Index(fields=['assessment', 'data_source'], name='communities_assessm_ca4971_idx'),
        ),
        migrations.AddIndex(
            model_name='geographicdatalayer',
            index=models.Index(fields=['is_public', 'is_visible'], name='communities_is_publ_e95827_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='communityinfrastructure',
            unique_together={('community', 'infrastructure_type')},
        ),
        migrations.AddIndex(
            model_name='spatialdatapoint',
            index=models.Index(fields=['community', 'point_type'], name='communities_communi_896657_idx'),
        ),
        migrations.AddIndex(
            model_name='spatialdatapoint',
            index=models.Index(fields=['latitude', 'longitude'], name='communities_latitud_2fa309_idx'),
        ),
        migrations.AddIndex(
            model_name='spatialdatapoint',
            index=models.Index(fields=['data_layer', 'status'], name='communities_data_la_5ef31d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stakeholder',
            unique_together={('full_name', 'community', 'stakeholder_type')},
        ),
    ]
