# Generated by Django 4.2.21 on 2025-05-22 11:27

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("communities", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Stakeholder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        help_text="Full name of the stakeholder", max_length=255
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True,
                        help_text="Common nickname or title (e.g., Ustadz Abdullah)",
                        max_length=100,
                    ),
                ),
                (
                    "stakeholder_type",
                    models.CharField(
                        choices=[
                            ("community_leader", "Community Leader"),
                            ("barangay_captain", "Barangay Captain"),
                            ("tribal_leader", "Tribal Leader/Datu"),
                            ("ulama", "Ulama"),
                            ("imam", "Imam/Khatib"),
                            ("ustadz", "Ustadz/Religious Teacher"),
                            ("arabic_teacher", "ALIVE/Arabic Teacher"),
                            ("madrasa_teacher", "Madrasah Teacher"),
                            ("youth_leader", "Youth Leader"),
                            ("women_leader", "Women Leader"),
                            ("business_leader", "Business Leader"),
                            ("cooperative_leader", "Cooperative Leader"),
                            ("health_worker", "Community Health Worker"),
                            ("volunteer", "Community Volunteer"),
                            ("other", "Other"),
                        ],
                        help_text="Type/role of stakeholder in the community",
                        max_length=50,
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="Official position or title held",
                        max_length=255,
                    ),
                ),
                (
                    "organization",
                    models.CharField(
                        blank=True,
                        help_text="Organization or institution they represent",
                        max_length=255,
                    ),
                ),
                (
                    "responsibilities",
                    models.TextField(
                        blank=True, help_text="Key responsibilities and duties"
                    ),
                ),
                (
                    "contact_number",
                    models.CharField(
                        blank=True, help_text="Primary contact number", max_length=20
                    ),
                ),
                (
                    "alternate_contact",
                    models.CharField(
                        blank=True, help_text="Alternate contact number", max_length=20
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="Email address", max_length=254
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="Physical address within the community"
                    ),
                ),
                (
                    "influence_level",
                    models.CharField(
                        choices=[
                            ("very_high", "Very High"),
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                            ("emerging", "Emerging"),
                        ],
                        default="medium",
                        help_text="Level of influence within the community",
                        max_length=20,
                    ),
                ),
                (
                    "engagement_level",
                    models.CharField(
                        choices=[
                            ("very_active", "Very Active"),
                            ("active", "Active"),
                            ("moderate", "Moderate"),
                            ("limited", "Limited"),
                            ("inactive", "Inactive"),
                        ],
                        default="active",
                        help_text="Level of engagement in community activities",
                        max_length=20,
                    ),
                ),
                (
                    "areas_of_influence",
                    models.TextField(
                        blank=True,
                        help_text="Specific areas where they have influence (e.g., youth, religious matters, livelihood)",
                    ),
                ),
                (
                    "age",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Age of the stakeholder",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "educational_background",
                    models.CharField(
                        blank=True,
                        help_text="Educational background and qualifications",
                        max_length=255,
                    ),
                ),
                (
                    "cultural_background",
                    models.CharField(
                        blank=True,
                        help_text="Cultural or ethnic background",
                        max_length=255,
                    ),
                ),
                (
                    "languages_spoken",
                    models.CharField(
                        blank=True,
                        help_text="Languages spoken (comma-separated)",
                        max_length=255,
                    ),
                ),
                (
                    "since_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year they started serving in this role",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1950),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                    ),
                ),
                (
                    "years_in_community",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of years living in this community",
                        null=True,
                    ),
                ),
                (
                    "previous_roles",
                    models.TextField(
                        blank=True,
                        help_text="Previous roles or positions held in the community",
                    ),
                ),
                (
                    "special_skills",
                    models.TextField(
                        blank=True,
                        help_text="Special skills or expertise they bring to the community",
                    ),
                ),
                (
                    "networks",
                    models.TextField(
                        blank=True,
                        help_text="External networks or connections they have",
                    ),
                ),
                (
                    "achievements",
                    models.TextField(
                        blank=True,
                        help_text="Notable achievements or contributions to the community",
                    ),
                ),
                (
                    "challenges_faced",
                    models.TextField(
                        blank=True, help_text="Challenges they face in their role"
                    ),
                ),
                (
                    "support_needed",
                    models.TextField(
                        blank=True,
                        help_text="Support or resources they need to be more effective",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this stakeholder is currently active",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the stakeholder information has been verified",
                    ),
                ),
                (
                    "verification_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when information was last verified",
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the stakeholder"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community",
                    models.ForeignKey(
                        help_text="OBC community where this stakeholder is active",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stakeholders",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Stakeholder",
                "verbose_name_plural": "Community Stakeholders",
                "db_table": "communities_stakeholder",
                "ordering": ["community__name", "stakeholder_type", "full_name"],
                "unique_together": {("full_name", "community", "stakeholder_type")},
            },
        ),
        migrations.CreateModel(
            name="StakeholderEngagement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "engagement_type",
                    models.CharField(
                        choices=[
                            ("meeting", "Community Meeting"),
                            ("consultation", "Consultation"),
                            ("training", "Training/Workshop"),
                            ("assessment", "Assessment/Survey"),
                            ("project_activity", "Project Activity"),
                            ("religious_activity", "Religious Activity"),
                            ("cultural_event", "Cultural Event"),
                            ("emergency_response", "Emergency Response"),
                            ("coordination", "Coordination Meeting"),
                            ("other", "Other"),
                        ],
                        help_text="Type of engagement activity",
                        max_length=50,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title or subject of the engagement", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the engagement"
                    ),
                ),
                ("date", models.DateField(help_text="Date of the engagement")),
                (
                    "duration_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Duration in hours",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Location where engagement took place",
                        max_length=255,
                    ),
                ),
                (
                    "participants_count",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of participants involved",
                        null=True,
                    ),
                ),
                (
                    "outcome",
                    models.CharField(
                        choices=[
                            ("very_positive", "Very Positive"),
                            ("positive", "Positive"),
                            ("neutral", "Neutral"),
                            ("challenging", "Challenging"),
                            ("negative", "Negative"),
                        ],
                        default="positive",
                        help_text="Overall outcome of the engagement",
                        max_length=20,
                    ),
                ),
                (
                    "key_points",
                    models.TextField(
                        blank=True,
                        help_text="Key points discussed or outcomes achieved",
                    ),
                ),
                (
                    "action_items",
                    models.TextField(
                        blank=True,
                        help_text="Action items or follow-up tasks identified",
                    ),
                ),
                (
                    "challenges_encountered",
                    models.TextField(
                        blank=True, help_text="Challenges or issues encountered"
                    ),
                ),
                (
                    "stakeholder_feedback",
                    models.TextField(
                        blank=True, help_text="Feedback provided by the stakeholder"
                    ),
                ),
                (
                    "follow_up_needed",
                    models.BooleanField(
                        default=False, help_text="Whether follow-up is needed"
                    ),
                ),
                (
                    "follow_up_date",
                    models.DateField(
                        blank=True, help_text="Date for follow-up if needed", null=True
                    ),
                ),
                (
                    "documented_by",
                    models.CharField(
                        help_text="Person who documented this engagement",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "stakeholder",
                    models.ForeignKey(
                        help_text="Stakeholder involved in this engagement",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="engagements",
                        to="communities.stakeholder",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stakeholder Engagement",
                "verbose_name_plural": "Stakeholder Engagements",
                "db_table": "communities_stakeholder_engagement",
                "ordering": ["-date", "stakeholder__full_name"],
            },
        ),
    ]
