# Generated by Django 4.2.21 on 2025-05-22 11:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("common", "0002_region_province_municipality_barangay"),
    ]

    operations = [
        migrations.CreateModel(
            name="OBCCommunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the OBC community", max_length=255
                    ),
                ),
                (
                    "specific_location",
                    models.CharField(
                        blank=True,
                        help_text="Specific location within the barangay (e.g., Sitio, Purok)",
                        max_length=255,
                    ),
                ),
                (
                    "settlement_type",
                    models.CharField(
                        choices=[
                            ("village", "Village"),
                            ("subdivision", "Subdivision"),
                            ("sitio", "Sitio"),
                            ("purok", "Purok"),
                            ("compound", "Compound"),
                            ("dispersed", "Dispersed Settlement"),
                        ],
                        default="village",
                        help_text="Type of settlement",
                        max_length=20,
                    ),
                ),
                (
                    "population",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Total population of the community",
                        null=True,
                    ),
                ),
                (
                    "households",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of households in the community",
                        null=True,
                    ),
                ),
                (
                    "families",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of families in the community",
                        null=True,
                    ),
                ),
                (
                    "children_0_12",
                    models.PositiveIntegerField(
                        blank=True, help_text="Number of children aged 0-12", null=True
                    ),
                ),
                (
                    "youth_13_30",
                    models.PositiveIntegerField(
                        blank=True, help_text="Number of youth aged 13-30", null=True
                    ),
                ),
                (
                    "adults_31_59",
                    models.PositiveIntegerField(
                        blank=True, help_text="Number of adults aged 31-59", null=True
                    ),
                ),
                (
                    "seniors_60_plus",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of seniors aged 60 and above",
                        null=True,
                    ),
                ),
                (
                    "primary_language",
                    models.CharField(
                        blank=True,
                        help_text="Primary language spoken in the community",
                        max_length=100,
                    ),
                ),
                (
                    "other_languages",
                    models.CharField(
                        blank=True,
                        help_text="Other languages spoken (comma-separated)",
                        max_length=255,
                    ),
                ),
                (
                    "cultural_background",
                    models.TextField(
                        blank=True, help_text="Cultural background and traditions"
                    ),
                ),
                (
                    "religious_practices",
                    models.TextField(
                        blank=True, help_text="Religious practices and observances"
                    ),
                ),
                (
                    "has_mosque",
                    models.BooleanField(
                        default=False, help_text="Whether the community has a mosque"
                    ),
                ),
                (
                    "has_madrasah",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the community has a madrasah/Islamic school",
                    ),
                ),
                (
                    "religious_leaders_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of religious leaders (Imam, Ustadz, etc.)",
                    ),
                ),
                (
                    "established_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year the community was established",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1800),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                    ),
                ),
                (
                    "origin_story",
                    models.TextField(
                        blank=True,
                        help_text="Story of how the community was established",
                    ),
                ),
                (
                    "migration_history",
                    models.TextField(
                        blank=True, help_text="Migration history and patterns"
                    ),
                ),
                (
                    "development_status",
                    models.CharField(
                        choices=[
                            ("developing", "Developing"),
                            ("established", "Established"),
                            ("vulnerable", "Vulnerable"),
                            ("thriving", "Thriving"),
                            ("at_risk", "At Risk"),
                        ],
                        default="developing",
                        help_text="Current development status of the community",
                        max_length=20,
                    ),
                ),
                (
                    "needs_assessment_date",
                    models.DateField(
                        blank=True, help_text="Date of last needs assessment", null=True
                    ),
                ),
                (
                    "priority_needs",
                    models.TextField(
                        blank=True,
                        help_text="Priority needs identified for the community",
                    ),
                ),
                (
                    "community_leader",
                    models.CharField(
                        blank=True,
                        help_text="Name of the community leader",
                        max_length=255,
                    ),
                ),
                (
                    "leader_contact",
                    models.CharField(
                        blank=True,
                        help_text="Contact information for community leader",
                        max_length=100,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this community record is active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about the community"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "barangay",
                    models.ForeignKey(
                        help_text="Barangay where the community is located",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="obc_communities",
                        to="common.barangay",
                    ),
                ),
            ],
            options={
                "verbose_name": "OBC Community",
                "verbose_name_plural": "OBC Communities",
                "db_table": "communities_obc_community",
                "ordering": [
                    "barangay__municipality__province__region__code",
                    "barangay__municipality__province__name",
                    "barangay__municipality__name",
                    "barangay__name",
                    "name",
                ],
                "unique_together": {("name", "barangay")},
            },
        ),
        migrations.CreateModel(
            name="CommunityLivelihood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "livelihood_type",
                    models.CharField(
                        choices=[
                            ("agriculture", "Agriculture"),
                            ("fishing", "Fishing"),
                            ("livestock", "Livestock"),
                            ("trade", "Trade/Business"),
                            ("services", "Services"),
                            ("handicrafts", "Handicrafts"),
                            ("transportation", "Transportation"),
                            ("construction", "Construction"),
                            ("government", "Government Employment"),
                            ("private_employment", "Private Employment"),
                            ("other", "Other"),
                        ],
                        help_text="Type of livelihood activity",
                        max_length=50,
                    ),
                ),
                (
                    "specific_activity",
                    models.CharField(
                        help_text="Specific livelihood activity (e.g., rice farming, tricycle driving)",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the livelihood activity",
                    ),
                ),
                (
                    "households_involved",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of households involved in this livelihood",
                        null=True,
                    ),
                ),
                (
                    "percentage_of_community",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of community involved in this livelihood",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "is_primary_livelihood",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary livelihood for the community",
                    ),
                ),
                (
                    "seasonal",
                    models.BooleanField(
                        default=False, help_text="Whether this livelihood is seasonal"
                    ),
                ),
                (
                    "income_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("very_low", "Very Low"),
                            ("low", "Low"),
                            ("moderate", "Moderate"),
                            ("high", "High"),
                            ("very_high", "Very High"),
                        ],
                        help_text="General income level from this livelihood",
                        max_length=20,
                    ),
                ),
                (
                    "challenges",
                    models.TextField(
                        blank=True,
                        help_text="Challenges faced in this livelihood activity",
                    ),
                ),
                (
                    "opportunities",
                    models.TextField(
                        blank=True,
                        help_text="Opportunities for improvement or expansion",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="livelihoods",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Livelihood",
                "verbose_name_plural": "Community Livelihoods",
                "db_table": "communities_livelihood",
                "ordering": [
                    "community__name",
                    "-is_primary_livelihood",
                    "livelihood_type",
                ],
            },
        ),
        migrations.CreateModel(
            name="CommunityInfrastructure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "infrastructure_type",
                    models.CharField(
                        choices=[
                            ("water", "Water Supply"),
                            ("electricity", "Electricity"),
                            ("roads", "Roads/Transportation"),
                            ("communication", "Communication/Internet"),
                            ("health", "Health Facilities"),
                            ("education", "Education Facilities"),
                            ("religious", "Religious Facilities"),
                            ("market", "Market/Trading Post"),
                            ("waste", "Waste Management"),
                            ("drainage", "Drainage System"),
                        ],
                        help_text="Type of infrastructure",
                        max_length=50,
                    ),
                ),
                (
                    "availability_status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("limited", "Limited"),
                            ("poor", "Poor Quality"),
                            ("none", "Not Available"),
                            ("planned", "Planned/Proposed"),
                        ],
                        help_text="Current availability status",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the infrastructure",
                    ),
                ),
                (
                    "coverage_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of community with access",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                            ("very_poor", "Very Poor"),
                        ],
                        help_text="Physical condition of the infrastructure",
                        max_length=20,
                    ),
                ),
                (
                    "priority_for_improvement",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        help_text="Priority level for improvement",
                        max_length=20,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the infrastructure",
                    ),
                ),
                (
                    "last_assessed",
                    models.DateField(
                        blank=True,
                        help_text="Date when this infrastructure was last assessed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "community",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="infrastructure",
                        to="communities.obccommunity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Infrastructure",
                "verbose_name_plural": "Community Infrastructure",
                "db_table": "communities_infrastructure",
                "ordering": ["community__name", "infrastructure_type"],
                "unique_together": {("community", "infrastructure_type")},
            },
        ),
    ]
