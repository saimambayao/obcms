# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityInfrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('infrastructure_type', models.CharField(choices=[('water', 'Water Supply'), ('electricity', 'Electricity'), ('roads', 'Roads/Transportation'), ('communication', 'Communication/Internet'), ('health', 'Health Facilities'), ('education', 'Education Facilities'), ('religious', 'Religious Facilities'), ('market', 'Market/Trading Post'), ('waste', 'Waste Management'), ('drainage', 'Drainage System')], help_text='Type of infrastructure', max_length=50)),
                ('availability_status', models.CharField(choices=[('available', 'Available'), ('limited', 'Limited'), ('poor', 'Poor Quality'), ('none', 'Not Available'), ('planned', 'Planned/Proposed')], help_text='Current availability status', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the infrastructure')),
                ('coverage_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of community with access', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('condition', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('very_poor', 'Very Poor')], help_text='Physical condition of the infrastructure', max_length=20)),
                ('priority_for_improvement', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', help_text='Priority level for improvement', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the infrastructure')),
                ('last_assessed', models.DateField(blank=True, help_text='Date when this infrastructure was last assessed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Community Infrastructure',
                'verbose_name_plural': 'Community Infrastructure',
                'db_table': 'communities_infrastructure',
                'ordering': ['community__barangay__name', 'infrastructure_type'],
            },
        ),
        migrations.CreateModel(
            name='CommunityLivelihood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('livelihood_type', models.CharField(choices=[('agriculture', 'Agriculture'), ('fishing', 'Fishing'), ('livestock', 'Livestock'), ('trade', 'Trade/Business'), ('services', 'Services'), ('handicrafts', 'Handicrafts'), ('transportation', 'Transportation'), ('construction', 'Construction'), ('government', 'Government Employment'), ('private_employment', 'Private Employment'), ('other', 'Other')], help_text='Type of livelihood activity', max_length=50)),
                ('specific_activity', models.CharField(help_text='Specific livelihood activity (e.g., rice farming, tricycle driving)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the livelihood activity')),
                ('households_involved', models.PositiveIntegerField(blank=True, help_text='Number of households involved in this livelihood', null=True)),
                ('percentage_of_community', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of community involved in this livelihood', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_primary_livelihood', models.BooleanField(default=False, help_text='Whether this is the primary livelihood for the community')),
                ('seasonal', models.BooleanField(default=False, help_text='Whether this livelihood is seasonal')),
                ('income_level', models.CharField(blank=True, choices=[('very_low', 'Very Low'), ('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('very_high', 'Very High')], help_text='General income level from this livelihood', max_length=20)),
                ('challenges', models.TextField(blank=True, help_text='Challenges faced in this livelihood activity')),
                ('opportunities', models.TextField(blank=True, help_text='Opportunities for improvement or expansion')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Community Livelihood',
                'verbose_name_plural': 'Community Livelihoods',
                'db_table': 'communities_livelihood',
                'ordering': ['community__barangay__name', '-is_primary_livelihood', 'livelihood_type'],
            },
        ),
        migrations.CreateModel(
            name='GeographicDataLayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the geographic data layer', max_length=150)),
                ('description', models.TextField(help_text='Description of the data layer and its purpose')),
                ('layer_type', models.CharField(choices=[('point', 'Point Data'), ('line', 'Line/Route Data'), ('polygon', 'Polygon/Area Data'), ('raster', 'Raster/Satellite Data'), ('heatmap', 'Heatmap Data'), ('cluster', 'Clustered Data')], help_text='Type of geographic data', max_length=15)),
                ('data_source', models.CharField(choices=[('field_survey', 'Field Survey'), ('satellite_imagery', 'Satellite Imagery'), ('government_data', 'Government Dataset'), ('community_mapping', 'Community Mapping'), ('third_party', 'Third Party Source'), ('mobile_app', 'Mobile Application'), ('gps_tracking', 'GPS Tracking')], help_text='Source of the geographic data', max_length=20)),
                ('geojson_data', models.JSONField(help_text='GeoJSON data for the layer')),
                ('bounding_box', models.JSONField(blank=True, help_text='Bounding box coordinates [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('center_point', models.JSONField(blank=True, help_text='Center point coordinates [longitude, latitude]', null=True)),
                ('style_properties', models.JSONField(blank=True, help_text='Styling properties for map display (colors, symbols, etc.)', null=True)),
                ('zoom_level_min', models.IntegerField(default=1, help_text='Minimum zoom level for layer visibility')),
                ('zoom_level_max', models.IntegerField(default=18, help_text='Maximum zoom level for layer visibility')),
                ('is_visible', models.BooleanField(default=True, help_text='Whether the layer is visible by default')),
                ('opacity', models.FloatField(default=1.0, help_text='Layer opacity (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('data_collection_date', models.DateField(blank=True, help_text='Date when the data was collected', null=True)),
                ('accuracy_meters', models.FloatField(blank=True, help_text='Estimated accuracy in meters', null=True)),
                ('coordinate_system', models.CharField(default='EPSG:4326', help_text='Coordinate reference system (e.g., EPSG:4326)', max_length=50)),
                ('attribution', models.TextField(blank=True, help_text='Data attribution and source credits')),
                ('license_info', models.CharField(blank=True, help_text='License information for the data', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Whether this layer is publicly accessible')),
                ('access_groups', models.JSONField(blank=True, help_text='User groups that have access to this layer', null=True)),
                ('feature_count', models.IntegerField(default=0, help_text='Number of features in the layer')),
                ('file_size_bytes', models.BigIntegerField(blank=True, help_text='Size of the data in bytes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MapVisualization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the map visualization', max_length=200)),
                ('description', models.TextField(help_text='Description and purpose of the visualization')),
                ('visualization_type', models.CharField(choices=[('basic_map', 'Basic Map'), ('choropleth', 'Choropleth Map'), ('heat_map', 'Heat Map'), ('cluster_map', 'Cluster Map'), ('timeline_map', 'Timeline Map'), ('comparison_map', 'Comparison Map'), ('story_map', 'Story Map')], help_text='Type of map visualization', max_length=20)),
                ('basemap_provider', models.CharField(choices=[('openstreetmap', 'OpenStreetMap'), ('satellite', 'Satellite Imagery'), ('terrain', 'Terrain Map'), ('dark', 'Dark Theme'), ('light', 'Light Theme'), ('custom', 'Custom Basemap')], default='openstreetmap', help_text='Base map provider', max_length=20)),
                ('initial_zoom', models.IntegerField(default=10, help_text='Initial zoom level', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(18)])),
                ('initial_center', models.JSONField(help_text='Initial center point [longitude, latitude]')),
                ('bounding_box', models.JSONField(blank=True, help_text='Map bounding box [min_lng, min_lat, max_lng, max_lat]', null=True)),
                ('color_scheme', models.JSONField(blank=True, help_text='Color scheme configuration', null=True)),
                ('legend_configuration', models.JSONField(blank=True, help_text='Legend display configuration', null=True)),
                ('popup_template', models.TextField(blank=True, help_text='HTML template for feature popups')),
                ('filters_configuration', models.JSONField(blank=True, help_text='Interactive filters configuration', null=True)),
                ('is_interactive', models.BooleanField(default=True, help_text='Whether the map allows user interaction')),
                ('enable_clustering', models.BooleanField(default=False, help_text='Whether to enable point clustering')),
                ('enable_search', models.BooleanField(default=False, help_text='Whether to enable location search')),
                ('enable_drawing', models.BooleanField(default=False, help_text='Whether to enable drawing tools')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this visualization is publicly accessible')),
                ('is_embedded', models.BooleanField(default=False, help_text='Whether this visualization can be embedded')),
                ('share_token', models.CharField(blank=True, help_text='Unique token for sharing the visualization', max_length=50, null=True, unique=True)),
                ('view_count', models.IntegerField(default=0, help_text='Number of times this visualization has been viewed')),
                ('last_viewed', models.DateTimeField(blank=True, help_text='Last time this visualization was viewed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MunicipalityCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obc_id', models.CharField(blank=True, default='', help_text='Unique identifier for the OBC (e.g., R12-SK-PAL-001)', max_length=50)),
                ('source_document_reference', models.TextField(blank=True, help_text="Document source and page number (e.g., 'OBC MANA Region 12, p.7')")),
                ('community_names', models.TextField(blank=True, default='', help_text='Common name(s) used to refer to the community (comma-separated)')),
                ('purok_sitio', models.CharField(blank=True, help_text='Specific Purok/Sitio within the barangay', max_length=255)),
                ('specific_location', models.CharField(blank=True, help_text='Additional specific location details', max_length=255)),
                ('settlement_type', models.CharField(choices=[('village', 'Village'), ('subdivision', 'Subdivision'), ('sitio', 'Sitio'), ('purok', 'Purok'), ('compound', 'Compound'), ('dispersed', 'Dispersed Settlement')], default='village', help_text='Type of settlement', max_length=20)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate for mapping', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate for mapping', null=True)),
                ('proximity_to_barmm', models.CharField(blank=True, choices=[('adjacent', 'Adjacent to BARMM'), ('near', 'Near BARMM'), ('distant', 'Distant from BARMM')], help_text='Proximity to BARMM boundaries', max_length=20)),
                ('estimated_obc_population', models.PositiveIntegerField(blank=True, help_text='Number of individuals identified as part of the OBC', null=True)),
                ('total_barangay_population', models.PositiveIntegerField(blank=True, help_text='Total barangay population for context', null=True)),
                ('households', models.PositiveIntegerField(blank=True, help_text='Number of households in the community', null=True)),
                ('families', models.PositiveIntegerField(blank=True, help_text='Number of families in the community', null=True)),
                ('primary_ethnolinguistic_group', models.CharField(blank=True, choices=[('badjao', 'Badjao'), ('iranun', 'Iranun'), ('jama_mapun', 'Jama Mapun'), ('kagan_kalagan', 'Kagan/Kalagan'), ('kolibugan', 'Kolibugan'), ('maguindanaon', 'Maguindanaon'), ('meranaw', 'Meranaw'), ('molbog', 'Molbog'), ('palawani', 'Palawani'), ('sama', 'Sama'), ('sangil', 'Sangil'), ('tausug', 'Tausug'), ('yakan', 'Yakan'), ('other', 'Other')], help_text='Primary ethnolinguistic group', max_length=50)),
                ('other_ethnolinguistic_groups', models.TextField(blank=True, help_text='Other ethnolinguistic groups present (comma-separated)')),
                ('languages_spoken', models.TextField(blank=True, help_text='Languages spoken in the community (comma-separated)')),
                ('children_0_9', models.PositiveIntegerField(blank=True, help_text='Number of children aged 0-9', null=True)),
                ('adolescents_10_14', models.PositiveIntegerField(blank=True, help_text='Number of adolescents aged 10-14', null=True)),
                ('youth_15_30', models.PositiveIntegerField(blank=True, help_text='Number of youth aged 15-30', null=True)),
                ('adults_31_59', models.PositiveIntegerField(blank=True, help_text='Number of adults aged 31-59', null=True)),
                ('seniors_60_plus', models.PositiveIntegerField(blank=True, help_text='Number of seniors aged 60 and above', null=True)),
                ('women_count', models.PositiveIntegerField(blank=True, help_text='Number of women in the community', null=True)),
                ('solo_parents_count', models.PositiveIntegerField(blank=True, help_text='Number of solo parents', null=True)),
                ('pwd_count', models.PositiveIntegerField(blank=True, help_text='Number of Persons with Disabilities (PWDs)', null=True)),
                ('farmers_count', models.PositiveIntegerField(blank=True, help_text='Number of farmers', null=True)),
                ('fisherfolk_count', models.PositiveIntegerField(blank=True, help_text='Number of fisherfolk', null=True)),
                ('indigenous_peoples_count', models.PositiveIntegerField(blank=True, help_text='Number of Indigenous Peoples (if distinct within OBC)', null=True)),
                ('idps_count', models.PositiveIntegerField(blank=True, help_text='Number of Internally Displaced Persons (IDPs)', null=True)),
                ('csos_count', models.PositiveIntegerField(blank=True, help_text='Number of Civil Society Organizations (CSOs) in the community', null=True)),
                ('associations_count', models.PositiveIntegerField(blank=True, help_text='Number of Associations in the community', null=True)),
                ('unemployed_count', models.PositiveIntegerField(blank=True, help_text='Number of unemployed individuals', null=True)),
                ('migrants_transients_count', models.PositiveIntegerField(blank=True, help_text='Number of migrants/transients', null=True)),
                ('other_vulnerable_sectors', models.TextField(blank=True, help_text='Other vulnerable sectors not listed above')),
                ('primary_livelihoods', models.TextField(blank=True, help_text='Primary livelihoods (e.g., Rice Farming, Coconut Production, Fishing)')),
                ('secondary_livelihoods', models.TextField(blank=True, help_text='Secondary livelihoods in the community')),
                ('estimated_poverty_incidence', models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated poverty incidence within OBC', max_length=20)),
                ('access_formal_education', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to formal schools', max_length=20)),
                ('access_als', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Alternative Learning System (ALS)', max_length=20)),
                ('access_madrasah', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Madrasah/Islamic education', max_length=20)),
                ('access_healthcare', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to healthcare facilities', max_length=20)),
                ('access_clean_water', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to clean water supply', max_length=20)),
                ('access_sanitation', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to sanitation facilities', max_length=20)),
                ('access_electricity', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to electricity', max_length=20)),
                ('access_roads_transport', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to roads and transportation', max_length=20)),
                ('access_communication', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to communication (mobile/internet)', max_length=20)),
                ('land_tenure_issues', models.TextField(blank=True, help_text='Land tenure issues (lack of titles, disputes, ancestral domain claims)')),
                ('number_of_peoples_organizations', models.PositiveIntegerField(blank=True, help_text="Number of People's Organizations in the community", null=True)),
                ('number_of_cooperatives', models.PositiveIntegerField(blank=True, help_text='Number of Cooperatives in the community', null=True)),
                ('number_of_social_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Social Enterprises in the community', null=True)),
                ('number_of_micro_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Micro-Enterprises (such as Sari-Sari Stores, etc.)', null=True)),
                ('number_of_unbanked_obc', models.PositiveIntegerField(blank=True, help_text='Number of OBC Individuals without Access to Financial Services (Unbanked)', null=True)),
                ('financial_access_level', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to banking and financial services', max_length=20)),
                ('brief_historical_background', models.TextField(blank=True, help_text='Key historical narratives of the community in the area')),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the community was established', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)])),
                ('origin_story', models.TextField(blank=True, help_text='Story of how the community was established')),
                ('migration_history', models.TextField(blank=True, help_text='Migration history and patterns')),
                ('cultural_practices_traditions', models.TextField(blank=True, help_text='Notable customs, traditions, festivals')),
                ('religious_affiliation', models.TextField(blank=True, help_text='Religious affiliation and specific practices')),
                ('traditional_leaders_role', models.TextField(blank=True, help_text='Role of traditional leaders (Imams, Elders, Chieftains)')),
                ('cultural_preservation_efforts', models.TextField(blank=True, help_text='Existing cultural preservation efforts')),
                ('mosques_count', models.PositiveIntegerField(default=0, help_text='Number of mosques accessible to the community')),
                ('madrasah_count', models.PositiveIntegerField(default=0, help_text='Number of madrasah/Islamic schools accessible to the community')),
                ('asatidz_count', models.PositiveIntegerField(default=0, help_text='Number of Asatidz (Islamic teachers/instructors)')),
                ('religious_leaders_count', models.PositiveIntegerField(default=0, help_text='Number of Ulama or religious leaders (Imam, Ustadz, etc.)')),
                ('other_cultural_facilities', models.TextField(blank=True, help_text='Other cultural facilities, artefacts, or assets not listed above')),
                ('formal_political_representation', models.TextField(blank=True, help_text='Presence in Barangay Council, LGU representation')),
                ('informal_leadership_structures', models.TextField(blank=True, help_text='Description of informal leadership structures')),
                ('community_organizations', models.TextField(blank=True, help_text='Community organizations/associations (name, focus, contact)')),
                ('relationship_with_lgu', models.CharField(blank=True, choices=[('collaborative', 'Collaborative'), ('strained', 'Strained'), ('minimal', 'Minimal'), ('good', 'Good'), ('excellent', 'Excellent')], help_text='Relationship with LGU', max_length=20)),
                ('participation_local_governance', models.TextField(blank=True, help_text='Participation in local governance and planning')),
                ('access_government_info', models.TextField(blank=True, help_text='Access to information on government programs')),
                ('governance_policy_challenges', models.TextField(blank=True, help_text='Marginalization, lack of representation issues')),
                ('access_public_services_challenges', models.TextField(blank=True, help_text='Challenges in accessing education, health, infrastructure')),
                ('land_ownership_security_issues', models.TextField(blank=True, help_text='Land ownership and security challenges')),
                ('economic_disparities', models.TextField(blank=True, help_text='Poverty, limited employment, economic challenges')),
                ('social_instability_conflict', models.TextField(blank=True, help_text='Rido, security issues, social conflicts')),
                ('cultural_miscommunication', models.TextField(blank=True, help_text='Cultural miscommunication challenges')),
                ('gender_inequality_issues', models.TextField(blank=True, help_text='Gender inequality, early marriage issues')),
                ('substance_abuse_issues', models.TextField(blank=True, help_text='Drug use, substance abuse issues')),
                ('investment_scam_issues', models.TextField(blank=True, help_text='Investment scams and financial fraud issues')),
                ('environmental_degradation', models.TextField(blank=True, help_text='Mining, illegal fishing, environmental issues')),
                ('other_challenges', models.TextField(blank=True, help_text='Other specific challenges (ISAL education, Halal industry, etc.)')),
                ('challenges_impact', models.TextField(blank=True, help_text='Impact of these challenges on the community')),
                ('key_aspirations', models.TextField(blank=True, help_text='Key community aspirations (poverty eradication, improved services, etc.)')),
                ('infrastructure_priorities', models.TextField(blank=True, help_text='Infrastructure development priorities (roads, water, health, schools)')),
                ('livelihood_program_priorities', models.TextField(blank=True, help_text='Livelihood program priorities (agriculture, fisheries, SMEs, Halal, ecotourism)')),
                ('education_priorities', models.TextField(blank=True, help_text='Education priorities (scholarships, skills training, Madrasah support)')),
                ('healthcare_priorities', models.TextField(blank=True, help_text='Healthcare access priorities')),
                ('cultural_preservation_priorities', models.TextField(blank=True, help_text='Cultural preservation initiative priorities')),
                ('peace_security_priorities', models.TextField(blank=True, help_text='Peace and order/conflict resolution priorities')),
                ('specific_project_proposals', models.TextField(blank=True, help_text='Specific project proposals/ideas from the community')),
                ('unemployment_rate', models.CharField(blank=True, choices=[('', 'Select...'), ('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated unemployment rate within the community', max_length=20)),
                ('needs_assessment_date', models.DateField(blank=True, help_text='Date of last needs assessment', null=True)),
                ('key_findings_last_assessment', models.TextField(blank=True, help_text='Key findings from last needs assessment')),
                ('assessment_data_sources', models.TextField(blank=True, help_text='Data sources (community consultations, surveys, LGU data)')),
                ('identified_gaps', models.TextField(blank=True, help_text='Identified gaps based on assessments')),
                ('key_community_leaders', models.TextField(blank=True, help_text='Key community leader(s)/focal person(s) with contact details')),
                ('relevant_lgu_officials', models.TextField(blank=True, help_text='Relevant LGU official(s) and their contact information')),
                ('community_leader', models.CharField(blank=True, help_text='Name of the primary community leader', max_length=255)),
                ('leader_contact', models.CharField(blank=True, help_text='Contact information for community leader', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this community record is active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether this record has been archived instead of fully removed.')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was archived for removal.', null=True)),
                ('total_obc_communities', models.PositiveIntegerField(blank=True, help_text='Number of identified Bangsamoro communities in the municipality', null=True)),
                ('key_barangays', models.TextField(blank=True, help_text='Barangays or sitios with notable Bangsamoro presence (comma-separated)')),
                ('existing_support_programs', models.TextField(blank=True, help_text='Active government or partner support programs')),
                ('auto_sync', models.BooleanField(default=True, help_text='Keep totals in sync with registered barangay communities')),
            ],
            options={
                'verbose_name': 'Bangsamoro Municipality OBC',
                'verbose_name_plural': 'Bangsamoro Municipality OBCs',
                'ordering': ['municipality__province__region__name', 'municipality__province__name', 'municipality__name'],
            },
        ),
        migrations.CreateModel(
            name='OBCCommunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obc_id', models.CharField(blank=True, default='', help_text='Unique identifier for the OBC (e.g., R12-SK-PAL-001)', max_length=50)),
                ('source_document_reference', models.TextField(blank=True, help_text="Document source and page number (e.g., 'OBC MANA Region 12, p.7')")),
                ('community_names', models.TextField(blank=True, default='', help_text='Common name(s) used to refer to the community (comma-separated)')),
                ('purok_sitio', models.CharField(blank=True, help_text='Specific Purok/Sitio within the barangay', max_length=255)),
                ('specific_location', models.CharField(blank=True, help_text='Additional specific location details', max_length=255)),
                ('settlement_type', models.CharField(choices=[('village', 'Village'), ('subdivision', 'Subdivision'), ('sitio', 'Sitio'), ('purok', 'Purok'), ('compound', 'Compound'), ('dispersed', 'Dispersed Settlement')], default='village', help_text='Type of settlement', max_length=20)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate for mapping', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate for mapping', null=True)),
                ('proximity_to_barmm', models.CharField(blank=True, choices=[('adjacent', 'Adjacent to BARMM'), ('near', 'Near BARMM'), ('distant', 'Distant from BARMM')], help_text='Proximity to BARMM boundaries', max_length=20)),
                ('estimated_obc_population', models.PositiveIntegerField(blank=True, help_text='Number of individuals identified as part of the OBC', null=True)),
                ('total_barangay_population', models.PositiveIntegerField(blank=True, help_text='Total barangay population for context', null=True)),
                ('households', models.PositiveIntegerField(blank=True, help_text='Number of households in the community', null=True)),
                ('families', models.PositiveIntegerField(blank=True, help_text='Number of families in the community', null=True)),
                ('primary_ethnolinguistic_group', models.CharField(blank=True, choices=[('badjao', 'Badjao'), ('iranun', 'Iranun'), ('jama_mapun', 'Jama Mapun'), ('kagan_kalagan', 'Kagan/Kalagan'), ('kolibugan', 'Kolibugan'), ('maguindanaon', 'Maguindanaon'), ('meranaw', 'Meranaw'), ('molbog', 'Molbog'), ('palawani', 'Palawani'), ('sama', 'Sama'), ('sangil', 'Sangil'), ('tausug', 'Tausug'), ('yakan', 'Yakan'), ('other', 'Other')], help_text='Primary ethnolinguistic group', max_length=50)),
                ('other_ethnolinguistic_groups', models.TextField(blank=True, help_text='Other ethnolinguistic groups present (comma-separated)')),
                ('languages_spoken', models.TextField(blank=True, help_text='Languages spoken in the community (comma-separated)')),
                ('children_0_9', models.PositiveIntegerField(blank=True, help_text='Number of children aged 0-9', null=True)),
                ('adolescents_10_14', models.PositiveIntegerField(blank=True, help_text='Number of adolescents aged 10-14', null=True)),
                ('youth_15_30', models.PositiveIntegerField(blank=True, help_text='Number of youth aged 15-30', null=True)),
                ('adults_31_59', models.PositiveIntegerField(blank=True, help_text='Number of adults aged 31-59', null=True)),
                ('seniors_60_plus', models.PositiveIntegerField(blank=True, help_text='Number of seniors aged 60 and above', null=True)),
                ('women_count', models.PositiveIntegerField(blank=True, help_text='Number of women in the community', null=True)),
                ('solo_parents_count', models.PositiveIntegerField(blank=True, help_text='Number of solo parents', null=True)),
                ('pwd_count', models.PositiveIntegerField(blank=True, help_text='Number of Persons with Disabilities (PWDs)', null=True)),
                ('farmers_count', models.PositiveIntegerField(blank=True, help_text='Number of farmers', null=True)),
                ('fisherfolk_count', models.PositiveIntegerField(blank=True, help_text='Number of fisherfolk', null=True)),
                ('indigenous_peoples_count', models.PositiveIntegerField(blank=True, help_text='Number of Indigenous Peoples (if distinct within OBC)', null=True)),
                ('idps_count', models.PositiveIntegerField(blank=True, help_text='Number of Internally Displaced Persons (IDPs)', null=True)),
                ('csos_count', models.PositiveIntegerField(blank=True, help_text='Number of Civil Society Organizations (CSOs) in the community', null=True)),
                ('associations_count', models.PositiveIntegerField(blank=True, help_text='Number of Associations in the community', null=True)),
                ('unemployed_count', models.PositiveIntegerField(blank=True, help_text='Number of unemployed individuals', null=True)),
                ('migrants_transients_count', models.PositiveIntegerField(blank=True, help_text='Number of migrants/transients', null=True)),
                ('other_vulnerable_sectors', models.TextField(blank=True, help_text='Other vulnerable sectors not listed above')),
                ('primary_livelihoods', models.TextField(blank=True, help_text='Primary livelihoods (e.g., Rice Farming, Coconut Production, Fishing)')),
                ('secondary_livelihoods', models.TextField(blank=True, help_text='Secondary livelihoods in the community')),
                ('estimated_poverty_incidence', models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated poverty incidence within OBC', max_length=20)),
                ('access_formal_education', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to formal schools', max_length=20)),
                ('access_als', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Alternative Learning System (ALS)', max_length=20)),
                ('access_madrasah', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Madrasah/Islamic education', max_length=20)),
                ('access_healthcare', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to healthcare facilities', max_length=20)),
                ('access_clean_water', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to clean water supply', max_length=20)),
                ('access_sanitation', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to sanitation facilities', max_length=20)),
                ('access_electricity', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to electricity', max_length=20)),
                ('access_roads_transport', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to roads and transportation', max_length=20)),
                ('access_communication', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to communication (mobile/internet)', max_length=20)),
                ('land_tenure_issues', models.TextField(blank=True, help_text='Land tenure issues (lack of titles, disputes, ancestral domain claims)')),
                ('number_of_peoples_organizations', models.PositiveIntegerField(blank=True, help_text="Number of People's Organizations in the community", null=True)),
                ('number_of_cooperatives', models.PositiveIntegerField(blank=True, help_text='Number of Cooperatives in the community', null=True)),
                ('number_of_social_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Social Enterprises in the community', null=True)),
                ('number_of_micro_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Micro-Enterprises (such as Sari-Sari Stores, etc.)', null=True)),
                ('number_of_unbanked_obc', models.PositiveIntegerField(blank=True, help_text='Number of OBC Individuals without Access to Financial Services (Unbanked)', null=True)),
                ('financial_access_level', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to banking and financial services', max_length=20)),
                ('brief_historical_background', models.TextField(blank=True, help_text='Key historical narratives of the community in the area')),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the community was established', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)])),
                ('origin_story', models.TextField(blank=True, help_text='Story of how the community was established')),
                ('migration_history', models.TextField(blank=True, help_text='Migration history and patterns')),
                ('cultural_practices_traditions', models.TextField(blank=True, help_text='Notable customs, traditions, festivals')),
                ('religious_affiliation', models.TextField(blank=True, help_text='Religious affiliation and specific practices')),
                ('traditional_leaders_role', models.TextField(blank=True, help_text='Role of traditional leaders (Imams, Elders, Chieftains)')),
                ('cultural_preservation_efforts', models.TextField(blank=True, help_text='Existing cultural preservation efforts')),
                ('mosques_count', models.PositiveIntegerField(default=0, help_text='Number of mosques accessible to the community')),
                ('madrasah_count', models.PositiveIntegerField(default=0, help_text='Number of madrasah/Islamic schools accessible to the community')),
                ('asatidz_count', models.PositiveIntegerField(default=0, help_text='Number of Asatidz (Islamic teachers/instructors)')),
                ('religious_leaders_count', models.PositiveIntegerField(default=0, help_text='Number of Ulama or religious leaders (Imam, Ustadz, etc.)')),
                ('other_cultural_facilities', models.TextField(blank=True, help_text='Other cultural facilities, artefacts, or assets not listed above')),
                ('formal_political_representation', models.TextField(blank=True, help_text='Presence in Barangay Council, LGU representation')),
                ('informal_leadership_structures', models.TextField(blank=True, help_text='Description of informal leadership structures')),
                ('community_organizations', models.TextField(blank=True, help_text='Community organizations/associations (name, focus, contact)')),
                ('relationship_with_lgu', models.CharField(blank=True, choices=[('collaborative', 'Collaborative'), ('strained', 'Strained'), ('minimal', 'Minimal'), ('good', 'Good'), ('excellent', 'Excellent')], help_text='Relationship with LGU', max_length=20)),
                ('participation_local_governance', models.TextField(blank=True, help_text='Participation in local governance and planning')),
                ('access_government_info', models.TextField(blank=True, help_text='Access to information on government programs')),
                ('governance_policy_challenges', models.TextField(blank=True, help_text='Marginalization, lack of representation issues')),
                ('access_public_services_challenges', models.TextField(blank=True, help_text='Challenges in accessing education, health, infrastructure')),
                ('land_ownership_security_issues', models.TextField(blank=True, help_text='Land ownership and security challenges')),
                ('economic_disparities', models.TextField(blank=True, help_text='Poverty, limited employment, economic challenges')),
                ('social_instability_conflict', models.TextField(blank=True, help_text='Rido, security issues, social conflicts')),
                ('cultural_miscommunication', models.TextField(blank=True, help_text='Cultural miscommunication challenges')),
                ('gender_inequality_issues', models.TextField(blank=True, help_text='Gender inequality, early marriage issues')),
                ('substance_abuse_issues', models.TextField(blank=True, help_text='Drug use, substance abuse issues')),
                ('investment_scam_issues', models.TextField(blank=True, help_text='Investment scams and financial fraud issues')),
                ('environmental_degradation', models.TextField(blank=True, help_text='Mining, illegal fishing, environmental issues')),
                ('other_challenges', models.TextField(blank=True, help_text='Other specific challenges (ISAL education, Halal industry, etc.)')),
                ('challenges_impact', models.TextField(blank=True, help_text='Impact of these challenges on the community')),
                ('key_aspirations', models.TextField(blank=True, help_text='Key community aspirations (poverty eradication, improved services, etc.)')),
                ('infrastructure_priorities', models.TextField(blank=True, help_text='Infrastructure development priorities (roads, water, health, schools)')),
                ('livelihood_program_priorities', models.TextField(blank=True, help_text='Livelihood program priorities (agriculture, fisheries, SMEs, Halal, ecotourism)')),
                ('education_priorities', models.TextField(blank=True, help_text='Education priorities (scholarships, skills training, Madrasah support)')),
                ('healthcare_priorities', models.TextField(blank=True, help_text='Healthcare access priorities')),
                ('cultural_preservation_priorities', models.TextField(blank=True, help_text='Cultural preservation initiative priorities')),
                ('peace_security_priorities', models.TextField(blank=True, help_text='Peace and order/conflict resolution priorities')),
                ('specific_project_proposals', models.TextField(blank=True, help_text='Specific project proposals/ideas from the community')),
                ('unemployment_rate', models.CharField(blank=True, choices=[('', 'Select...'), ('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated unemployment rate within the community', max_length=20)),
                ('needs_assessment_date', models.DateField(blank=True, help_text='Date of last needs assessment', null=True)),
                ('key_findings_last_assessment', models.TextField(blank=True, help_text='Key findings from last needs assessment')),
                ('assessment_data_sources', models.TextField(blank=True, help_text='Data sources (community consultations, surveys, LGU data)')),
                ('identified_gaps', models.TextField(blank=True, help_text='Identified gaps based on assessments')),
                ('key_community_leaders', models.TextField(blank=True, help_text='Key community leader(s)/focal person(s) with contact details')),
                ('relevant_lgu_officials', models.TextField(blank=True, help_text='Relevant LGU official(s) and their contact information')),
                ('community_leader', models.CharField(blank=True, help_text='Name of the primary community leader', max_length=255)),
                ('leader_contact', models.CharField(blank=True, help_text='Contact information for community leader', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this community record is active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether this record has been archived instead of fully removed.')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was archived for removal.', null=True)),
                ('name', models.CharField(blank=True, help_text='Primary community name (legacy field retained for compatibility)', max_length=255)),
                ('population', models.PositiveIntegerField(blank=True, help_text='Total population of the community (legacy field retained for compatibility)', null=True)),
                ('primary_language', models.CharField(blank=True, help_text='Primary language spoken in the community (legacy field retained for compatibility)', max_length=100)),
                ('other_languages', models.CharField(blank=True, help_text='Other languages spoken (comma-separated, legacy field retained for compatibility)', max_length=255)),
                ('cultural_background', models.TextField(blank=True, help_text='Cultural background and traditions (legacy field retained for compatibility)')),
                ('religious_practices', models.TextField(blank=True, help_text='Religious practices and observances (legacy field retained for compatibility)')),
                ('priority_needs', models.TextField(blank=True, help_text='Priority needs identified for the community (legacy field retained for compatibility)')),
            ],
            options={
                'verbose_name': 'OBC Community',
                'verbose_name_plural': 'OBC Communities',
                'db_table': 'communities_obc_community',
                'ordering': ['barangay__municipality__province__region__code', 'barangay__municipality__province__name', 'barangay__municipality__name', 'barangay__name'],
            },
        ),
        migrations.CreateModel(
            name='ProvinceCoverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obc_id', models.CharField(blank=True, default='', help_text='Unique identifier for the OBC (e.g., R12-SK-PAL-001)', max_length=50)),
                ('source_document_reference', models.TextField(blank=True, help_text="Document source and page number (e.g., 'OBC MANA Region 12, p.7')")),
                ('community_names', models.TextField(blank=True, default='', help_text='Common name(s) used to refer to the community (comma-separated)')),
                ('purok_sitio', models.CharField(blank=True, help_text='Specific Purok/Sitio within the barangay', max_length=255)),
                ('specific_location', models.CharField(blank=True, help_text='Additional specific location details', max_length=255)),
                ('settlement_type', models.CharField(choices=[('village', 'Village'), ('subdivision', 'Subdivision'), ('sitio', 'Sitio'), ('purok', 'Purok'), ('compound', 'Compound'), ('dispersed', 'Dispersed Settlement')], default='village', help_text='Type of settlement', max_length=20)),
                ('latitude', models.FloatField(blank=True, help_text='Latitude coordinate for mapping', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='Longitude coordinate for mapping', null=True)),
                ('proximity_to_barmm', models.CharField(blank=True, choices=[('adjacent', 'Adjacent to BARMM'), ('near', 'Near BARMM'), ('distant', 'Distant from BARMM')], help_text='Proximity to BARMM boundaries', max_length=20)),
                ('estimated_obc_population', models.PositiveIntegerField(blank=True, help_text='Number of individuals identified as part of the OBC', null=True)),
                ('total_barangay_population', models.PositiveIntegerField(blank=True, help_text='Total barangay population for context', null=True)),
                ('households', models.PositiveIntegerField(blank=True, help_text='Number of households in the community', null=True)),
                ('families', models.PositiveIntegerField(blank=True, help_text='Number of families in the community', null=True)),
                ('primary_ethnolinguistic_group', models.CharField(blank=True, choices=[('badjao', 'Badjao'), ('iranun', 'Iranun'), ('jama_mapun', 'Jama Mapun'), ('kagan_kalagan', 'Kagan/Kalagan'), ('kolibugan', 'Kolibugan'), ('maguindanaon', 'Maguindanaon'), ('meranaw', 'Meranaw'), ('molbog', 'Molbog'), ('palawani', 'Palawani'), ('sama', 'Sama'), ('sangil', 'Sangil'), ('tausug', 'Tausug'), ('yakan', 'Yakan'), ('other', 'Other')], help_text='Primary ethnolinguistic group', max_length=50)),
                ('other_ethnolinguistic_groups', models.TextField(blank=True, help_text='Other ethnolinguistic groups present (comma-separated)')),
                ('languages_spoken', models.TextField(blank=True, help_text='Languages spoken in the community (comma-separated)')),
                ('children_0_9', models.PositiveIntegerField(blank=True, help_text='Number of children aged 0-9', null=True)),
                ('adolescents_10_14', models.PositiveIntegerField(blank=True, help_text='Number of adolescents aged 10-14', null=True)),
                ('youth_15_30', models.PositiveIntegerField(blank=True, help_text='Number of youth aged 15-30', null=True)),
                ('adults_31_59', models.PositiveIntegerField(blank=True, help_text='Number of adults aged 31-59', null=True)),
                ('seniors_60_plus', models.PositiveIntegerField(blank=True, help_text='Number of seniors aged 60 and above', null=True)),
                ('women_count', models.PositiveIntegerField(blank=True, help_text='Number of women in the community', null=True)),
                ('solo_parents_count', models.PositiveIntegerField(blank=True, help_text='Number of solo parents', null=True)),
                ('pwd_count', models.PositiveIntegerField(blank=True, help_text='Number of Persons with Disabilities (PWDs)', null=True)),
                ('farmers_count', models.PositiveIntegerField(blank=True, help_text='Number of farmers', null=True)),
                ('fisherfolk_count', models.PositiveIntegerField(blank=True, help_text='Number of fisherfolk', null=True)),
                ('indigenous_peoples_count', models.PositiveIntegerField(blank=True, help_text='Number of Indigenous Peoples (if distinct within OBC)', null=True)),
                ('idps_count', models.PositiveIntegerField(blank=True, help_text='Number of Internally Displaced Persons (IDPs)', null=True)),
                ('csos_count', models.PositiveIntegerField(blank=True, help_text='Number of Civil Society Organizations (CSOs) in the community', null=True)),
                ('associations_count', models.PositiveIntegerField(blank=True, help_text='Number of Associations in the community', null=True)),
                ('unemployed_count', models.PositiveIntegerField(blank=True, help_text='Number of unemployed individuals', null=True)),
                ('migrants_transients_count', models.PositiveIntegerField(blank=True, help_text='Number of migrants/transients', null=True)),
                ('other_vulnerable_sectors', models.TextField(blank=True, help_text='Other vulnerable sectors not listed above')),
                ('primary_livelihoods', models.TextField(blank=True, help_text='Primary livelihoods (e.g., Rice Farming, Coconut Production, Fishing)')),
                ('secondary_livelihoods', models.TextField(blank=True, help_text='Secondary livelihoods in the community')),
                ('estimated_poverty_incidence', models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated poverty incidence within OBC', max_length=20)),
                ('access_formal_education', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to formal schools', max_length=20)),
                ('access_als', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Alternative Learning System (ALS)', max_length=20)),
                ('access_madrasah', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to Madrasah/Islamic education', max_length=20)),
                ('access_healthcare', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to healthcare facilities', max_length=20)),
                ('access_clean_water', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to clean water supply', max_length=20)),
                ('access_sanitation', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to sanitation facilities', max_length=20)),
                ('access_electricity', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to electricity', max_length=20)),
                ('access_roads_transport', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to roads and transportation', max_length=20)),
                ('access_communication', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to communication (mobile/internet)', max_length=20)),
                ('land_tenure_issues', models.TextField(blank=True, help_text='Land tenure issues (lack of titles, disputes, ancestral domain claims)')),
                ('number_of_peoples_organizations', models.PositiveIntegerField(blank=True, help_text="Number of People's Organizations in the community", null=True)),
                ('number_of_cooperatives', models.PositiveIntegerField(blank=True, help_text='Number of Cooperatives in the community', null=True)),
                ('number_of_social_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Social Enterprises in the community', null=True)),
                ('number_of_micro_enterprises', models.PositiveIntegerField(blank=True, help_text='Number of Micro-Enterprises (such as Sari-Sari Stores, etc.)', null=True)),
                ('number_of_unbanked_obc', models.PositiveIntegerField(blank=True, help_text='Number of OBC Individuals without Access to Financial Services (Unbanked)', null=True)),
                ('financial_access_level', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('none', 'None')], help_text='Access to banking and financial services', max_length=20)),
                ('brief_historical_background', models.TextField(blank=True, help_text='Key historical narratives of the community in the area')),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the community was established', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2030)])),
                ('origin_story', models.TextField(blank=True, help_text='Story of how the community was established')),
                ('migration_history', models.TextField(blank=True, help_text='Migration history and patterns')),
                ('cultural_practices_traditions', models.TextField(blank=True, help_text='Notable customs, traditions, festivals')),
                ('religious_affiliation', models.TextField(blank=True, help_text='Religious affiliation and specific practices')),
                ('traditional_leaders_role', models.TextField(blank=True, help_text='Role of traditional leaders (Imams, Elders, Chieftains)')),
                ('cultural_preservation_efforts', models.TextField(blank=True, help_text='Existing cultural preservation efforts')),
                ('mosques_count', models.PositiveIntegerField(default=0, help_text='Number of mosques accessible to the community')),
                ('madrasah_count', models.PositiveIntegerField(default=0, help_text='Number of madrasah/Islamic schools accessible to the community')),
                ('asatidz_count', models.PositiveIntegerField(default=0, help_text='Number of Asatidz (Islamic teachers/instructors)')),
                ('religious_leaders_count', models.PositiveIntegerField(default=0, help_text='Number of Ulama or religious leaders (Imam, Ustadz, etc.)')),
                ('other_cultural_facilities', models.TextField(blank=True, help_text='Other cultural facilities, artefacts, or assets not listed above')),
                ('formal_political_representation', models.TextField(blank=True, help_text='Presence in Barangay Council, LGU representation')),
                ('informal_leadership_structures', models.TextField(blank=True, help_text='Description of informal leadership structures')),
                ('community_organizations', models.TextField(blank=True, help_text='Community organizations/associations (name, focus, contact)')),
                ('relationship_with_lgu', models.CharField(blank=True, choices=[('collaborative', 'Collaborative'), ('strained', 'Strained'), ('minimal', 'Minimal'), ('good', 'Good'), ('excellent', 'Excellent')], help_text='Relationship with LGU', max_length=20)),
                ('participation_local_governance', models.TextField(blank=True, help_text='Participation in local governance and planning')),
                ('access_government_info', models.TextField(blank=True, help_text='Access to information on government programs')),
                ('governance_policy_challenges', models.TextField(blank=True, help_text='Marginalization, lack of representation issues')),
                ('access_public_services_challenges', models.TextField(blank=True, help_text='Challenges in accessing education, health, infrastructure')),
                ('land_ownership_security_issues', models.TextField(blank=True, help_text='Land ownership and security challenges')),
                ('economic_disparities', models.TextField(blank=True, help_text='Poverty, limited employment, economic challenges')),
                ('social_instability_conflict', models.TextField(blank=True, help_text='Rido, security issues, social conflicts')),
                ('cultural_miscommunication', models.TextField(blank=True, help_text='Cultural miscommunication challenges')),
                ('gender_inequality_issues', models.TextField(blank=True, help_text='Gender inequality, early marriage issues')),
                ('substance_abuse_issues', models.TextField(blank=True, help_text='Drug use, substance abuse issues')),
                ('investment_scam_issues', models.TextField(blank=True, help_text='Investment scams and financial fraud issues')),
                ('environmental_degradation', models.TextField(blank=True, help_text='Mining, illegal fishing, environmental issues')),
                ('other_challenges', models.TextField(blank=True, help_text='Other specific challenges (ISAL education, Halal industry, etc.)')),
                ('challenges_impact', models.TextField(blank=True, help_text='Impact of these challenges on the community')),
                ('key_aspirations', models.TextField(blank=True, help_text='Key community aspirations (poverty eradication, improved services, etc.)')),
                ('infrastructure_priorities', models.TextField(blank=True, help_text='Infrastructure development priorities (roads, water, health, schools)')),
                ('livelihood_program_priorities', models.TextField(blank=True, help_text='Livelihood program priorities (agriculture, fisheries, SMEs, Halal, ecotourism)')),
                ('education_priorities', models.TextField(blank=True, help_text='Education priorities (scholarships, skills training, Madrasah support)')),
                ('healthcare_priorities', models.TextField(blank=True, help_text='Healthcare access priorities')),
                ('cultural_preservation_priorities', models.TextField(blank=True, help_text='Cultural preservation initiative priorities')),
                ('peace_security_priorities', models.TextField(blank=True, help_text='Peace and order/conflict resolution priorities')),
                ('specific_project_proposals', models.TextField(blank=True, help_text='Specific project proposals/ideas from the community')),
                ('unemployment_rate', models.CharField(blank=True, choices=[('', 'Select...'), ('unknown', 'Unknown'), ('very_low', 'Very Low (<10%)'), ('low', 'Low (10-20%)'), ('moderate', 'Moderate (20-30%)'), ('high', 'High (30-40%)'), ('very_high', 'Very High (40-50%)'), ('extremely_high', 'Extremely High (>50%)')], help_text='Estimated unemployment rate within the community', max_length=20)),
                ('needs_assessment_date', models.DateField(blank=True, help_text='Date of last needs assessment', null=True)),
                ('key_findings_last_assessment', models.TextField(blank=True, help_text='Key findings from last needs assessment')),
                ('assessment_data_sources', models.TextField(blank=True, help_text='Data sources (community consultations, surveys, LGU data)')),
                ('identified_gaps', models.TextField(blank=True, help_text='Identified gaps based on assessments')),
                ('key_community_leaders', models.TextField(blank=True, help_text='Key community leader(s)/focal person(s) with contact details')),
                ('relevant_lgu_officials', models.TextField(blank=True, help_text='Relevant LGU official(s) and their contact information')),
                ('community_leader', models.CharField(blank=True, help_text='Name of the primary community leader', max_length=255)),
                ('leader_contact', models.CharField(blank=True, help_text='Contact information for community leader', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this community record is active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates whether this record has been archived instead of fully removed.')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was archived for removal.', null=True)),
                ('total_municipalities', models.PositiveIntegerField(blank=True, help_text='Number of municipalities or cities with OBC coverage', null=True)),
                ('total_obc_communities', models.PositiveIntegerField(blank=True, help_text='Total barangay-level OBC communities aggregated from municipalities', null=True)),
                ('key_municipalities', models.TextField(blank=True, help_text='Municipalities with notable Bangsamoro presence (comma-separated)')),
                ('existing_support_programs', models.TextField(blank=True, help_text='Active support programs at the provincial level')),
                ('auto_sync', models.BooleanField(default=True, help_text='Keep provincial totals in sync with municipal coverage records')),
                ('is_submitted', models.BooleanField(default=False, help_text='Whether this record has been submitted by a MANA participant (becomes read-only)')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was submitted', null=True)),
            ],
            options={
                'verbose_name': 'Bangsamoro Province OBC',
                'verbose_name_plural': 'Bangsamoro Province OBCs',
                'ordering': ['province__region__name', 'province__name'],
            },
        ),
        migrations.CreateModel(
            name='SpatialDataPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or identifier of the point', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the point')),
                ('point_type', models.CharField(choices=[('community_center', 'Community Center'), ('health_facility', 'Health Facility'), ('school', 'Educational Facility'), ('mosque', 'Mosque/Religious Site'), ('government_office', 'Government Office'), ('market', 'Market/Commerce'), ('infrastructure', 'Infrastructure'), ('natural_resource', 'Natural Resource'), ('cultural_site', 'Cultural Site'), ('hazard_area', 'Hazard/Risk Area'), ('project_site', 'Project Location'), ('assessment_point', 'Assessment Point')], help_text='Type of spatial point', max_length=25)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('planned', 'Planned'), ('under_construction', 'Under Construction'), ('abandoned', 'Abandoned'), ('needs_verification', 'Needs Verification')], default='active', help_text='Current status of the point', max_length=20)),
                ('latitude', models.FloatField(help_text='Latitude coordinate')),
                ('longitude', models.FloatField(help_text='Longitude coordinate')),
                ('elevation', models.FloatField(blank=True, help_text='Elevation in meters above sea level', null=True)),
                ('accuracy_meters', models.FloatField(blank=True, help_text='GPS accuracy in meters', null=True)),
                ('attributes', models.JSONField(blank=True, help_text='Additional attributes and properties (JSON format)', null=True)),
                ('collected_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when point was collected')),
                ('collection_method', models.CharField(blank=True, help_text='Method used to collect this point', max_length=50)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this point has been verified')),
                ('verification_date', models.DateTimeField(blank=True, help_text='Date when point was verified', null=True)),
                ('photo_url', models.URLField(blank=True, help_text='URL to photo of the location')),
                ('media_files', models.JSONField(blank=True, help_text='References to associated media files', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-collected_date'],
            },
        ),
        migrations.CreateModel(
            name='Stakeholder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='Full name of the stakeholder', max_length=255)),
                ('nickname', models.CharField(blank=True, help_text='Common nickname or title (e.g., Ustadz Abdullah)', max_length=100)),
                ('stakeholder_type', models.CharField(choices=[('community_leader', 'Community Leader'), ('barangay_captain', 'Barangay Captain'), ('tribal_leader', 'Tribal Leader/Datu'), ('ulama', 'Ulama'), ('imam', 'Imam/Khatib'), ('ustadz', 'Ustadz/Religious Teacher'), ('arabic_teacher', 'ALIVE/Arabic Teacher'), ('madrasa_teacher', 'Madrasah Teacher'), ('youth_leader', 'Youth Leader'), ('women_leader', 'Women Leader'), ('business_leader', 'Business Leader'), ('cooperative_leader', 'Cooperative Leader'), ('health_worker', 'Community Health Worker'), ('volunteer', 'Community Volunteer'), ('other', 'Other')], help_text='Type/role of stakeholder in the community', max_length=50)),
                ('position', models.CharField(blank=True, help_text='Official position or title held', max_length=255)),
                ('organization', models.CharField(blank=True, help_text='Organization or institution they represent', max_length=255)),
                ('responsibilities', models.TextField(blank=True, help_text='Key responsibilities and duties')),
                ('contact_number', models.CharField(blank=True, help_text='Primary contact number', max_length=20)),
                ('alternate_contact', models.CharField(blank=True, help_text='Alternate contact number', max_length=20)),
                ('email', models.EmailField(blank=True, help_text='Email address', max_length=254)),
                ('address', models.TextField(blank=True, help_text='Physical address within the community')),
                ('influence_level', models.CharField(choices=[('very_high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('emerging', 'Emerging')], default='medium', help_text='Level of influence within the community', max_length=20)),
                ('engagement_level', models.CharField(choices=[('very_active', 'Very Active'), ('active', 'Active'), ('moderate', 'Moderate'), ('limited', 'Limited'), ('inactive', 'Inactive')], default='active', help_text='Level of engagement in community activities', max_length=20)),
                ('areas_of_influence', models.TextField(blank=True, help_text='Specific areas where they have influence (e.g., youth, religious matters, livelihood)')),
                ('age', models.PositiveIntegerField(blank=True, help_text='Age of the stakeholder', null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)])),
                ('educational_background', models.CharField(blank=True, help_text='Educational background and qualifications', max_length=255)),
                ('cultural_background', models.CharField(blank=True, help_text='Cultural or ethnic background', max_length=255)),
                ('languages_spoken', models.CharField(blank=True, help_text='Languages spoken (comma-separated)', max_length=255)),
                ('since_year', models.PositiveIntegerField(blank=True, help_text='Year they started serving in this role', null=True, validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(2030)])),
                ('years_in_community', models.PositiveIntegerField(blank=True, help_text='Number of years living in this community', null=True)),
                ('previous_roles', models.TextField(blank=True, help_text='Previous roles or positions held in the community')),
                ('special_skills', models.TextField(blank=True, help_text='Special skills or expertise they bring to the community')),
                ('networks', models.TextField(blank=True, help_text='External networks or connections they have')),
                ('achievements', models.TextField(blank=True, help_text='Notable achievements or contributions to the community')),
                ('challenges_faced', models.TextField(blank=True, help_text='Challenges they face in their role')),
                ('support_needed', models.TextField(blank=True, help_text='Support or resources they need to be more effective')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this stakeholder is currently active')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the stakeholder information has been verified')),
                ('verification_date', models.DateField(blank=True, help_text='Date when information was last verified', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the stakeholder')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Community Stakeholder',
                'verbose_name_plural': 'Community Stakeholders',
                'db_table': 'communities_stakeholder',
                'ordering': ['community__barangay__name', 'stakeholder_type', 'full_name'],
            },
        ),
        migrations.CreateModel(
            name='StakeholderEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement_type', models.CharField(choices=[('meeting', 'Community Meeting'), ('consultation', 'Consultation'), ('training', 'Training/Workshop'), ('assessment', 'Assessment/Survey'), ('project_activity', 'Project Activity'), ('religious_activity', 'Religious Activity'), ('cultural_event', 'Cultural Event'), ('emergency_response', 'Emergency Response'), ('coordination', 'Coordination Meeting'), ('other', 'Other')], help_text='Type of engagement activity', max_length=50)),
                ('title', models.CharField(help_text='Title or subject of the engagement', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the engagement')),
                ('date', models.DateField(help_text='Date of the engagement')),
                ('duration_hours', models.DecimalField(blank=True, decimal_places=1, help_text='Duration in hours', max_digits=4, null=True)),
                ('location', models.CharField(blank=True, help_text='Location where engagement took place', max_length=255)),
                ('participants_count', models.PositiveIntegerField(blank=True, help_text='Number of participants involved', null=True)),
                ('outcome', models.CharField(choices=[('very_positive', 'Very Positive'), ('positive', 'Positive'), ('neutral', 'Neutral'), ('challenging', 'Challenging'), ('negative', 'Negative')], default='positive', help_text='Overall outcome of the engagement', max_length=20)),
                ('key_points', models.TextField(blank=True, help_text='Key points discussed or outcomes achieved')),
                ('action_items', models.TextField(blank=True, help_text='Action items or follow-up tasks identified')),
                ('challenges_encountered', models.TextField(blank=True, help_text='Challenges or issues encountered')),
                ('stakeholder_feedback', models.TextField(blank=True, help_text='Feedback provided by the stakeholder')),
                ('follow_up_needed', models.BooleanField(default=False, help_text='Whether follow-up is needed')),
                ('follow_up_date', models.DateField(blank=True, help_text='Date for follow-up if needed', null=True)),
                ('documented_by', models.CharField(help_text='Person who documented this engagement', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Stakeholder Engagement',
                'verbose_name_plural': 'Stakeholder Engagements',
                'db_table': 'communities_stakeholder_engagement',
                'ordering': ['-date', 'stakeholder__full_name'],
            },
        ),
        migrations.CreateModel(
            name='CommunityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('event_type', models.CharField(choices=[('cultural', 'Cultural Celebration'), ('religious', 'Religious Observance'), ('meeting', 'Community Meeting'), ('training', 'Community Training'), ('disaster', 'Disaster/Emergency'), ('other', 'Other')], max_length=30)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('all_day', models.BooleanField(default=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('organizer', models.CharField(blank=True, max_length=255)),
                ('is_public', models.BooleanField(default=True, help_text='Show on public calendar')),
                ('is_recurring', models.BooleanField(default=False, help_text='Whether this is a recurring event')),
                ('is_recurrence_exception', models.BooleanField(default=False, help_text='True if this instance was edited separately')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_community_events', to=settings.AUTH_USER_MODEL)),
                ('recurrence_parent', models.ForeignKey(blank=True, help_text='Parent event if this is a recurrence instance', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_instances', to='communities.communityevent')),
                ('recurrence_pattern', models.ForeignKey(blank=True, help_text='Recurrence pattern configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recurring_community_events', to='common.recurringeventpattern')),
            ],
            options={
                'verbose_name': 'Community Event',
                'verbose_name_plural': 'Community Events',
                'db_table': 'communities_community_event',
                'ordering': ['-start_date'],
            },
        ),
    ]
