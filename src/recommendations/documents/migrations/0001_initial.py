# Generated by Django 5.2.7 on 2025-10-24 14:18

import django.core.validators
import django.db.models.deletion
import recommendations.documents.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('communities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the document category', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of what documents belong in this category')),
                ('icon', models.CharField(blank=True, help_text='CSS icon class for this category', max_length=50)),
                ('color', models.CharField(blank=True, default='#007bff', help_text='Hex color code for this category', max_length=7)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this category is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document Category',
                'verbose_name_plural': 'Document Categories',
                'db_table': 'documents_category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the document', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the document')),
                ('document_type', models.CharField(blank=True, choices=[('report', 'Assessment Report'), ('correspondence', 'Correspondence'), ('profile', 'Community Profile'), ('policy', 'Policy Document'), ('moa', 'Memorandum of Agreement'), ('minutes', 'Meeting Minutes'), ('presentation', 'Presentation'), ('photo', 'Photograph'), ('form', 'Form/Template'), ('certificate', 'Certificate'), ('legal', 'Legal Document'), ('financial', 'Financial Document'), ('research', 'Research Document'), ('other', 'Other')], default='other', help_text='Type of document', max_length=20)),
                ('file', models.FileField(help_text='Upload the document file', upload_to=recommendations.documents.models.document_upload_path, validators=[recommendations.documents.models.validate_file_size, recommendations.documents.models.validate_file_mime_type, django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'rtf', 'odt', 'ods', 'odp', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'mp4', 'avi', 'mov', 'wmv', 'flv', 'mp3', 'wav', 'ogg', 'zip', 'rar', '7z'])])),
                ('original_filename', models.CharField(blank=True, help_text='Original filename provided during upload', max_length=255)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('file_type', models.CharField(blank=True, help_text='MIME type of the file', max_length=100)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for categorization and search', max_length=500)),
                ('author', models.CharField(blank=True, help_text='Author of the document (if different from uploader)', max_length=255)),
                ('language', models.CharField(blank=True, default='en', help_text='Language of the document', max_length=10)),
                ('version', models.CharField(default='1.0', help_text='Version number of the document', max_length=20)),
                ('is_latest_version', models.BooleanField(default=True, help_text='Whether this is the latest version')),
                ('confidentiality_level', models.CharField(choices=[('public', 'Public'), ('internal', 'Internal Use'), ('restricted', 'Restricted'), ('confidential', 'Confidential'), ('secret', 'Secret')], default='internal', help_text='Confidentiality level of the document', max_length=20)),
                ('allowed_user_types', models.CharField(blank=True, help_text='Comma-separated list of user types allowed to access this document', max_length=255)),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether accessing this document requires approval')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('published', 'Published'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='draft', help_text='Current status of the document', max_length=20)),
                ('document_date', models.DateField(blank=True, help_text='Date when the document was created/issued', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Date when this document expires', null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When this document was last reviewed', null=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When this document was approved', null=True)),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Number of times this document has been downloaded')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times this document has been viewed')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this document is featured')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this document is active')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this document')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_documents', to=settings.AUTH_USER_MODEL)),
                ('community', models.ForeignKey(blank=True, help_text='Community this document relates to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='communities.obccommunity')),
                ('parent_document', models.ForeignKey(blank=True, help_text='Parent document if this is a version', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='recommendations.documents.document')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this document', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='Category this document belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='recommendations.documents.documentcategory')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'documents_document',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(help_text='Comment text')),
                ('is_internal', models.BooleanField(default=False, help_text='Whether this is an internal comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='recommendations.documents.document')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='recommendations.documents.documentcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document Comment',
                'verbose_name_plural': 'Document Comments',
                'db_table': 'documents_comment',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('view', 'View'), ('download', 'Download'), ('edit', 'Edit'), ('delete', 'Delete'), ('share', 'Share'), ('upload', 'Upload')], help_text='Type of access performed', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the access')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this access grant is currently active')),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='recommendations.documents.document')),
                ('granted_by', models.ForeignKey(blank=True, help_text='User who granted this access, when applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_document_accesses', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_accesses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document Access',
                'verbose_name_plural': 'Document Accesses',
                'db_table': 'documents_access',
                'ordering': ['-accessed_at'],
                'indexes': [models.Index(fields=['document', 'access_type'], name='documents_a_documen_3810b0_idx'), models.Index(fields=['user', 'accessed_at'], name='documents_a_user_id_a04d1a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['document_type', 'status'], name='documents_d_documen_80b3b1_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['community', 'document_type'], name='documents_d_communi_202dbe_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['confidentiality_level'], name='documents_d_confide_81a68b_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['is_latest_version', 'parent_document'], name='documents_d_is_late_44395d_idx'),
        ),
    ]
