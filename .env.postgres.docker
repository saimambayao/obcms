# OBCMS Environment Configuration - Docker PostgreSQL 17
# Copy to .env to use Docker PostgreSQL database
# Usage: cp .env.postgres.docker .env && python src/manage.py runserver
#
# Prerequisites:
#   - Docker installed and running
#   - PostgreSQL container started: docker-compose up -d db
#   - Local PostgreSQL stopped (to avoid port conflict): brew services stop postgresql@17

# Django Settings
SECRET_KEY=django-insecure-change-this-in-production-minimum-50-characters
DEBUG=1
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Database Configuration - Docker PostgreSQL 17
# Connects to PostgreSQL running in Docker container (port 5432 mapped to host)
DATABASE_URL=postgres://obcms:obcms_dev_password@localhost:5432/obcms

# PostgreSQL Docker credentials (used by docker-compose.yml)
POSTGRES_DB=obcms
POSTGRES_USER=obcms
POSTGRES_PASSWORD=obcms_dev_password

# Redis & Celery Configuration
REDIS_URL=redis://localhost:6379/0
CELERY_BROKER_URL=redis://localhost:6379/0

# Email Configuration
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# Site Configuration
SITE_NAME=OBC Management System
SITE_DESCRIPTION=Other Bangsamoro Communities Management System

# Google AI Services (Gemini API)
GOOGLE_API_KEY=AIzaSyCkOiwSPnWRHDIyRPMW0F43PBc8Uoe18G0

# Logging Level
LOG_LEVEL=INFO

# WorkItem Unified Hierarchy System
USE_WORKITEM_MODEL=1
DUAL_WRITE_ENABLED=1
LEGACY_MODELS_READONLY=0
USE_UNIFIED_CALENDAR=1
WORKITEM_MIGRATION_AUTO_FIX=0
WORKITEM_MIGRATION_STRICT_MODE=0
