# BMMS Phase 8 Full Rollout - Scaled Production Infrastructure
# Supports 44 MOAs, 700-1100 concurrent users
# High availability, horizontal scaling, monitoring, and automatic failover

services:
  # ============================================================================
  # DATABASE LAYER (PostgreSQL + PgBouncer + Replicas)
  # ============================================================================

  # PostgreSQL Primary Database
  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      # Performance tuning for Phase 8 (see capacity_planning.py)
      POSTGRES_MAX_CONNECTIONS: 500
      POSTGRES_SHARED_BUFFERS: 4GB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 12GB
      POSTGRES_WORK_MEM: 16MB
      POSTGRES_MAINTENANCE_WORK_MEM: 512MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    command: >
      postgres
      -c max_connections=500
      -c shared_buffers=4GB
      -c effective_cache_size=12GB
      -c work_mem=16MB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - obcms_network

  # PostgreSQL Read Replica 1
  db-replica1:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/replica1
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
    command: >
      postgres
      -c hot_standby=on
      -c max_connections=500
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # PostgreSQL Read Replica 2
  db-replica2:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/replica2
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
    command: >
      postgres
      -c hot_standby=on
      -c max_connections=500
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # PgBouncer Connection Pooler
  pgbouncer:
    image: edoburu/pgbouncer:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 50
    volumes:
      - ./config/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./config/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "6432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # ============================================================================
  # CACHE LAYER (Redis Cluster with Sentinel)
  # ============================================================================

  # Redis Master
  redis-master:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_master_data:/data
      - ./config/redis/master.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # Redis Replica 1
  redis-replica1:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --replicaof redis-master 6379
    volumes:
      - redis_replica1_data:/data
      - ./config/redis/replica.conf:/usr/local/etc/redis/redis.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # Redis Replica 2
  redis-replica2:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --replicaof redis-master 6379
    volumes:
      - redis_replica2_data:/data
      - ./config/redis/replica.conf:/usr/local/etc/redis/redis.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - obcms_network

  # Redis Sentinel 1 (Automatic Failover)
  redis-sentinel1:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./config/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - obcms_network

  # Redis Sentinel 2
  redis-sentinel2:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./config/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - obcms_network

  # Redis Sentinel 3
  redis-sentinel3:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./config/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - obcms_network

  # ============================================================================
  # APPLICATION LAYER (Django + Celery - Scaled)
  # ============================================================================

  # Database Migration Job (runs once per deployment)
  migrate:
    build:
      context: .
      target: production
    command: >
      sh -c "cd src &&
             echo '=== Running deployment checks ===' &&
             python manage.py check --deploy &&
             echo '=== Running database migrations ===' &&
             python manage.py migrate --noinput &&
             echo '=== Collecting static files ===' &&
             python manage.py collectstatic --noinput &&
             echo '=== Migration complete ==='  "
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.smtp.EmailBackend}
      - EMAIL_HOST=${EMAIL_HOST:-}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-1}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER:-}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    restart: "no"
    networks:
      - obcms_network

  # Django Web Application Server 1
  web1:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-17}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
      - GUNICORN_LOG_LEVEL=${GUNICORN_LOG_LEVEL:-info}
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network

  # Django Web Application Server 2
  web2:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-17}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network

  # Django Web Application Server 3
  web3:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-17}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network

  # Django Web Application Server 4
  web4:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-17}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
    depends_on:
      migrate:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - obcms_network

  # ============================================================================
  # CELERY WORKERS (Background Tasks)
  # ============================================================================

  # Celery Worker 1 (General Tasks)
  celery-worker1:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "cd src &&
             celery -A obc_management worker
             --loglevel=info
             --concurrency=4
             --max-tasks-per-child=1000
             --time-limit=300
             --soft-time-limit=240"
    stop_grace_period: 60s
    networks:
      - obcms_network

  # Celery Worker 2 (General Tasks)
  celery-worker2:
    build:
      context: .
      target: production
    restart: unless-stopped
    volumes:
      - media_volume:/app/src/media
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "cd src &&
             celery -A obc_management worker
             --loglevel=info
             --concurrency=4
             --max-tasks-per-child=1000
             --time-limit=300
             --soft-time-limit=240"
    stop_grace_period: 60s
    networks:
      - obcms_network

  # Celery Beat (Scheduled Tasks)
  celery-beat:
    build:
      context: .
      target: production
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=obc_management.settings.production
      - DEBUG=0
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
      - REDIS_URL=redis://redis-master:6379/0
      - CELERY_BROKER_URL=redis://redis-master:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - BASE_URL=${BASE_URL}
    depends_on:
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "cd src &&
             celery -A obc_management beat --loglevel=info"
    stop_grace_period: 30s
    networks:
      - obcms_network

  # ============================================================================
  # LOAD BALANCER & REVERSE PROXY (Nginx)
  # ============================================================================

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/load_balancer.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      web1:
        condition: service_healthy
      web2:
        condition: service_healthy
      web3:
        condition: service_healthy
      web4:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - obcms_network

  # ============================================================================
  # MONITORING STACK (Prometheus + Grafana)
  # ============================================================================

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - obcms_network

  # Grafana (Monitoring Dashboards)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - obcms_network

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - obcms_network

  # Redis Exporter (Redis Metrics)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis-master:6379
    networks:
      - obcms_network

  # Postgres Exporter (PostgreSQL Metrics)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - obcms_network

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  postgres_replica1_data:
    driver: local
  postgres_replica2_data:
    driver: local
  redis_master_data:
    driver: local
  redis_replica1_data:
    driver: local
  redis_replica2_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  obcms_network:
    driver: bridge
