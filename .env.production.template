# OBCMS Production Environment Configuration Template
# Copy this file to .env.production and configure your production values

# ============================================================================
# CRITICAL SECURITY SETTINGS
# ============================================================================

# Django Secret Key (REQUIRED - GENERATE NEW KEY FOR PRODUCTION)
# Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=CHANGE-THIS-TO-A-RANDOM-50-CHARACTER-STRING-FOR-PRODUCTION

# Debug Mode (MUST be 0 in production)
DEBUG=0

# Allowed Hosts (comma-separated list of your domain names)
# Example: yourdomain.com,www.yourdomain.com
ALLOWED_HOSTS=localhost,127.0.0.1

# CSRF Trusted Origins (comma-separated list with https://)
# Example: https://yourdomain.com,https://www.yourdomain.com
CSRF_TRUSTED_ORIGINS=https://localhost

# ============================================================================
# DATABASE CONFIGURATION (PostgreSQL)
# ============================================================================

# PostgreSQL Database Name
POSTGRES_DB=obcms_prod

# PostgreSQL Username
POSTGRES_USER=obcms_user

# PostgreSQL Password (REQUIRED - CHANGE THIS)
POSTGRES_PASSWORD=CHANGE-THIS-TO-SECURE-PASSWORD-MINIMUM-32-CHARACTERS

# Database URL (constructed from above values)
# Format: postgres://USER:PASSWORD@HOST:PORT/DATABASE
# For Docker: use 'db' as hostname
# For external DB: use actual hostname/IP
DATABASE_URL=postgres://obcms_user:CHANGE-THIS-TO-SECURE-PASSWORD-MINIMUM-32-CHARACTERS@db:5432/obcms_prod

# ============================================================================
# REDIS CONFIGURATION
# ============================================================================

# Redis URL (for caching and Celery broker)
# For Docker: use 'redis' as hostname
REDIS_URL=redis://redis:6379/0
CELERY_BROKER_URL=redis://redis:6379/0

# ============================================================================
# EMAIL CONFIGURATION (SMTP)
# ============================================================================

# Email Backend
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP Server Configuration
EMAIL_HOST=smtp.yourdomain.com
EMAIL_PORT=587
EMAIL_USE_TLS=1

# SMTP Authentication
EMAIL_HOST_USER=noreply@yourdomain.com
EMAIL_HOST_PASSWORD=CHANGE-THIS-TO-EMAIL-PASSWORD

# Default From Email
DEFAULT_FROM_EMAIL=OBCMS <noreply@yourdomain.com>

# ============================================================================
# SITE CONFIGURATION
# ============================================================================

# Site Name and Description
SITE_NAME=OBC Management System
SITE_DESCRIPTION=Other Bangsamoro Communities Management System

# ============================================================================
# GUNICORN CONFIGURATION (Optional Overrides)
# ============================================================================

# Number of Gunicorn workers (default: CPU cores * 2 + 1)
# GUNICORN_WORKERS=5

# Gunicorn worker class (default: sync)
# Options: sync, gthread, gevent, uvicorn.workers.UvicornWorker
# GUNICORN_WORKER_CLASS=sync

# Threads per worker (only for gthread worker class)
# GUNICORN_THREADS=2

# Log level (default: info)
# Options: debug, info, warning, error, critical
GUNICORN_LOG_LEVEL=info

# ============================================================================
# SECURITY HEADERS (Production)
# ============================================================================

# Force HTTPS redirect
SECURE_SSL_REDIRECT=1

# Proxy SSL header (required if behind reverse proxy)
SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https

# Secure cookies
SESSION_COOKIE_SECURE=1
CSRF_COOKIE_SECURE=1

# HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=1
SECURE_HSTS_PRELOAD=1

# ============================================================================
# GOOGLE AI SERVICES (Optional)
# ============================================================================

# Google Gemini API Key (for AI features)
# GOOGLE_API_KEY=your-gemini-api-key-here

# Google Application Credentials (for cloud services)
# GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google-credentials.json

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ============================================================================
# WORKITEM SYSTEM CONFIGURATION
# ============================================================================

# WorkItem Unified Hierarchy System
USE_WORKITEM_MODEL=1
DUAL_WRITE_ENABLED=1
LEGACY_MODELS_READONLY=0
USE_UNIFIED_CALENDAR=1
WORKITEM_MIGRATION_AUTO_FIX=0
WORKITEM_MIGRATION_STRICT_MODE=0

# ============================================================================
# DEPLOYMENT NOTES
# ============================================================================

# Before deploying to production:
# 1. Generate a new SECRET_KEY (50+ characters)
# 2. Set DEBUG=0 (critical for security)
# 3. Update ALLOWED_HOSTS with your actual domain(s)
# 4. Update CSRF_TRUSTED_ORIGINS with https:// URLs
# 5. Change all passwords (POSTGRES_PASSWORD, EMAIL_HOST_PASSWORD)
# 6. Configure email settings (SMTP server, credentials)
# 7. Set up SSL certificates (if using nginx service)
# 8. Review and enable security headers

# Deployment command:
# docker-compose -f docker-compose.prod.yml --env-file .env.production up -d

# Health check:
# curl https://yourdomain.com/health/

# View logs:
# docker-compose -f docker-compose.prod.yml logs -f web

# Backup database:
# docker-compose -f docker-compose.prod.yml exec db pg_dump -U obcms_user obcms_prod > backup.sql
